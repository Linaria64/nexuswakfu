---
import MainLayout from '../../layouts/MainLayout.astro';
import { getCollection } from 'astro:content';
import Modal from '../../components/ui/Modal.astro';
import { Image } from 'astro:assets';

// Importer les images d'aptitude par défaut pour éviter les requêtes multiples
import dpsIcon from '../../assets/images/ability/dps.png';
import tankIcon from '../../assets/images/ability/tank.png';
import controleIcon from '../../assets/images/ability/controle.png';
import healthIcon from '../../assets/images/ability/health.png';
import placementIcon from '../../assets/images/ability/placement.png';
import specialiteIcon from '../../assets/images/ability/specialite.png';
import entraveIcon from '../../assets/images/ability/entrave.png';
import invocationIcon from '../../assets/images/ability/invocation.png';

// Fonction pour récupérer l'icône d'aptitude en fonction du type
const getAbilityIcon = (type: string) => {
  switch (type.toLowerCase()) {
    case 'dps': return dpsIcon;
    case 'tank': return tankIcon;
    case 'controle': return controleIcon;
    case 'soutien': return controleIcon; // Alias pour controle
    case 'health': return healthIcon;
    case 'placement': return placementIcon;
    case 'specialite': return specialiteIcon;
    case 'entrave': return entraveIcon;
    case 'invocation': return invocationIcon;
    default: return dpsIcon;
  }
};

// Fonction pour récupérer la couleur de fond en fonction du type
const getAbilityBgColor = (type: string) => {
  switch (type.toLowerCase()) {
    case 'dps': return 'bg-orange-500/20 hover:bg-orange-500/30';
    case 'tank': return 'bg-blue-500/20 hover:bg-blue-500/30';
    case 'controle': return 'bg-green-500/20 hover:bg-green-500/30';
    case 'soutien': return 'bg-green-500/20 hover:bg-green-500/30'; // Alias pour controle
    case 'health': return 'bg-red-500/20 hover:bg-red-500/30';
    case 'placement': return 'bg-purple-500/20 hover:bg-purple-500/30';
    case 'specialite': return 'bg-amber-500/20 hover:bg-amber-500/30';
    case 'entrave': return 'bg-indigo-500/20 hover:bg-indigo-500/30';
    case 'invocation': return 'bg-teal-500/20 hover:bg-teal-500/30';
    default: return 'bg-gray-500/20 hover:bg-gray-500/30';
  }
};

// Récupérer les classes depuis la collection
const classes = (await getCollection('classes')).sort((a, b) => a.data.name.localeCompare(b.data.name));

// Définir les couleurs pour chaque rôle
const roleColors = {
  'Tank': 'text-blue-300 bg-blue-900/50 border-blue-500/50',
  'Support': 'text-green-300 bg-green-900/50 border-green-500/50',
  'DPT': 'text-red-300 bg-red-900/50 border-red-500/50',
  'DPT distance': 'text-orange-300 bg-orange-900/50 border-orange-500/50',
  'DPT mêlée': 'text-yellow-300 bg-yellow-900/50 border-yellow-500/50',
  'Tank/DPT': 'text-purple-300 bg-purple-900/50 border-purple-500/50',
  'Healer, Support': 'text-emerald-300 bg-emerald-900/50 border-emerald-500/50',
};

---

<MainLayout title="Classes de Wakfu" description="Découvrez toutes les classes jouables dans Wakfu, leurs caractéristiques, spécialités et guides">
  <div class="container mx-auto px-4 py-12">
    <h1 class="text-5xl font-bold mb-4 text-center text-gradient-primary">Les Classes de Wakfu</h1>
    
    <p class="text-lg mb-10 max-w-3xl mx-auto text-center text-[var(--color-text-muted)]">
      Explorez les 18 classes uniques de Wakfu. Découvrez leurs sorts, passifs et styles de jeu pour trouver celle qui vous correspond.
    </p>

    <!-- Liste des classes - Glassmorphism Cards -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12" id="classes-container">
      {classes.map((clazz, index) => {

        const roleStyle = roleColors[clazz.data.role] || 'text-gray-300 bg-gray-700/50 border-gray-500/50';
        const animationDelay = `${index * 0.07}s`;
        
        return (
          <div 
            class="class-card glass rounded-xl overflow-hidden shadow-lg transition-all duration-300 hover:shadow-primary/20 hover:border-[var(--color-border-highlight)] hover:-translate-y-1 animate-fade-up flex flex-col h-full"
            style={`animation-delay: ${animationDelay};`}
          >
            <div class="p-6 relative z-10 flex flex-col h-full">
              {/* En-tête */}
              <div class="flex items-center gap-4 mb-4">
                <Image 
                  src={clazz.data.icon.src} 
                  alt={clazz.data.icon.alt}
                  width={64}
                  height={64}
                  loading={index > 5 ? "lazy" : "eager"}
                  format="webp"
                  class="w-16 h-16 rounded-lg border border-[var(--color-border-muted)]"
                />
                <div>
                  <h3 class="text-xl font-bold text-white">{clazz.data.name}</h3>
                </div>
              </div>
              
              {/* Description */}
              <p class="text-[var(--color-text-muted)] mb-4 flex-grow">{clazz.data.description || 'Aucune description disponible'}</p>
              
              {/* Étiquettes */}
              <div class="flex flex-col items-center gap-4 mb-6">
                <div class="flex gap-4 justify-center">
                  {clazz.data.abilities ? (
                    // Utiliser les aptitudes spécifiques définies dans le frontmatter de la classe
                    <>
                      {clazz.data.abilities.map(ability => (
                        <div class={`ability-icon-wrapper ${getAbilityBgColor(ability.type)} tooltip-container`}>
                          <Image 
                            src={ability.image.src} 
                            alt={ability.image.alt} 
                            width={30}
                            height={30}
                            class="ability-icon"
                            loading="lazy"
                            format="webp"
                          />
                          <span class="tooltip modal-tooltip">{ability.name}</span>
                        </div>
                      ))}
                    </>
                  ) : (
                    // Utiliser les aptitudes par défaut
                    <>
                      <div class="ability-icon-wrapper bg-orange-500/20 tooltip-container">
                        <Image 
                          src={dpsIcon} 
                          alt="DPS" 
                          width={30}
                          height={30}
                          class="ability-icon"
                          loading="lazy"
                          format="webp"
                        />
                        <span class="tooltip modal-tooltip">DPS</span>
                      </div>
                      <div class="ability-icon-wrapper bg-blue-500/20 tooltip-container">
                        <Image 
                          src={tankIcon} 
                          alt="Tank" 
                          width={30}
                          height={30}
                          class="ability-icon"
                          loading="lazy"
                          format="webp"
                        />
                        <span class="tooltip modal-tooltip">Tank</span>
                      </div>
                      <div class="ability-icon-wrapper bg-green-500/20 tooltip-container">
                        <Image 
                          src={controleIcon} 
                          alt="Contrôle" 
                          width={30}
                          height={30}
                          class="ability-icon"
                          loading="lazy"
                          format="webp"
                        />
                        <span class="tooltip modal-tooltip">Contrôle</span>
                      </div>
                    </>
                  )}
                </div>
                <div class="text-xs text-primary">{clazz.data.specialty}</div>
              </div>

              {/* Bouton voir plus - maintenant dans un conteneur mt-auto pour le placer en bas */}
              <div class="mt-auto flex justify-center">
                <button
                  class="btn btn-primary text-sm py-1.5 px-3 flex items-center gap-1 group"
                  data-modal-target={`modal-${clazz.data.id}`}
                >
                  En savoir plus
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 transform group-hover:translate-x-1 transition-transform" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                  </svg>
                </button>
              </div>
            </div>
          </div>
        );
      })}
    </div>
  </div>

  {/* Modales pour chaque classe */}
  {classes.map(clazz => {
    const roleStyle = roleColors[clazz.data.role] || 'text-gray-300 bg-gray-700/50 border-gray-500/50';
    
    return (
      <Modal
        id={`modal-${clazz.data.id}`}
        title={clazz.data.name}
        size="lg"
      >

        {/* Structure verticale avec défilement */}
        <div class="overflow-y-auto max-h-[75vh] pr-2 space-y-6">
          {/* Informations générales */}
          <div class="space-y-6">

            {/* Forces et Faiblesses */}
            <div class="space-y-4">
              <div class="glass p-3 rounded-xl hover:shadow-primary/20 hover:border-[var(--color-border-highlight)] transition-all duration-300">
                <h4 class="text-base font-semibold text-emerald-400 mb-1 flex items-center gap-1">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z" clip-rule="evenodd" />
                  </svg>
                  Forces
                </h4>
                <ul class="list-disc list-inside text-sm text-[var(--color-text-muted)]">
                  {clazz.data.strengths?.split(', ').map(strength => (
                    <li>{strength}</li>
                  ))}
                </ul>
              </div>
              <div class="glass p-3 rounded-xl hover:shadow-primary/20 hover:border-[var(--color-border-highlight)] transition-all duration-300">
                <h4 class="text-base font-semibold text-red-400 mb-1 flex items-center gap-1">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.28 7.22a.75.75 0 00-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 101.06 1.06L10 11.06l1.72 1.72a.75.75 0 101.06-1.06L11.06 10l1.72-1.72a.75.75 0 00-1.06-1.06L10 8.94 8.28 7.22z" clip-rule="evenodd" />
                  </svg>
                  Faiblesses
                </h4>
                <ul class="list-disc list-inside text-sm text-[var(--color-text-muted)]">
                  {clazz.data.weaknesses?.split(', ').map(weakness => (
                    <li>{weakness}</li>
                  ))}
                </ul>
              </div>
            </div>
            
            {/* Passif unique */}
            <div>
              <h3 class="text-xl font-semibold mb-2 text-primary">Passif Unique</h3>
              <div class="glass p-3 rounded-xl hover:shadow-primary/20 hover:border-[var(--color-border-highlight)] transition-all duration-300">
                <div class="flex items-center gap-2 mb-1">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 text-yellow-400">
                    <path fill-rule="evenodd" d="M10.868 2.884c-.321-.772-1.415-.772-1.736 0l-1.83 4.401-4.753.381c-.833.067-1.171 1.107-.536 1.651l3.62 3.102-1.106 4.637c-.194.813.691 1.456 1.405 1.02L10 15.591l4.069 2.485c.713.436 1.598-.207 1.404-1.02l-1.106-4.637 3.62-3.102c.635-.544.297-1.584-.536-1.65l-4.752-.382-1.831-4.401z" clip-rule="evenodd" />
                  </svg>
                  <h4 class="text-base font-semibold text-yellow-300">{clazz.data.uniquePassive?.name || 'Passif unique'}</h4>
                </div>
                <p class="text-sm text-[var(--color-text-muted)]">{clazz.data.uniquePassive?.description || 'Aucune description disponible'}</p>
              </div>
            </div>

            {/* Builds recommandés */}
            {clazz.data.builds && clazz.data.builds.length > 0 && (
              <div>
                <h3 class="text-xl font-semibold mb-2 text-primary">Builds</h3>
                <div class="space-y-3">
                {clazz.data.builds?.map(build => (
                  <div class="glass p-3 rounded-xl hover:shadow-primary/20 hover:border-[var(--color-border-highlight)] transition-all duration-300">
                    <div>
                      <div class="flex items-center justify-between mb-1">
                        <div class="flex items-center gap-2">
                          <h5 class="font-semibold text-white text-sm">{build.name}</h5>
                          {build.playstyle && (
                            <span class={`text-xs px-1.5 py-0.5 rounded-full ${
                              build.playstyle === 'Agressif' ? 'bg-red-900/50 text-red-300 border border-red-500/50' :
                              build.playstyle === 'Défensif' ? 'bg-blue-900/50 text-blue-300 border border-blue-500/50' :
                              'bg-purple-900/50 text-purple-300 border border-purple-500/50'
                            }`}>
                              {build.playstyle}
                            </span>
                          )}
                        </div>
                        <span class="text-xs text-primary">Niv. {build.minLevel}+</span>
                      </div>
                      <div class="text-xs px-1.5 py-0.5 rounded-full bg-primary/10 text-primary inline-block mb-1">{build.type}</div>
                      <p class="text-xs text-[var(--color-text-muted)]">{build.description}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            )}
          </div>
          
          {/* Sorts principaux et passifs */}
          <div class="space-y-6">
            {/* Sorts principaux */}
            <div>
              <h3 class="text-xl font-semibold mb-3 text-primary">Sorts Principaux</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {clazz.data.mainSpells?.map(spell => (
                  <div class="glass p-3 rounded-xl hover:shadow-primary/20 hover:border-[var(--color-border-highlight)] transition-all duration-300">
                    <div class="flex gap-3">
                      <Image 
                        src={spell.image.src} 
                        alt={spell.image.alt}
                        width={40}
                        height={40}
                        format="webp"
                        loading="lazy"
                        class="w-10 h-10 rounded-md border border-[var(--color-border-muted)] flex-shrink-0"
                      />
                      <div>
                        <div class="flex items-center gap-2">
                          <h5 class="font-semibold text-white text-sm">{spell.name}</h5>
                          <span class="text-xs px-1.5 py-0.5 rounded-full bg-primary/20 text-primary">Niv. {spell.level}</span>
                        </div>
                        <p class="text-xs text-[var(--color-text-muted)] mt-1">{spell.description}</p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Sorts passifs par catégorie */}
            <div>
              <h3 class="text-xl font-semibold mb-3 text-primary">Sorts Passifs</h3>
              
              {/* Regrouper les passifs par catégorie */}
              {['Offensif', 'Défensif', 'Réactif'].map(category => {
                const passivesInCategory = clazz.data.passiveSpells?.filter(spell => 
                  spell.category === category || (!spell.category && category === 'Offensif')
                ) || [];
                
                if (passivesInCategory.length === 0) return null;
                
                return (
                  <div class="mb-4">
                    <div class="flex items-center gap-2 mb-2">
                      <div class={`w-3 h-3 rounded-full ${
                        category === 'Offensif' ? 'bg-red-400' : 
                        category === 'Défensif' ? 'bg-blue-400' : 'bg-amber-400'
                      }`}></div>
                      <h4 class="text-sm font-semibold text-white">{category}</h4>
                    </div>
                    
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
                      {passivesInCategory?.map(spell => (
                        <div class="glass p-3 rounded-xl hover:shadow-primary/20 hover:border-[var(--color-border-highlight)] transition-all duration-300">
                          <div class="flex gap-3">
                            <Image 
                              src={spell.image.src} 
                              alt={spell.image.alt}
                              width={40}
                              height={40}
                              format="webp"
                              loading="lazy"
                              class="w-10 h-10 rounded-md border border-[var(--color-border-muted)] flex-shrink-0"
                            />
                            <div>
                              <h5 class="font-semibold text-white text-sm mb-1">{spell.name}</h5>
                              <p class="text-xs text-[var(--color-text-muted)]">{spell.description}</p>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </Modal>
    );
  })}
</MainLayout>

<style>
  .animate-fade-up {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeUp 0.5s ease-out forwards;
  }

  @keyframes fadeUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  .ability-icon-wrapper {
    width: 2.75rem;
    height: 2.75rem;
    border-radius: 50%;
    padding: 0.25rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease-in-out;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .ability-icon-wrapper:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
  }

  .ability-icon {
    width: 100%;
    height: 100%;
    object-fit: contain;
    filter: 
      drop-shadow(0 0 1px black) 
      drop-shadow(0 0 1px black) 
      drop-shadow(0 0 2px rgba(0, 0, 0, 0.8)) 
      contrast(1.6) 
      brightness(0.85) 
      saturate(1.2);
  }
  
  /* Style pour le tooltip */
  .tooltip-container {
    position: relative;
  }
  
  .tooltip {
    visibility: hidden;
    position: absolute;
    top: -120px; /* Beaucoup plus haut */
    left: 50%;
    transform: translateX(-50%);
    background-color: rgba(0, 0, 30, 0.92); /* Fond très foncé et presque opaque */
    backdrop-filter: blur(10px);
    color: white;
    padding: 12px 16px;
    border-radius: 12px;
    font-size: 0.9rem;
    max-width: 350px; /* Beaucoup plus large */
    min-width: 250px; /* Largeur minimale */
    overflow: visible; /* Permettre de déborder */
    white-space: normal;
    text-align: left; /* Alignement à gauche pour lisibilité */
    z-index: 1000;
    opacity: 0;
    transition: all 0.3s ease;
    border: 1px solid rgba(100, 100, 255, 0.3); /* Bordure bleutée */
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.7), 0 0 15px rgba(0, 100, 255, 0.2);
    line-height: 1.5;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.8);
    pointer-events: none; /* Pour éviter les problèmes d'interaction */
    height: auto; /* Hauteur automatique */
  }
  
  .tooltip::after {
    content: "";
    position: absolute;
    bottom: -12px; /* Flèche plus grande */
    left: 50%;
    transform: translateX(-50%);
    border-width: 12px 12px 0; /* Triangle plus grand */
    border-style: solid;
    border-color: rgba(0, 0, 30, 0.92) transparent transparent;
    filter: drop-shadow(0 2px 2px rgba(0, 0, 0, 0.3));
  }
  
  .tooltip-container:hover .tooltip {
    visibility: visible;
    opacity: 1;
    top: -130px; /* Position finale plus élevée */
  }
  
  /* Désactiver les tooltips dans la modale */
  .modal-icon:hover .modal-tooltip {
    visibility: hidden;
    opacity: 0;
  }
</style>
