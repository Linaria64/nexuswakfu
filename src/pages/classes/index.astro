---
import MainLayout from '../../layouts/MainLayout.astro';
import { getCollection } from 'astro:content';
import Modal from '../../components/ui/Modal.astro';

// Récupérer les classes depuis la collection
const classes = (await getCollection('classes')).sort((a, b) => a.data.name.localeCompare(b.data.name));

// Extraire les rôles uniques pour les options de filtre
const uniqueRoles = [...new Set(classes.map(clazz => clazz.data.role))].filter(Boolean).sort();

// Définir les couleurs pour chaque rôle
const roleColors = {
  'Tank': 'text-blue-300 bg-blue-900/50 border-blue-500/50',
  'Support': 'text-green-300 bg-green-900/50 border-green-500/50',
  'DPT': 'text-red-300 bg-red-900/50 border-red-500/50',
  'DPT distance': 'text-orange-300 bg-orange-900/50 border-orange-500/50',
  'DPT mêlée': 'text-yellow-300 bg-yellow-900/50 border-yellow-500/50',
  'Tank/DPT': 'text-purple-300 bg-purple-900/50 border-purple-500/50',
  'Healer, Support': 'text-emerald-300 bg-emerald-900/50 border-emerald-500/50',
};
---

<MainLayout title="Classes de Wakfu" description="Découvrez toutes les classes jouables dans Wakfu, leurs caractéristiques, spécialités et guides">
  <div class="container mx-auto px-4 py-12">
    <h1 class="text-5xl font-bold mb-4 text-center text-gradient-primary">Les Classes de Wakfu</h1>
    
    <p class="text-lg mb-10 max-w-3xl mx-auto text-center text-[var(--color-text-muted)]">
      Explorez les 18 classes uniques de Wakfu. Découvrez leurs sorts, passifs et styles de jeu pour trouver celle qui vous correspond.
    </p>

    <!-- Filtres de classes -->
    <div class="mb-10 p-6 rounded-xl glass shadow-lg">
      <h2 class="text-2xl font-semibold mb-5 text-white">Filtrer les classes</h2>
      
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div>
          <label class="block mb-2 text-primary font-medium">Recherche par nom</label>
          <div class="relative">
            <input 
              type="text" 
              id="search-input" 
              class="input-glass w-full" 
              placeholder="Rechercher une classe..."
            />
          </div>
        </div>
        
        <div>
          <label class="block mb-2 text-primary font-medium">Rôle</label>
          <select id="role-filter" class="select-glass">
            <option value="" class="bg-gray-900">Tous les rôles</option>
            {uniqueRoles.map(role => <option value={role} class="bg-gray-900">{role}</option>)}
          </select>
        </div>
        
        <!-- Filtre de difficulté supprimé -->
      </div>
    </div>

    <!-- Liste des classes - Glassmorphism Cards -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12" id="classes-container">
      {classes.map((clazz, index) => {

        const roleStyle = roleColors[clazz.data.role] || 'text-gray-300 bg-gray-700/50 border-gray-500/50';
        const animationDelay = `${index * 0.07}s`;
        
        return (
          <div 
            class="class-card glass rounded-xl overflow-hidden shadow-lg transition-all duration-300 hover:shadow-primary/20 hover:border-[var(--color-border-highlight)] hover:-translate-y-1 animate-fade-up"
            style={`animation-delay: ${animationDelay};`}
          >
            <div class="p-6 relative z-10">
              {/* En-tête */}
              <div class="flex items-center gap-4 mb-4">
                <img 
                  src={clazz.data.icon.src} 
                  alt={clazz.data.icon.alt}
                  class="w-16 h-16 rounded-lg border border-[var(--color-border-muted)]"
                />
                <div>
                  <h3 class="text-xl font-bold text-white">{clazz.data.name}</h3>
                  <span class="inline-block px-2 py-1 rounded-full text-xs role-tag {roleStyle} mt-1">{clazz.data.role}</span>
                </div>
              </div>
              
              {/* Description */}
              <p class="text-[var(--color-text-muted)] mb-4">{clazz.data.description}</p>
              
              {/* Étiquettes */}
              <div class="flex justify-between items-center mb-6">
                <span class="badge-text {roleStyle} role-tag">{clazz.data.role}</span>
                <div class="text-xs text-primary">{clazz.data.specialty}</div>
              </div>

              {/* Bouton voir plus */}
              <button
                class="btn btn-primary w-full group"
                data-modal-target={`modal-${clazz.data.id}`}
              >
                En savoir plus
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 transform group-hover:translate-x-1 transition-transform" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
              </button>
            </div>
          </div>
        );
      })}
    </div>
  </div>

  {/* Modales pour chaque classe */}
  {classes.map(clazz => {
    const roleStyle = roleColors[clazz.data.role] || 'text-gray-300 bg-gray-700/50 border-gray-500/50';
    
    return (
      <Modal
        id={`modal-${clazz.data.id}`}
        title={clazz.data.name}
        size="xl"
      >
        {/* Structure plus horizontale avec 2 colonnes principales */}
        <div class="grid grid-cols-1 xl:grid-cols-3 gap-6">
          {/* Colonne 1: Informations générales */}
          <div class="xl:col-span-1 space-y-6">
            {/* En-tête avec icône et description */}
            <div class="flex flex-col space-y-4">
              <div class="flex items-start gap-4">
                <img 
                  src={clazz.data.icon.src} 
                  alt={clazz.data.icon.alt}
                  class="w-16 h-16 rounded-lg border border-[var(--color-border-muted)]"
                />
                <div>
                  <h2 class="text-2xl font-bold text-white">{clazz.data.name}</h2>
                  <span class="inline-block px-3 py-1 rounded-full text-sm {roleStyle}">{clazz.data.role}</span>
                </div>
              </div>
              
              <div>
                <span class="text-primary text-sm">Style:</span>
                <span class="text-white text-sm ml-1">{clazz.data.combatStyle}</span>
              </div>
            </div>
            
            {/* Forces et Faiblesses */}
            <div class="space-y-4">
              <div class="glass p-3 rounded-xl">
                <h4 class="text-base font-semibold text-primary mb-1">Forces</h4>
                <ul class="list-disc list-inside text-sm text-[var(--color-text-muted)]">
                  {clazz.data.strengths.split(', ').map(strength => (
                    <li>{strength}</li>
                  ))}
                </ul>
              </div>
              <div class="glass p-3 rounded-xl">
                <h4 class="text-base font-semibold text-red-400 mb-1">Faiblesses</h4>
                <ul class="list-disc list-inside text-sm text-[var(--color-text-muted)]">
                  {clazz.data.weaknesses.split(', ').map(weakness => (
                    <li>{weakness}</li>
                  ))}
                </ul>
              </div>
            </div>
            
            {/* Passif unique */}
            <div>
              <h3 class="text-xl font-semibold mb-2 text-primary">Passif Unique</h3>
              <div class="glass p-3 rounded-xl">
                <h4 class="text-base font-semibold text-white mb-1">{clazz.data.uniquePassive.name}</h4>
                <p class="text-sm text-[var(--color-text-muted)]">{clazz.data.uniquePassive.description}</p>
              </div>
            </div>

            {/* Builds recommandés */}
            <div>
              <h3 class="text-xl font-semibold mb-2 text-primary">Builds</h3>
              <div class="space-y-3">
                {clazz.data.builds.map(build => (
                  <div class="glass p-3 rounded-xl">
                    <div>
                      <div class="flex items-center justify-between mb-1">
                        <h5 class="font-semibold text-white text-sm">{build.name}</h5>
                        <span class="text-xs text-primary">Niv. {build.minLevel}+</span>
                      </div>
                      <div class="text-xs text-primary mb-1">{build.type}</div>
                      <p class="text-xs text-[var(--color-text-muted)]">{build.description}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
          
          {/* Colonne 2+3: Sorts principaux et passifs */}
          <div class="xl:col-span-2 space-y-6">
            {/* Sorts principaux */}
            <div>
              <h3 class="text-xl font-semibold mb-3 text-primary">Sorts Principaux</h3>
              <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4">
                {clazz.data.mainSpells.map(spell => (
                  <div class="glass p-3 rounded-xl">
                    <div class="flex gap-3">
                      <img 
                        src={spell.image.src} 
                        alt={spell.image.alt}
                        class="w-10 h-10 rounded-md border border-[var(--color-border-muted)] flex-shrink-0"
                      />
                      <div>
                        <div class="flex items-center gap-2">
                          <h5 class="font-semibold text-white text-sm">{spell.name}</h5>
                          <span class="text-xs text-primary">Niv. {spell.level}</span>
                        </div>
                        <p class="text-xs text-[var(--color-text-muted)]">{spell.description}</p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Sorts passifs */}
            <div>
              <h3 class="text-xl font-semibold mb-3 text-primary">Sorts Passifs</h3>
              <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
                {clazz.data.passiveSpells.map(spell => (
                  <div class="glass p-3 rounded-xl">
                    <div class="flex gap-3">
                      <img 
                        src={spell.image.src} 
                        alt={spell.image.alt}
                        class="w-10 h-10 rounded-md border border-[var(--color-border-muted)] flex-shrink-0"
                      />
                      <div>
                        <h5 class="font-semibold text-white text-sm mb-1">{spell.name}</h5>
                        <p class="text-xs text-[var(--color-text-muted)]">{spell.description}</p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </Modal>
    );
  })}
</MainLayout>

<style>
  .animate-fade-up {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeUp 0.5s ease-out forwards;
  }

  @keyframes fadeUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  // Filtrage des classes
  function initializeFilters() {
    const searchInput = document.getElementById('search-input');
    const roleFilter = document.getElementById('role-filter');
    // Filtre de difficulté supprimé
    const classCards = document.querySelectorAll('.class-card');

    function filterClasses() {
      const searchTerm = searchInput.value.toLowerCase();
      const roleValue = roleFilter.value;

      classCards.forEach(card => {
        const title = card.querySelector('h3').textContent.toLowerCase();
        const role = card.querySelector('.role-tag').textContent.trim();
        
        const matchesSearch = title.includes(searchTerm);
        const matchesRole = !roleValue || role === roleValue;
        
        if (matchesSearch && matchesRole) {
            card.classList.remove('hidden');
        } else {
            card.classList.add('hidden');
        }
      });
    }

    if (searchInput && roleFilter) {
      searchInput.addEventListener('input', filterClasses);
      roleFilter.addEventListener('change', filterClasses);
      filterClasses();
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    initializeFilters();
  });
</script>
