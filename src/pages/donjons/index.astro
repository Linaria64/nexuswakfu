---
import MainLayout from '../../layouts/MainLayout.astro';
import { getCollection } from 'astro:content';
import Modal from '../../components/ui/Modal.astro';
import DungeonCard from '../../components/cards/DungeonCard.astro';
import { difficultyLabels } from '../../utils/constants';

    // 1. Fetch all entries from the collection
    const allDungeonsRaw = await getCollection('donjons');

    // 2. Filter for .mdx files ONLY
    const mdxDungeonsRaw = allDungeonsRaw.filter(donjon => donjon.id.endsWith('.mdx'));

    // 3. Sort the filtered .mdx entries by level
    const sortedMdxDungeonsRaw = mdxDungeonsRaw.sort((a, b) => a.data.level - b.data.level);

    // 4. Prepare the final array with rendered content for the sorted .mdx files
    const allDungeons = await Promise.all(
      sortedMdxDungeonsRaw.map(async (donjon) => {
        const { Content } = await donjon.render();
        return {
          ...donjon, // Spread original properties (id, slug, data, etc.)
          Content,   // Add the rendered Content component
        };
      })
    );

// Keep player labels if needed, or format directly
const playerLabels = {
  'solo': 'Solo',
  'group': 'Groupe (2-6)',
  'both': 'Solo / Groupe'
};

// TODO: Consider fetching drops dynamically if needed, remove simulation

// Extract unique difficulties for the filter dropdown

---

<MainLayout title="Donjons de Wakfu" description="Guides et strat√©gies pour tous les donjons de Wakfu, du niveau 1 √† 230">
  <div class="min-h-screen">
    <!-- Hero Section - Apply Glass Theme -->
    <div class="relative py-20 overflow-hidden">
      <div class="absolute inset-0 z-0">
        <div class="absolute inset-0 bg-gradient-to-b from-transparent to-[hsl(var(--color-bg-base))]"></div>
        <img src="/images/dungeons-hero.jpg" alt="Donjons de Wakfu" class="w-full h-full object-cover opacity-30">
      </div>
      
      <div class="relative z-10 container mx-auto px-4">
        <div class="max-w-4xl mx-auto text-center">
          <h1 class="text-5xl md:text-6xl font-bold mb-6 text-gradient-primary">
            Donjons de Wakfu
          </h1>
          <p class="text-xl text-[var(--color-text-muted)] mb-8">
            Explorez les donjons les plus dangereux du Monde des Douze et d√©couvrez leurs secrets.
          </p>
          
          <!-- Statistiques - Apply Glass Theme -->
          <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-12">
            <div class="glass rounded-xl p-4 text-center">
              <div class="text-3xl mb-2">üè∞</div>
              <div class="text-2xl font-bold text-primary">{allDungeons.length}</div>
              <div class="text-[var(--color-text-muted)]">Donjons</div>
            </div>
            <div class="glass rounded-xl p-4 text-center">
              <div class="text-3xl mb-2">‚öîÔ∏è</div>
              <div class="text-2xl font-bold text-primary">1-230</div>
              <div class="text-[var(--color-text-muted)]">Niveaux</div>
            </div>
            <div class="glass rounded-xl p-4 text-center">
              <div class="text-3xl mb-2">üë•</div>
              <div class="text-2xl font-bold text-primary">1-6</div>
              <div class="text-[var(--color-text-muted)]">Joueurs</div>
            </div>
            <div class="glass rounded-xl p-4 text-center">
              <div class="text-3xl mb-2">üíé</div>
              <div class="text-2xl font-bold text-primary">???+</div>
              <div class="text-[var(--color-text-muted)]">R√©compenses</div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Filtres - Apply Glass Theme -->
    <div class="container mx-auto px-4 py-8">
      <div class="glass rounded-xl p-6 mb-12">
        <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4">
          <div class="lg:col-span-2">
            <label class="block text-sm font-medium text-primary mb-2">Recherche</label>
            <div class="relative">
              <input 
                type="text" 
                id="search-input" 
                placeholder="Nom du donjon..."
                class="input-glass pl-10"
              >
               <span class="absolute left-3 top-3.5 text-gray-500 pointer-events-none">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                </svg>
              </span>
            </div>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-primary mb-2">Niveau</label>
            <select id="level-filter" name="level" class="select-glass">
              <option value="" class="bg-gray-900">Tous</option>
              <option value="1-50" class="bg-gray-900">1-50</option>
              <option value="51-100" class="bg-gray-900">51-100</option>
              <option value="101-150" class="bg-gray-900">101-150</option>
              <option value="151-200" class="bg-gray-900">151-200</option>
              <option value="201-230" class="bg-gray-900">201-230</option>
            </select>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-primary mb-2">Difficult√©</label>
            <select id="difficulty-filter" name="difficulty" class="select-glass">
              <option value="" class="bg-gray-900">Toutes</option>
              {Object.entries(difficultyLabels).map(([key, { label }]) => (
                <option value={key} class="bg-gray-900">{label}</option>
              ))}
            </select>
          </div>
        </div>
      </div>

      <!-- Grille de donjons - Use actual data and apply Glass Theme -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6" id="dungeon-grid">
        {allDungeons.map((donjon, index) => {
          const difficulty = difficultyLabels[donjon.data.difficulty] || difficultyLabels.medium;
          const playersText = playerLabels[donjon.data.players] || 'Groupe';
          const animationDelay = `${index * 0.05}s`;
          return (
            <div class="dungeon-card" 
                 data-level={donjon.data.level} 
                 data-difficulty={donjon.data.difficulty}
                 style={`animation-delay: ${animationDelay};`}
            >
              <DungeonCard dungeon={donjon} />
            </div>
          );
        })}
      </div>
  </div>

  <script type="module" client:load>
    document.addEventListener('DOMContentLoaded', () => {
      // Gestionnaire pour ouvrir les modales
      document.querySelectorAll('[data-modal-open]').forEach(button => {
        button.addEventListener('click', () => {
          const modalId = button.getAttribute('data-modal-open');
          const modal = document.getElementById(modalId);
          
          if (modal) {
            console.log('Opening modal:', modalId);
            // Ouvrir ce modal
            modal.classList.remove('pointer-events-none', 'opacity-0');
            document.body.style.overflow = 'hidden';
            
            // Focus sur le premier √©l√©ment focusable apr√®s ouverture
            setTimeout(() => {
              const focusableElements = modal.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
              if (focusableElements.length > 0) {
                focusableElements[0].focus();
              }
            }, 100);
          }  
        });
      });
      
      // Gestionnaire pour fermer les modales
      document.querySelectorAll('[data-modal-close]').forEach(element => {
        element.addEventListener('click', () => {
          const modal = element.closest('.modal');
          if (modal) {
            modal.classList.add('pointer-events-none', 'opacity-0');
            document.body.style.overflow = '';
          }
        });
      });
      
      // Fermer avec Escape
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          const openModal = document.querySelector('.modal:not(.pointer-events-none)');
          if (openModal) {
            openModal.classList.add('pointer-events-none', 'opacity-0');
            document.body.style.overflow = '';
          }
        }
      });
    });
  </script>

  <script>
    // Updated filter script
    const searchInput = document.getElementById('search-input');
    const levelFilter = document.getElementById('level-filter');
    const difficultyFilter = document.getElementById('difficulty-filter');
    const dungeonGrid = document.getElementById('dungeon-grid');
    const dungeonCards = dungeonGrid ? Array.from(dungeonGrid.querySelectorAll('.dungeon-card')) : [];

    function filterDungeons() {
      if (!dungeonGrid) return; 
      const searchTerm = searchInput.value.toLowerCase();
      const selectedLevelRange = levelFilter.value;
      const selectedDifficulty = difficultyFilter.value;

      let minLevel = 0;
      let maxLevel = 999;
      if (selectedLevelRange) {
          [minLevel, maxLevel] = selectedLevelRange.split('-').map(Number);
      }

      dungeonCards.forEach(card => {
        const name = card.querySelector('h3').textContent.toLowerCase();
        const level = parseInt(card.dataset.level || '0');
        const difficulty = card.dataset.difficulty || '';

        const matchesSearch = name.includes(searchTerm);
        const matchesLevel = !selectedLevelRange || (level >= minLevel && level <= maxLevel);
        const matchesDifficulty = !selectedDifficulty || difficulty === selectedDifficulty;

        if (matchesSearch && matchesLevel && matchesDifficulty) {
          card.style.display = 'flex'; // Use flex as the card uses flex layout
        } else {
          card.style.display = 'none';
        }
      });
    }

    // Add event listeners only if elements exist
    if (searchInput && levelFilter && difficultyFilter) {
        searchInput.addEventListener('input', filterDungeons);
        levelFilter.addEventListener('change', filterDungeons);
        difficultyFilter.addEventListener('change', filterDungeons);
        // Initial filter on load
        filterDungeons();
    } else {
        console.warn('Filter elements not found, filtering disabled.');
    }
  </script>
</MainLayout>

<style>
  /* Keep animations */
  .animate-fade-up {
    opacity: 0;
    transform: translateY(15px);
    animation: fadeUp 0.4s ease-out forwards;
    animation-name: fadeUp;
    animation-duration: 0.4s;
    animation-timing-function: ease-out;
    animation-fill-mode: forwards;
  }

  @keyframes fadeUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Styles pour le contenu MDX */
  .prose .glass-card,
  .prose .glass {
    background: rgba(30, 41, 59, 0.4) !important;
    border: 1px solid rgba(148, 163, 184, 0.1) !important;
    backdrop-filter: blur(12px) !important;
    border-radius: 0.75rem !important;
    padding: 1rem !important;
    margin-bottom: 1rem !important;
    width: 100% !important;
  }
</style>