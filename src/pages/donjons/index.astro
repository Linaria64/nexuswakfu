---
import MainLayout from '../../layouts/MainLayout.astro';
import { getCollection } from 'astro:content';
import EnhancedDungeonCard from '../../components/cards/EnhancedDungeonCard.astro';
import { difficultyLabels } from '../../utils/constants';

// 1. Fetch all entries from the collection
const allDungeonsRaw = await getCollection('donjons');

// 2. Filter for .mdx files ONLY
const mdxDungeonsRaw = allDungeonsRaw.filter(donjon => donjon.id.endsWith('.mdx'));

// 3. Sort the filtered .mdx entries by level
const sortedMdxDungeonsRaw = mdxDungeonsRaw.sort((a, b) => a.data.level - b.data.level);

// 4. Prepare the final array with rendered content for the sorted .mdx files
const allDungeons = await Promise.all(
  sortedMdxDungeonsRaw.map(async (donjon) => {
    const { Content } = await donjon.render();
    return {
      ...donjon, // Spread original properties (id, slug, data, etc.)
      Content,   // Add the rendered Content component
    };
  })
);

// Keep player labels if needed, or format directly
const playerLabels = {
  'solo': 'Solo',
  'group': 'Groupe (2-6)',
  'both': 'Solo / Groupe'
};

// G√©n√©rer un ID modal unique pour chaque donjon
const getModalId = (slug) => `modal-dungeon-${slug}`;

// Cr√©er les niveaux de filtre bas√©s sur les donjons disponibles
const levelRanges = [
  { label: '1-50', min: 1, max: 50 },
  { label: '51-100', min: 51, max: 100 },
  { label: '101-150', min: 101, max: 150 },
  { label: '151-200', min: 151, max: 200 },
  { label: '201-230', min: 201, max: 230 }
];

// Extraire les r√©gions uniques pour le filtre de r√©gion
const uniqueRegions = [...new Set(allDungeons.map(dungeon => dungeon.data.region))].sort();

---

<MainLayout title="Donjons de Wakfu" description="Guides et strat√©gies pour tous les donjons de Wakfu, du niveau 1 √† 230">
  <div class="min-h-screen">
    <!-- Hero Section - Apply Glass Theme -->
    <div class="relative py-20 overflow-hidden">
      <div class="absolute inset-0 z-0">
        <div class="absolute inset-0 bg-gradient-to-b from-transparent to-[hsl(var(--color-bg-base))]"></div>
        <img src="/images/dungeons-hero.jpg" alt="Donjons de Wakfu" class="w-full h-full object-cover opacity-30">
      </div>
      
      <div class="relative z-10 container mx-auto px-4">
        <div class="max-w-4xl mx-auto text-center">
          <h1 class="text-5xl md:text-6xl font-bold mb-6 text-gradient-primary">
            Donjons de Wakfu
          </h1>
          <p class="text-xl text-[var(--color-text-muted)] mb-8">
            Explorez les donjons les plus dangereux du Monde des Douze et d√©couvrez leurs secrets.
          </p>
          
          <!-- Statistiques - Apply Glass Theme -->
          <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-12">
            <div class="glass rounded-xl p-4 text-center">
              <div class="text-3xl mb-2">üè∞</div>
              <div class="text-2xl font-bold text-primary">{allDungeons.length}</div>
              <div class="text-[var(--color-text-muted)]">Donjons</div>
            </div>
            <div class="glass rounded-xl p-4 text-center">
              <div class="text-3xl mb-2">‚öîÔ∏è</div>
              <div class="text-2xl font-bold text-primary">1-230</div>
              <div class="text-[var(--color-text-muted)]">Niveaux</div>
            </div>
            <div class="glass rounded-xl p-4 text-center">
              <div class="text-3xl mb-2">üë•</div>
              <div class="text-2xl font-bold text-primary">1-6</div>
              <div class="text-[var(--color-text-muted)]">Joueurs</div>
            </div>
            <div class="glass rounded-xl p-4 text-center">
              <div class="text-3xl mb-2">üíé</div>
              <div class="text-2xl font-bold text-primary">???+</div>
              <div class="text-[var(--color-text-muted)]">R√©compenses</div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Filtres - Apply Glass Theme -->
    <div class="container mx-auto px-4 py-8">
      <div class="glass rounded-xl p-6 mb-12">
        <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4">
          <div class="lg:col-span-2">
            <label class="block text-sm font-medium text-primary mb-2">Recherche</label>
            <div class="relative">
              <input 
                type="text" 
                id="search-input" 
                placeholder="Nom du donjon..."
                class="input-glass pl-10"
              >
               <span class="absolute left-3 top-3.5 text-gray-500 pointer-events-none">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                </svg>
              </span>
            </div>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-primary mb-2">Niveau</label>
            <select id="level-filter" name="level" class="select-glass">
              <option value="" class="bg-gray-900">Tous</option>
              <option value="1-50" class="bg-gray-900">1-50</option>
              <option value="51-100" class="bg-gray-900">51-100</option>
              <option value="101-150" class="bg-gray-900">101-150</option>
              <option value="151-200" class="bg-gray-900">151-200</option>
              <option value="201-230" class="bg-gray-900">201-230</option>
            </select>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-primary mb-2">Difficult√©</label>
            <select id="difficulty-filter" name="difficulty" class="select-glass">
              <option value="" class="bg-gray-900">Toutes</option>
              {Object.entries(difficultyLabels).map(([key, { label }]) => (
                <option value={key} class="bg-gray-900">{label}</option>
              ))}
            </select>
          </div>
        </div>
      </div>

      <!-- Grille de donjons avec modals pour les d√©tails -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6" id="dungeon-grid">
        {allDungeons.map((donjon, index) => {
          const modalId = getModalId(donjon.slug);
          const animationDelay = `${index * 0.05}s`;
          return (
            <>
              <div 
                class="dungeon-card animate-fade-up" 
                data-level={donjon.data.level} 
                data-difficulty={donjon.data.difficulty}
                data-region={donjon.data.region}
                data-players={donjon.data.players}
                style={`animation-delay: ${animationDelay};`}
              >
                <EnhancedDungeonCard dungeon={donjon} modalId={modalId} />
              </div>
              
              <!-- Lien vers la page de d√©tail au lieu du modal -->
              <!-- Le modal a √©t√© remplac√© par un lien direct vers la page de d√©tail -->
            </>
          );
        })}
      </div>
      
      <!-- Message affich√© quand aucun donjon ne correspond aux filtres -->
      <div id="no-results-message" class="hidden text-center py-12 animate-fade-up">
        <div class="glass rounded-xl p-6 max-w-xl mx-auto">
          <div class="text-4xl mb-4">üîç</div>
          <h3 class="text-xl font-bold text-primary mb-2">Aucun donjon trouv√©</h3>
          <p class="text-[var(--color-text-muted)]">Essayez de modifier vos crit√®res de recherche pour trouver des donjons.</p>
        </div>
      </div>
  </div>

  <script type="module" client:load>
    document.addEventListener('DOMContentLoaded', () => {
      // Gestionnaire pour ouvrir les modales
      document.querySelectorAll('[data-modal-open]').forEach(button => {
        button.addEventListener('click', () => {
          const modalId = button.getAttribute('data-modal-open');
          const modal = document.getElementById(modalId);
          
          if (modal) {
            console.log('Opening modal:', modalId);
            // Ouvrir ce modal
            modal.classList.remove('pointer-events-none', 'opacity-0');
            document.body.style.overflow = 'hidden';
            
            // Focus sur le premier √©l√©ment focusable apr√®s ouverture
            setTimeout(() => {
              const focusableElements = modal.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
              if (focusableElements.length > 0) {
                focusableElements[0].focus();
              }
            }, 100);
          }  
        });
      });
      
      // Gestionnaire pour fermer les modales
      document.querySelectorAll('[data-modal-close]').forEach(element => {
        element.addEventListener('click', () => {
          const modal = element.closest('.modal');
          if (modal) {
            modal.classList.add('pointer-events-none', 'opacity-0');
            document.body.style.overflow = '';
          }
        });
      });
      
      // Fermer avec Escape
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          const openModal = document.querySelector('.modal:not(.pointer-events-none)');
          if (openModal) {
            openModal.classList.add('pointer-events-none', 'opacity-0');
            document.body.style.overflow = '';
          }
        }
      });
    });
  </script>

  <script>
    // Script de filtrage am√©lior√© avec d√©lai de frappe et animations
    document.addEventListener('DOMContentLoaded', () => {
      const searchInput = document.getElementById('search-input');
      const levelFilter = document.getElementById('level-filter');
      const difficultyFilter = document.getElementById('difficulty-filter');
      const dungeonGrid = document.getElementById('dungeon-grid');
      const noResultsMessage = document.getElementById('no-results-message');
      const dungeonCards = dungeonGrid ? Array.from(dungeonGrid.querySelectorAll('.dungeon-card')) : [];
      const countElement = document.createElement('div');
      
      // Cr√©ation du compteur de r√©sultats
      countElement.className = 'text-center text-sm text-muted-foreground mt-2 mb-4';
      if (dungeonGrid && dungeonGrid.parentNode) {
        dungeonGrid.parentNode.insertBefore(countElement, dungeonGrid);
      }
      
      // Variables pour le d√©lai de frappe
      let searchTimeout = null;
      const SEARCH_DELAY = 300; // ms
      
      // Sauvegarder les filtres dans le localStorage
      const STORAGE_KEY = 'wakfu-dungeon-filters';
      
      // Restaurer les filtres √† partir du localStorage
      function restoreFilters() {
        try {
          const savedFilters = localStorage.getItem(STORAGE_KEY);
          if (savedFilters) {
            const { search, level, difficulty } = JSON.parse(savedFilters);
            if (searchInput && search) searchInput.value = search;
            if (levelFilter && level) levelFilter.value = level;
            if (difficultyFilter && difficulty) difficultyFilter.value = difficulty;
          }
        } catch (e) {
          console.error('Erreur lors de la restauration des filtres:', e);
        }
      }
      
      // Sauvegarder les filtres actuels
      function saveFilters() {
        try {
          const filters = {
            search: searchInput?.value || '',
            level: levelFilter?.value || '',
            difficulty: difficultyFilter?.value || ''
          };
          localStorage.setItem(STORAGE_KEY, JSON.stringify(filters));
        } catch (e) {
          console.error('Erreur lors de la sauvegarde des filtres:', e);
        }
      }

      // Fonction de filtrage principale avec animations
      function filterDungeons() {
        if (!dungeonGrid) return;
        
        const searchTerm = (searchInput?.value || '').toLowerCase();
        const selectedLevelRange = levelFilter?.value || '';
        const selectedDifficulty = difficultyFilter?.value || '';

        let minLevel = 0;
        let maxLevel = 999;
        if (selectedLevelRange) {
          [minLevel, maxLevel] = selectedLevelRange.split('-').map(Number);
        }

        let visibleCount = 0;
        
        dungeonCards.forEach(card => {
          // R√©cup√©rer les informations √† partir des data-attributes
          const name = card.querySelector('h3')?.textContent.toLowerCase() || '';
          const level = parseInt(card.dataset.level || '0');
          const difficulty = card.dataset.difficulty || '';
          
          // Logique de filtrage
          const matchesSearch = name.includes(searchTerm);
          const matchesLevel = !selectedLevelRange || (level >= minLevel && level <= maxLevel);
          const matchesDifficulty = !selectedDifficulty || difficulty === selectedDifficulty;
          
          // Appliquer le filtrage avec animation
          if (matchesSearch && matchesLevel && matchesDifficulty) {
            if (card.style.display === 'none') {
              // Animer l'apparition
              card.style.opacity = '0';
              card.style.transform = 'translateY(10px)';
              card.style.display = '';
              setTimeout(() => {
                card.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
              }, 10);
            }
            visibleCount++;
          } else {
            // Animer la disparition
            if (card.style.display !== 'none') {
              card.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
              card.style.opacity = '0';
              card.style.transform = 'translateY(10px)';
              setTimeout(() => {
                card.style.display = 'none';
              }, 300);
            }
          }
        });
        
        // Mise √† jour du compteur de r√©sultats
        countElement.textContent = `${visibleCount} donjon${visibleCount > 1 ? 's' : ''} affich√©${visibleCount > 1 ? 's' : ''}`;
        
        // Afficher/masquer le message "aucun r√©sultat"
        if (noResultsMessage) {
          if (visibleCount === 0) {
            noResultsMessage.classList.remove('hidden');
          } else {
            noResultsMessage.classList.add('hidden');
          }
        }
        
        // Sauvegarder les filtres actuels
        saveFilters();
      }

      // Gestion des √©v√©nements de filtrage avec d√©lai pour la recherche
      if (searchInput) {
        searchInput.addEventListener('input', () => {
          clearTimeout(searchTimeout);
          searchTimeout = setTimeout(filterDungeons, SEARCH_DELAY);
        });
      }
      
      if (levelFilter) {
        levelFilter.addEventListener('change', filterDungeons);
      }
      
      if (difficultyFilter) {
        difficultyFilter.addEventListener('change', filterDungeons);
      }
      
      // Restaurer les filtres et filtrer initialement
      restoreFilters();
      filterDungeons();
    });
  </script>

  <style>
    /* Animations */
    .animate-fade-up {
      opacity: 0;
      transform: translateY(15px);
      animation: fadeUp 0.4s ease-out forwards;
    }

    @keyframes fadeUp {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    /* Transitions pour le filtrage */
    .dungeon-card {
      transition: opacity 0.3s ease, transform 0.3s ease;
    }
    
    /* Animation pour les modals */
    @keyframes modalScale {
      from {
        opacity: 0;
        transform: scale(0.95);
      }
      to {
        opacity: 1;
        transform: scale(1);
      }
    }
    
    .modal-scale {
      animation: modalScale 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    }
  
    /* Styles pour le contenu MDX */
    .prose .glass-card,
    .prose .glass {
      background: rgba(30, 41, 59, 0.4) !important;
      border: 1px solid rgba(148, 163, 184, 0.1) !important;
      backdrop-filter: blur(12px) !important;
      border-radius: 0.75rem !important;
      padding: 1rem !important;
      margin-bottom: 1rem !important;
      width: 100% !important;
    }
  </style>
</MainLayout>