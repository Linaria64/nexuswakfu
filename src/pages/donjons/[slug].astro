---
import { CollectionEntry, getCollection } from 'astro:content';
import { getDifficultyInfo, getPlayersText } from '@utils/dungeonUtils';
import { Image } from 'astro:assets';

// Define the type for the dungeon entry props
interface Props {
  donjon: CollectionEntry<'donjons'>;
}

// Get the dungeon entry based on the slug
export async function getStaticPaths() {
  const donjons = await getCollection('donjons');
  return donjons.map(donjon => ({
    params: { slug: donjon.slug },
    props: { donjon },
  }));
}

const { donjon } = Astro.props;
const { data } = donjon;

const difficultyInfo = getDifficultyInfo(data.difficulty);
const playersText = getPlayersText(data.players);

// Handle potential missing icon
const iconSrc = data.icon?.src || '/placeholder-icon.png'; // Provide a fallback path if needed
const iconAlt = `Icône du donjon ${data.name}`;

// Function to get the correct image path (ensure this matches your data structure)
function getRewardImagePath(reward: any) {
  // Example: assumes reward.image.src has the path like '/images/items/some_item.png'
  return reward.image?.src;
}

// Function to map reward type to display text and color
function getRewardTypeInfo(type: string | undefined) {
  switch (type?.toLowerCase()) {
    case 'equipment':
      return { text: 'Équipement', style: 'bg-blue-500/20 border-blue-500/50' };
    case 'resource':
      return { text: 'Ressource', style: 'bg-green-500/20 border-green-500/50' };
    case 'cosmetic':
      return { text: 'Cosmétique', style: 'bg-purple-500/20 border-purple-500/50' };
    case 'token':
         return { text: 'Jeton', style: 'bg-yellow-500/20 border-yellow-500/50' };
    default:
      return { text: 'Récompense', style: 'bg-gray-800/50 border-gray-500/50' };
  }
}

---

<article class="py-12 px-4">
    <div class="container mx-auto max-w-4xl animate-fade-up">

      <!-- === NEW HEADER SECTION START === -->
      <div class="flex flex-col items-center text-center mb-12">
        <!-- Back Button -->
        <a href="/donjons"
           class="inline-flex items-center mb-6 px-4 py-2 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg shadow-md hover:opacity-90 transition-opacity text-sm font-medium group">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 mr-2 transform transition-transform duration-200 ease-in-out group-hover:-translate-x-1">
            <path fill-rule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clip-rule="evenodd" />
          </svg>
          Retour à la liste des donjons
        </a>

        <!-- Dungeon Icon -->
        {data.icon && (
          <Image
            src={iconSrc}
            alt={iconAlt}
            width={100}
            height={100}
            class="rounded-full mb-4 shadow-lg border-2 border-primary/50"
            format="webp"
          />
        )}

        <!-- Title -->
        <h1 class="text-3xl md:text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-primary to-secondary mb-2">
          {data.name}
        </h1>

        <!-- Subtitle / Description -->
        {data.description && (
          <p class="text-lg text-muted-foreground mb-4 max-w-2xl">
            {data.description}
          </p>
        )}
      </div>
      <!-- === NEW HEADER SECTION END === -->


      <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-10 items-stretch">
        {/* <!-- Bosses Section START (Moved into grid, first column) --> */}
        {data.bosses && data.bosses.length > 0 && (
          <div class="mb-0 h-full"> 
            <h2 class="text-2xl font-bold mb-6 text-secondary border-b-2 border-secondary/30 pb-2">Boss</h2>
            <div class="space-y-6">
              {data.bosses.map(boss => (
                <div class="card bg-base-200/50 shadow-lg p-6 rounded-lg border border-white/10 flex flex-col md:flex-row gap-6 items-start">
                  {boss.bossImage && (
                    <div class="flex-shrink-0 w-full md:w-40 h-40 relative rounded-md overflow-hidden shadow-md border border-white/10">
                      <Image
                        src={boss.bossImage.src}
                        alt={`Image de ${boss.name}`}
                        class="object-cover w-full h-full"
                        width={160} height={160}
                        format="webp"
                      />
                    </div>
                  )}
                  <div class="flex-grow">
                    <h3 class="text-xl font-semibold text-primary mb-3">{boss.name}</h3>
                    {boss.description && <p class="text-sm text-muted-foreground mb-4">{boss.description}</p>}
                    <div class="text-sm space-y-3 mb-3">
                      {boss.hp && (
                        <div class="flex items-center">
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 mr-1.5 text-red-500 flex-shrink-0">
                            <path d="M9.653 16.915l-.005-.003-.019-.01a20.759 20.759 0 01-1.162-.682 22.045 22.045 0 01-2.582-1.9C4.045 12.733 2 10.352 2 7.5a4.5 4.5 0 018-2.828A4.5 4.5 0 0118 7.5c0 2.852-2.044 5.233-3.885 6.82a22.049 22.049 0 01-3.744 2.582l-.019.01-.005.003h-.002a.739.739 0 01-.69.001l-.002-.001z" />
                          </svg>
                          <strong class="text-primary mr-1">PV :</strong> {boss.hp.toLocaleString()}
                        </div>
                      )}
                      {boss.masteries && (
                        <div class="flex items-center">
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 mr-1.5 text-yellow-500 flex-shrink-0">
                            <path d="M11.983 1.907a.75.75 0 00-1.966 0l-3.25 6.5a.75.75 0 00.667 1.093h2.599a.75.75 0 01.334 1.406l-4.25 6.75a.75.75 0 001.248.787l3.25-6.5a.75.75 0 00-.667-1.093H7.925a.75.75 0 01-.334-1.406l4.25-6.75z" />
                          </svg>
                          <strong class="text-primary mr-1">Maîtrises :</strong>
                          {Object.entries(boss.masteries).filter(([key, value]) => value != null).map(([key, value]) => <span class="ml-2">{key.charAt(0).toUpperCase() + key.slice(1)}: {value}%</span>)}
                        </div>
                      )}
                      {boss.resistances && (
                        <div class="flex items-center">
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 mr-1.5 text-blue-500 flex-shrink-0">
                            <path fill-rule="evenodd" d="M8.014 4.365a.75.75 0 011.016-.269l7.25 5.5a.75.75 0 01.018 1.133l-7.25 5.5a.75.75 0 01-1.034-.864l1.259-4.357a.75.75 0 00-.495-.816L1.87 7.543a.75.75 0 01-.234-1.185l6.378-1.993zM10 8.158l4.533 3.434-.863 2.99 4.88-3.725a.75.75 0 00-.018-1.133l-7.25-5.5a.75.75 0 00-1.016.269L4.234 9.15l3.806 1.19a.75.75 0 01.495.816L7.296 14.5l2.704-2.05v-4.292z" clip-rule="evenodd" />
                          </svg>
                          <strong class="text-primary mr-1">Résistances :</strong>
                          {Object.entries(boss.resistances).filter(([key, value]) => value != null).map(([key, value]) => <span class="ml-2">{key.charAt(0).toUpperCase() + key.slice(1)}: {value}%</span>)}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
        {/* <!-- Bosses Section END --> */}

        <!-- General Info Card (Remains in grid, second column) -->
        <div class="card bg-base-200/50 shadow-xl p-6 rounded-lg border border-white/10 h-full"> 
          <h2 class="text-2xl font-bold mb-4 text-secondary">Informations Générales</h2>
          <div class="space-y-3 text-base">
            <div class="flex items-center">
              <strong class="text-primary mr-1">Niveau :</strong> {data.level}
            </div>
            <div class="flex items-center">
              <span class={`px-2 py-0.5 rounded-full text-xs font-medium ${difficultyInfo.bgColor} ${difficultyInfo.textColor}`}>
                {difficultyInfo.label}
              </span>
            </div>
            <div class="flex items-center">
              <strong class="text-primary mr-1">Joueurs :</strong> {playersText}
            </div>
            <div class="flex items-center">
              <strong class="text-primary mr-1">Région :</strong> {data.region}
            </div>
          </div>
        </div>

      </div>

      {/* <!-- Steles Card START (New position below grid) --> */}
      {data.steles && data.steles.length > 0 && (
        <div class="mb-10"> 
          <div class="card bg-base-200/50 shadow-xl p-6 rounded-lg border border-white/10">
            <h2 class="text-2xl font-bold mb-4 text-secondary">Stèles</h2>
            <ul class="space-y-3 list-none p-0">
              {data.steles.map(stele => (
                <li class="border-l-4 border-primary pl-3">
                  <h3 class="font-semibold text-primary">{stele.name}</h3>
                  <p class="text-sm text-muted-foreground">{stele.description}</p>
                </li>
              ))}
            </ul>
          </div>
        </div>
      )}
      {/* <!-- Steles Card END --> */}

      <!-- Strategy Section -->
      {data.strategy && (
        <div class="mb-10">
          <h2 class="text-2xl font-bold mb-4 text-secondary border-b-2 border-secondary/30 pb-2">Stratégie</h2>
          <div class="prose prose-invert max-w-none prose-p:text-muted-foreground prose-headings:text-primary prose-strong:text-primary">
            {/* Render the strategy Markdown content here */}
            <p>{data.strategy}</p> 
          </div>
        </div>
      )}

      <!-- Rewards Section - VERSION HTML IMG -->
      <div>
        <h2 class="text-2xl font-bold mb-4 text-secondary border-b-2 border-secondary/30 pb-2">Récompenses du Donjon</h2>
        
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-10">
          {data.rewards && data.rewards.length > 0 ? (
            data.rewards.map((reward, index) => {
              const typeInfo = getRewardTypeInfo(reward.type);
              const imagePath = getRewardImagePath(reward);
              const isEquipment = reward.type?.toLowerCase() === 'equipment';
              const popupId = `reward-details-${index}`;
              
              return (
                <div class={`rounded-lg border ${typeInfo.style} p-4 shadow-lg flex flex-col ${isEquipment ? 'relative equipment-wrapper' : ''}`}>
                  {/* Carte de récompense cliquable pour les équipements */}
                  <div 
                    class={`flex items-center mb-3 ${isEquipment ? 'cursor-pointer equipment-toggle' : ''}`}
                    {...isEquipment && { 'data-target': popupId }}
                  >
                    <div class="w-16 h-16 mr-4 flex-shrink-0 overflow-hidden rounded-lg border-2 border-white/30 bg-gray-700 flex items-center justify-center">
                      {imagePath ? (
                        <img
                          src={imagePath}
                          alt={reward.image?.alt || reward.name || 'Reward Image'}
                          class="max-w-full max-h-full object-contain"
                          loading="lazy"
                          width="64" 
                          height="64" 
                        />
                      ) : (
                        <div class="text-gray-400 text-xs text-center">Pas d'image</div>
                      )}
                    </div>
                    <div class="flex-grow">
                      <h3 class="text-lg font-bold text-white leading-tight">{reward.name}</h3>
                      <span class={`text-xs ${typeInfo.style.includes('blue') ? 'text-blue-300' : typeInfo.style.includes('green') ? 'text-green-300' : typeInfo.style.includes('purple') ? 'text-purple-300' : typeInfo.style.includes('yellow') ? 'text-yellow-300' : 'text-gray-300'} bg-gray-800/60 rounded px-2 py-0.5 mt-1 inline-block`}>
                        {typeInfo.text}
                      </span>
                    </div>
                    {isEquipment && (
                      <div class="text-amber-400 ml-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                      </div>
                    )}
                  </div>
                  
                  {reward.description && (
                    <p class="text-gray-300 text-sm mt-auto pt-2 border-t border-gray-700">{reward.description}</p>
                  )}
                  
                  {/* Popup pour les équipements */}
                  {isEquipment && reward.stats && (
                    <div 
                      id={popupId} 
                      class="equipment-details hidden absolute z-50 w-80 p-4 bg-gray-900/95 backdrop-blur-md border border-amber-700/50 rounded-lg shadow-xl right-0 bottom-full mb-2"
                    >
                      {/* Entête du popup */}
                      <div class="flex items-center mb-3 pb-2 border-b border-amber-700/30">
                        {imagePath && (
                          <div class="w-12 h-12 mr-3 flex-shrink-0 overflow-hidden rounded-lg border border-amber-700/50">
                            <img
                              src={imagePath}
                              alt={reward.image?.alt || reward.name}
                              class="w-full h-full object-contain"
                              loading="lazy"
                            />
                          </div>
                        )}
                        <div>
                          <h4 class="text-amber-300 font-bold">{reward.name}</h4>
                          <span class="text-xs text-amber-200/70">{typeInfo.text}</span>
                        </div>
                      </div>
                      
                      {/* Stats de l'équipement */}
                      <div class="space-y-1 text-sm">
                        {reward.stats.map(stat => (
                          <p class="text-amber-100">{stat}</p>
                        ))}
                      </div>
                      
                      {/* Description */}
                      {reward.description && (
                        <div class="mt-3 pt-2 border-t border-amber-700/30">
                          <p class="text-gray-300 text-xs italic">{reward.description}</p>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              );
            })
          ) : (
            <p class="text-gray-400 col-span-full">Aucune récompense notable répertoriée pour ce donjon.</p>
          )}
        </div>
      </div>

    </div>
  </article>

<style>
  /* Styles pour les popups d'équipement */
  .equipment-wrapper {
    position: relative;
  }
  
  .equipment-toggle {
    cursor: pointer;
  }
  
  .equipment-details {
    position: absolute;
    z-index: 100;
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.5);
    transition: opacity 0.2s, transform 0.2s;
  }
  
  .equipment-details.hidden {
    opacity: 0;
    transform: translateY(10px);
    pointer-events: none;
  }
  
  .equipment-details.block {
    opacity: 1;
    transform: translateY(0);
    pointer-events: auto;
  }
</style>

<script>
  // Script pour gérer l'affichage des détails des équipements
  document.addEventListener('DOMContentLoaded', () => {
    const equipButtons = document.querySelectorAll('.equipment-toggle');
    
    equipButtons.forEach(button => {
      const targetId = button.getAttribute('data-target');
      const target = document.getElementById(targetId);
      
      if (!target) return;
      
      // Montrer/cacher les détails au clic
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        const isVisible = target.classList.contains('block');
        
        // Fermer tous les popups
        document.querySelectorAll('.equipment-details').forEach(popup => {
          popup.classList.remove('block');
          popup.classList.add('hidden');
        });
        
        // Ouvrir celui-ci s'il était fermé
        if (!isVisible) {
          target.classList.remove('hidden');
          target.classList.add('block');
        }
      });
    });
    
    // Fermer les popups quand on clique ailleurs
    document.addEventListener('click', () => {
      document.querySelectorAll('.equipment-details').forEach(popup => {
        popup.classList.remove('block');
        popup.classList.add('hidden');
      });
    });
  });
</script>
