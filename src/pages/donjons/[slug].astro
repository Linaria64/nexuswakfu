---
import { CollectionEntry, getCollection } from 'astro:content';
import MainLayout from '@layouts/MainLayout.astro';
import { Image } from 'astro:assets';
import { getDifficultyInfo, getPlayersText } from '@utils/dungeonUtils';

// Define the type for the dungeon entry props
interface Props {
  donjon: CollectionEntry<'donjons'>;
}

// Get the dungeon entry based on the slug
export async function getStaticPaths() {
  const donjons = await getCollection('donjons');
  return donjons.map(donjon => ({
    params: { slug: donjon.slug },
    props: { donjon },
  }));
}

const { donjon } = Astro.props;
const { data } = donjon;

const difficultyInfo = getDifficultyInfo(data.difficulty);
const playersText = getPlayersText(data.players);

// Handle potential missing icon
const iconSrc = data.icon?.src || '/placeholder-icon.png'; // Provide a fallback path if needed
const iconAlt = `Icône du donjon ${data.name}`;
---

<MainLayout title={data.name} description={data.description}>
  <article class="py-12 px-4">
    <div class="container mx-auto max-w-4xl animate-fade-up">

      <!-- === NEW HEADER SECTION START === -->
      <div class="flex flex-col items-center text-center mb-12">
        <!-- Back Button -->
        <a href="/donjons"
           class="inline-flex items-center mb-6 px-4 py-2 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg shadow-md hover:opacity-90 transition-opacity text-sm font-medium group">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 mr-2 transform transition-transform duration-200 ease-in-out group-hover:-translate-x-1">
            <path fill-rule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clip-rule="evenodd" />
          </svg>
          Retour à la liste des donjons
        </a>

        <!-- Dungeon Icon -->
        {data.icon && (
          <Image
            src={iconSrc}
            alt={iconAlt}
            width={100}
            height={100}
            class="rounded-full mb-4 shadow-lg border-2 border-primary/50"
            format="webp"
          />
        )}

        <!-- Title -->
        <h1 class="text-3xl md:text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-primary to-secondary mb-2">
          {data.name}
        </h1>

        <!-- Subtitle / Description -->
        {data.description && (
          <p class="text-lg text-muted-foreground mb-4 max-w-2xl">
            {data.description}
          </p>
        )}
      </div>
      <!-- === NEW HEADER SECTION END === -->


      <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-10">
        <!-- General Info Card -->
        <div class="card bg-base-200/50 shadow-xl p-6 rounded-lg border border-white/10">
          <h2 class="text-2xl font-bold mb-4 text-secondary">Informations Générales</h2>
          <div class="space-y-3 text-base">
            <div class="flex items-center">
              <strong class="text-primary mr-1">Niveau :</strong> {data.level}
            </div>
             <div class="flex items-center">
               <span class={`px-2 py-0.5 rounded-full text-xs font-medium ${difficultyInfo.bgColor} ${difficultyInfo.textColor}`}>
                 {difficultyInfo.label}
               </span>
             </div>
             <div class="flex items-center">
               <strong class="text-primary mr-1">Joueurs :</strong> {playersText}
             </div>
              <div class="flex items-center">
                <strong class="text-primary mr-1">Région :</strong> {data.region}
              </div>
           </div>
         </div>

         <!-- Steles Card -->
         {data.steles && data.steles.length > 0 && (
           <div class="card bg-base-200/50 shadow-xl p-6 rounded-lg border border-white/10">
             <h2 class="text-2xl font-bold mb-4 text-secondary">Stèles</h2>
             <ul class="space-y-3">
               {data.steles.map(stele => (
                 <li class="border-l-4 border-secondary pl-3">
                   <h3 class="font-semibold text-primary">{stele.name}</h3>
                   <p class="text-sm text-muted-foreground">{stele.description}</p>
                 </li>
               ))}
             </ul>
           </div>
         )}
       </div>

      <!-- Bosses Section -->
      {data.bosses && data.bosses.length > 0 && (
        <div class="mb-10">
          <h2 class="text-2xl font-bold mb-6 text-secondary border-b-2 border-secondary/30 pb-2">Boss</h2>
          <div class="space-y-6">
            {data.bosses.map(boss => (
              <div class="card bg-base-200/50 shadow-lg p-6 rounded-lg border border-white/10 flex flex-col md:flex-row gap-6 items-start">
                {boss.bossImage && (
                  <div class="flex-shrink-0 w-full md:w-40 h-40 relative rounded-md overflow-hidden shadow-md border border-white/10">
                    <Image
                      src={boss.bossImage.src}
                      alt={`Image de ${boss.name}`}
                      class="object-cover w-full h-full"
                      width={160} height={160}
                      format="webp"
                    />
                  </div>
                )}
                <div class="flex-grow">
                  <h3 class="text-xl font-semibold text-primary mb-3">{boss.name}</h3>
                   {boss.description && <p class="text-sm text-muted-foreground mb-4">{boss.description}</p>}
                    <div class="text-sm space-y-3 mb-3">
                      {boss.hp && (
                        <div class="flex items-center">
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 mr-1.5 text-red-500 flex-shrink-0">
                            <path d="M9.653 16.915l-.005-.003-.019-.01a20.759 20.759 0 01-1.162-.682 22.045 22.045 0 01-2.582-1.9C4.045 12.733 2 10.352 2 7.5a4.5 4.5 0 018-2.828A4.5 4.5 0 0118 7.5c0 2.852-2.044 5.233-3.885 6.82a22.049 22.049 0 01-3.744 2.582l-.019.01-.005.003h-.002a.739.739 0 01-.69.001l-.002-.001z" />
                          </svg>
                          <strong class="text-primary mr-1">PV :</strong> {boss.hp.toLocaleString()}
                        </div>
                      )}
                      {boss.masteries && (
                        <div class="flex items-center">
                         <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 mr-1.5 text-yellow-500 flex-shrink-0">
                           <path d="M11.983 1.907a.75.75 0 00-1.966 0l-3.25 6.5a.75.75 0 00.667 1.093h2.599a.75.75 0 01.334 1.406l-4.25 6.75a.75.75 0 001.248.787l3.25-6.5a.75.75 0 00-.667-1.093H7.925a.75.75 0 01-.334-1.406l4.25-6.75z" />
                          </svg>
                          <strong class="text-primary mr-1">Maîtrises :</strong>
                          {Object.entries(boss.masteries).filter(([key, value]) => value != null).map(([key, value]) => <span class="ml-2">{key.charAt(0).toUpperCase() + key.slice(1)}: {value}%</span>)}
                        </div>
                      )}
                      {boss.resistances && (
                        <div class="flex items-center">
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 mr-1.5 text-blue-500 flex-shrink-0">
                           <path fill-rule="evenodd" d="M8.014 4.365a.75.75 0 011.016-.269l7.25 5.5a.75.75 0 01.018 1.133l-7.25 5.5a.75.75 0 01-1.034-.864l1.259-4.357a.75.75 0 00-.495-.816L1.87 7.543a.75.75 0 01-.234-1.185l6.378-1.993zM10 8.158l4.533 3.434-.863 2.99 4.88-3.725a.75.75 0 00-.018-1.133l-7.25-5.5a.75.75 0 00-1.016.269L4.234 9.15l3.806 1.19a.75.75 0 01.495.816L7.296 14.5l2.704-2.05v-4.292z" clip-rule="evenodd" />
                          </svg>
                          <strong class="text-primary mr-1">Résistances :</strong>
                          {Object.entries(boss.resistances).filter(([key, value]) => value != null).map(([key, value]) => <span class="ml-2">{key.charAt(0).toUpperCase() + key.slice(1)}: {value}%</span>)}
                        </div>
                      )}
                   </div>
                 </div>
               </div>
             ))}
           </div>
         </div>
       )}

      <!-- Strategy Section -->
      {data.strategy && (
        <div class="mb-10">
          <h2 class="text-2xl font-bold mb-4 text-secondary border-b-2 border-secondary/30 pb-2">Stratégie</h2>
          <div class="prose prose-invert max-w-none prose-p:text-muted-foreground prose-headings:text-primary prose-strong:text-primary">
            {/* Render the strategy Markdown content here */}
            <p>{data.strategy}</p> {/* Basic rendering, enhance with Markdown component if needed */}
          </div>
        </div>
      )}

      <!-- Rewards Section -->
      {data.rewards && data.rewards.length > 0 && (
        <div>
          <h2 class="text-2xl font-bold mb-4 text-secondary border-b-2 border-secondary/30 pb-2">Récompenses Potentielles</h2>
          <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
            {data.rewards.map(reward => (
              <div class="flex flex-col items-center text-center p-3 bg-base-200/30 rounded-lg border border-white/10 hover:bg-base-200/50 transition-colors">
                {/* Placeholder for reward icon */}
                <div class="w-10 h-10 bg-base-300 rounded-md mb-2 flex items-center justify-center text-muted-foreground text-xs">
                  Icon
                </div>
                <span class="text-sm font-medium">{reward.name}</span>
                <span class="text-xs text-muted-foreground capitalize">{reward.type}</span>
              </div>
            ))}
          </div>
        </div>
      )}

    </div>
  </article>
</MainLayout>
