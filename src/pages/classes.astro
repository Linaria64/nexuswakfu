---
import Layout from "../layouts/layout.astro";
import { getCollection } from "astro:content";
import ClassModal from "../layouts/classmodal.astro";
import type { CollectionEntry } from "astro:content";
import { Button } from "@/components/ui/button";

// Récupérer toutes les classes
const classes = await getCollection("classes");

// Types
interface Ability {
  type: string;
  name: string;
  image: {
    src: string;
    alt?: string;
  };
}

interface Spell {
  name: string;
  description: string;
  image: {
    src: string;
    alt: string;
  };
}

interface ClassData {
  id: string;
  name: string;
  role: string;
  icon: {
    src: string;
    alt?: string;
  };
  image: {
    src: string;
    alt?: string;
  };
  description?: string;
  specialty?: string;
  abilities?: Array<{
    type: string;
    name: string;
    image: {
      src: string;
      alt?: string;
    };
  }>;
  uniquePassive?: {
    name: string;
    description: string;
    image?: {
      src: string;
      alt?: string;
    };
  };
  passiveSpells?: Array<{
    name: string;
    description: string;
    image: {
      src: string;
      alt: string;
    };
  }>;
  levelProgression?: Record<string, any>;
}

// Fonction pour s'assurer que l'image a les propriétés requises
function ensureImage(image: any, defaultAlt: string) {
  if (!image) return undefined;
  return {
    src: image.src || "",
    alt: image.alt || defaultAlt,
  };
}

// Fonction pour traiter les données de classe
function processClassData(classItem: CollectionEntry<"classes">) {
  const abilities =
    classItem.data.abilities?.map((ability: any) => ({
      type: ability.type || "",
      name: ability.name || "",
      image: {
        src: ability.image?.src || "",
        alt: ability.image?.alt || ability.name || "",
      },
    })) || [];

  const passiveSpells =
    classItem.data.passiveSpells?.map((spell: any) => ({
      name: spell.name || "",
      description: spell.description || "",
      image: {
        src: spell.image?.src || "",
        alt: spell.image?.alt || spell.name || "",
      },
    })) || [];

  return {
    data: {
      id: classItem.data.id || "",
      name: classItem.data.name || "",
      role: classItem.data.role || "",
      icon: classItem.data.icon || { src: "", alt: "" },
      image: classItem.data.image || { src: "", alt: "" },
      description: classItem.data.description || "",
      specialty: classItem.data.specialty || "",
      abilities,
      uniquePassive: classItem.data.uniquePassive
        ? {
            name: classItem.data.uniquePassive.name || "",
            description: classItem.data.uniquePassive.description || "",
            image: classItem.data.uniquePassive.image
              ? {
                  src: classItem.data.uniquePassive.image.src || "",
                  alt:
                    classItem.data.uniquePassive.image.alt ||
                    classItem.data.uniquePassive.name ||
                    "",
                }
              : undefined,
          }
        : undefined,
      passiveSpells,
      levelProgression: classItem.data.levelProgression || {},
    },
  };
}

// Questions du questionnaire
const questions = [
  {
    id: "morality",
    text: "Face à un dilemme moral dans le Krosmoz, quelle serait votre réaction ?",
    options: [
      {
        value: "justice",
        text: "Défendre la justice, quelles qu'en soient les conséquences",
      },
      {
        value: "harmony",
        text: "Chercher l'équilibre et l'harmonie entre les parties",
      },
      {
        value: "personal",
        text: "Protéger mes proches et mes intérêts avant tout",
      },
      {
        value: "pragmatic",
        text: "Choisir la solution la plus pratique, sans idéalisme",
      },
    ],
  },
  {
    id: "conflict",
    text: "Comment réagissez-vous face à l'adversité et au danger ?",
    options: [
      {
        value: "charge",
        text: "Je fonce au cœur du danger pour protéger les autres",
      },
      {
        value: "strategy",
        text: "J'analyse la situation et élabore une stratégie",
      },
      {
        value: "avoid",
        text: "J'évite le conflit quand c'est possible et attaque par surprise",
      },
      {
        value: "team",
        text: "Je coordonne les efforts du groupe pour surmonter l'obstacle",
      },
    ],
  },
  {
    id: "power",
    text: "Si vous pouviez maîtriser une seule forme de pouvoir dans le Krosmoz, ce serait...",
    options: [
      {
        value: "elements",
        text: "La magie élémentaire pour façonner le monde",
      },
      { value: "time", text: "La manipulation du temps et de l'espace" },
      { value: "life", text: "Le contrôle de la vie et de la nature" },
      { value: "mind", text: "L'influence sur les esprits et les émotions" },
    ],
  },
  {
    id: "confirmation1",
    text: "Êtes-vous sûr de votre première réponse ? Cela définira votre approche morale.",
    options: [
      { value: "yes", text: "Oui, je maintiens mon choix" },
      { value: "no", text: "Non, je préfère reconsidérer" },
    ],
  },
  {
    id: "sacrifice",
    text: "Seriez-vous prêt à sacrifier...",
    options: [
      {
        value: "nothing",
        text: "Rien ni personne, il y a toujours une autre solution",
      },
      { value: "self", text: "Vous-même pour sauver ceux qui vous sont chers" },
      { value: "few", text: "Quelques-uns pour le bien du plus grand nombre" },
      {
        value: "principles",
        text: "Vos principes si la situation l'exige vraiment",
      },
    ],
  },
  {
    id: "motivation",
    text: "Qu'est-ce qui vous pousse réellement à vous aventurer dans le monde de Wakfu ?",
    options: [
      { value: "glory", text: "La gloire et la reconnaissance des autres" },
      { value: "knowledge", text: "La quête de savoir et de compréhension" },
      { value: "wealth", text: "La richesse et les trésors à découvrir" },
      { value: "purpose", text: "Trouver un sens et un but à mon existence" },
    ],
  },
  {
    id: "confirmation2",
    text: "Après réflexion sur vos choix, pensez-vous qu'ils reflètent vraiment qui vous êtes ?",
    options: [
      { value: "yes", text: "Oui, ces réponses me définissent parfaitement" },
      {
        value: "partially",
        text: "Partiellement, je suis plus complexe que cela",
      },
      { value: "no", text: "Non, mais je joue un rôle qui m'intéresse" },
    ],
  },
];
---

<Layout title="Classes">
  <main class="min-h-screen p-6">
    <div class="glass-container">
      <div class="text-center mb-16">
        <h1 class="text-4xl md:text-5xl font-bold mb-6 tracking-tight">
          <span class="text-cyan-400">Classes</span>
          <span class="text-white"> de Wakfu</span>
        </h1>
        <div class="max-w-2xl mx-auto p-6">
          <p class="text-lg text-white/90 leading-relaxed mb-8">
            Découvrez les 18 classes uniques de Wakfu, leurs spécialités et
            leurs rôles dans le combat.
          </p>
          <button
            id="start-questionnaire"
            class="px-6 py-3 bg-cyan-600 hover:bg-cyan-700 text-white rounded-lg transition-colors shadow-lg"
          >
            Trouver ma classe idéale
          </button>
        </div>
      </div>

      <!-- Questionnaire -->
      <div
        id="questionnaire-section"
        class="max-w-3xl mx-auto p-6 mb-16 hidden"
      >
        <div class="text-center mb-10">
          <h2 class="text-3xl font-bold text-cyan-400 mb-4">Questionnaire</h2>
          <p class="text-white/80">
            Répondez aux questions pour découvrir les classes qui vous
            correspondent le mieux
          </p>
        </div>

        <div id="questions-container">
          {
            questions.map((question, index) => (
              <div
                class="question-item mb-12 hidden"
                data-question-id={question.id}
                data-question-index={index}
              >
                <h3 class="text-2xl text-white mb-6">{question.text}</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {question.options.map((option) => (
                    <button
                      class="question-option p-4 bg-[#302b63]/50 hover:bg-[#302b63]/70 text-white rounded-lg transition-all border border-transparent hover:border-cyan-400"
                      data-value={option.value}
                    >
                      {option.text}
                    </button>
                  ))}
                </div>
                <div class="mt-8 flex justify-between">
                  <button
                    class="prev-question px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors"
                    style={index === 0 ? "visibility: hidden" : ""}
                  >
                    Précédent
                  </button>
                  <div class="text-white">
                    {index + 1} / {questions.length}
                  </div>
                  <button
                    class="next-question px-4 py-2 bg-cyan-600 hover:bg-cyan-700 text-white rounded-lg transition-colors"
                    disabled
                  >
                    Suivant
                  </button>
                </div>
              </div>
            ))
          }

          <!-- Résultats du questionnaire -->
          <div id="results-section" class="hidden">
            <h3 class="text-2xl text-cyan-400 mb-6">
              Classes recommandées pour vous
            </h3>
            <div
              id="recommended-classes"
              class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-10"
            >
            </div>
            <div class="text-center mt-8">
              <button
                id="show-all-classes"
                class="px-6 py-3 bg-cyan-600 hover:bg-cyan-700 text-white rounded-lg transition-colors shadow-lg"
              >
                Voir toutes les classes
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Affichage des classes -->
      <div id="all-classes-grid" class="max-w-7xl mx-auto mb-16">
        <!-- Grille d'icônes des classes -->
        <div class="flex flex-wrap gap-4 justify-center">
          {
        classes.map((classItem) => (
          <div
        class="class-icon flex items-center gap-3 p-4 rounded-lg cursor-pointer hover:bg-[#302b63]/70 transition-colors border-2 border-transparent"
        data-class-id={classItem.data.id}
        data-class-role={classItem.data.role}
        onClick={`window.openModal('${classItem.data.name}')`}
          >
        <img
          src={classItem.data.icon?.src || classItem.data.image?.src}
          alt={classItem.data.name}
          class="w-16 h-16 rounded-full"
          title={classItem.data.name}
        />
        <div class="text-lg text-white">{classItem.data.name}</div>
          </div>
        ))
          }
        </div>
      </div>


        <!-- Zone d'affichage des détails de la classe sélectionnée -->
        <div
          id="class-details-container"
          class="bg-gradient-to-b from-[#0f0c29]/50 via-[#302b63]/50 to-[#24243e]/50 rounded-lg p-6 mt-4 hidden"
        >
          <div id="class-details-content" class="animate-fadeIn"></div>
        </div>

        <!-- Classes cards pour le contenu (caché mais utilisé pour les données) -->
        <div class="hidden">
          {
            classes.map((classItem) => (
              <div
                class="class-card bg-gradient-to-b from-[#0f0c29]/50 via-[#302b63]/50 to-[#24243e]/50 shadow-md p-3 rounded-lg backdrop-blur-md"
                data-class-role={classItem.data.role}
                data-class-id={classItem.data.id}
              >
                <div class="p-6">
                  <h2 class="text-2xl font-bold mb-4 text-cyan-400">
                    {classItem.data.name}
                  </h2>
                  <p class="text-white/80 mb-4">{classItem.data.description}</p>
                  <div class="flex gap-2">
                    {classItem.data.abilities?.map((ability) => (
                      <div class="relative group" title={ability.name}>
                        <img
                          src={ability.image?.src}
                          alt={ability.image?.alt || ability.name}
                          class="w-8 h-8 rounded-full bg-white/10 p-1"
                        />
                      </div>
                    ))}
                  </div>
                </div>
                <div class="p-4 flex justify-center items-center w-full">
                  <button
                    class="p-4 bg-blue-700/70 hover:bg-blue-700/90 rounded-md text-white transition-colors"
                    onclick={`window.openModal('${classItem.data.name}')`}
                  >
                    En savoir plus
                  </button>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </main>

  <!-- Modals -->
  {
    classes.map((classItem) => (
      <ClassModal
        isOpen={false}
        onClose={`window.closeModal('${classItem.data.name}')`}
        classData={processClassData(classItem)}
      />
    ))
  }
</Layout>

<script is:inline>
  // Définir les fonctions sur window avant tout
  window.openModal = function (name) {
    const modal = document.querySelector(`[data-modal="${name}"]`);
    if (modal) {
      modal.classList.remove("hidden");
      modal.classList.add("flex");
      document.body.style.overflow = "hidden";
    }
  };

  window.closeModal = function (name) {
    const modal = document.querySelector(`[data-modal="${name}"]`);
    if (modal) {
      modal.classList.remove("flex");
      modal.classList.add("hidden");
      document.body.style.overflow = "";
    }
  };

  // Fonction pour afficher les détails de classe sous les icônes
  window.selectClass = function (classId) {
    // Montrer le conteneur de détails
    const detailsContainer = document.getElementById("class-details-container");
    detailsContainer.classList.remove("hidden");

    // Trouver la carte de classe correspondante
    const classCard = document.querySelector(
      `.class-card[data-class-id="${classId}"]`
    );
    if (!classCard) return;

    // Remplir le conteneur de détails avec le contenu de la carte
    const detailsContent = document.getElementById("class-details-content");
    detailsContent.innerHTML = classCard.innerHTML;

    // Mettre en évidence l'icône de classe sélectionnée
    document.querySelectorAll(".class-icon").forEach((icon) => {
      if (icon.dataset.classId === classId) {
        icon.classList.add("border-cyan-400", "bg-[#302b63]/70");
      } else {
        icon.classList.remove("border-cyan-400", "bg-[#302b63]/70");
        icon.classList.add("border-transparent");
      }
    });
  };

  // Gestion du questionnaire
  document.addEventListener("DOMContentLoaded", () => {
    const startBtn = document.getElementById("start-questionnaire");
    const questionnaireSection = document.getElementById(
      "questionnaire-section"
    );
    const allClassesGrid = document.getElementById("all-classes-grid");
    const resultsSection = document.getElementById("results-section");
    const recommendedClasses = document.getElementById("recommended-classes");
    const showAllClassesBtn = document.getElementById("show-all-classes");
    const questionItems = document.querySelectorAll(".question-item");

    let currentQuestionIndex = 0;
    const userAnswers = {};

    // Démarrer le questionnaire
    startBtn.addEventListener("click", () => {
      questionnaireSection.classList.remove("hidden");
      allClassesGrid.classList.add("hidden");
      showQuestion(0);
    });

    // Afficher une question spécifique
    function showQuestion(index) {
      questionItems.forEach((item, i) => {
        if (i === index) {
          item.classList.remove("hidden");
        } else {
          item.classList.add("hidden");
        }
      });
      currentQuestionIndex = index;
    }

    // Gérer la sélection des options
    document.querySelectorAll(".question-option").forEach((option) => {
      option.addEventListener("click", () => {
        const questionId = option.closest(".question-item").dataset.questionId;
        const value = option.dataset.value;

        // Marquer l'option sélectionnée
        option
          .closest(".question-item")
          .querySelectorAll(".question-option")
          .forEach((opt) => {
            opt.classList.remove("border-cyan-400", "bg-[#302b63]/70");
            opt.classList.add("border-transparent");
          });
        option.classList.add("border-cyan-400", "bg-[#302b63]/70");
        option.classList.remove("border-transparent");

        // Enregistrer la réponse
        userAnswers[questionId] = value;

        // Activer le bouton suivant
        const nextBtn = option
          .closest(".question-item")
          .querySelector(".next-question");
        nextBtn.disabled = false;
      });
    });

    // Navigation entre les questions
    document.querySelectorAll(".next-question").forEach((button) => {
      button.addEventListener("click", () => {
        if (currentQuestionIndex < questionItems.length - 1) {
          showQuestion(currentQuestionIndex + 1);
        } else {
          showResults();
        }
      });
    });

    document.querySelectorAll(".prev-question").forEach((button) => {
      button.addEventListener("click", () => {
        if (currentQuestionIndex > 0) {
          showQuestion(currentQuestionIndex - 1);
        }
      });
    });

    // Afficher les résultats
    function showResults() {
      // Cacher les questions
      questionItems.forEach((item) => item.classList.add("hidden"));

      // Logique de recommandation basée sur les réponses
      const recommendedClassProps = getRecommendedClasses(userAnswers);

      // Récupérer toutes les cartes de classes disponibles
      const classCards = document.querySelectorAll(".class-card");
      let recommendedCards = [];

      // Filtrer les classes selon les propriétés recommandées
      classCards.forEach((card) => {
        const classId = card.getAttribute("data-class-id");

        // Vérifier si la classe fait partie des IDs recommandés (limité à 6 max)
        if (recommendedClassProps.ids.includes(classId)) {
          recommendedCards.push(card);
        }
      });

      // S'assurer que nous avons au plus 6 cartes
      if (recommendedCards.length > 6) {
        recommendedCards = recommendedCards.slice(0, 6);
      }

      // Si nous avons moins de 3 cartes, ajouter des classes aléatoires
      if (recommendedCards.length < 3) {
        console.log(
          "Pas assez de recommandations, ajout de classes aléatoires"
        );
        const remainingCards = Array.from(classCards).filter(
          (card) => !recommendedCards.includes(card)
        );
        // Mélanger les cartes restantes
        const shuffled = remainingCards.sort(() => 0.5 - Math.random());
        // Ajouter des cartes jusqu'à avoir au moins 3 et au plus 6
        while (recommendedCards.length < 3 && shuffled.length > 0) {
          recommendedCards.push(shuffled.pop());
        }
      }

      // Convertir les cartes en HTML
      const recommendedCardsHTML = recommendedCards.map(
        (card) => card.outerHTML
      );

      // Afficher les classes recommandées
      recommendedClasses.innerHTML = recommendedCardsHTML.join("");
      resultsSection.classList.remove("hidden");

      // Debug: afficher le nombre de classes recommandées
      console.log(`${recommendedCards.length} classes recommandées affichées`);
    }

    // Afficher toutes les classes
    showAllClassesBtn.addEventListener("click", () => {
      questionnaireSection.classList.add("hidden");
      allClassesGrid.classList.remove("hidden");
    });

    // Fonction améliorée de recommandation
    function getRecommendedClasses(answers) {
      // Structure pour stocker les rôles et IDs recommandés
      const recommendation = {
        roles: [],
        ids: [],
      };

      // Log des réponses pour débogage
      console.log("Réponses du questionnaire:", answers);

      // Recommandations basées sur la moralité
      if (answers.morality === "justice") {
        recommendation.ids.push("iop", "feca", "cra");
      } else if (answers.morality === "harmony") {
        recommendation.ids.push("eniripsa", "sadida", "pandawa");
      } else if (answers.morality === "personal") {
        recommendation.ids.push("ecaflip", "enutrof", "sacrieur");
      } else if (answers.morality === "pragmatic") {
        recommendation.ids.push("sram", "xelor", "roublard");
      }

      // Recommandations basées sur l'approche du conflit
      if (answers.conflict === "charge") {
        recommendation.ids.push("iop", "sacrieur", "steamamer");
        recommendation.roles.push("tank");
      } else if (answers.conflict === "strategy") {
        recommendation.ids.push("xelor", "eliotrope", "osamodas");
        recommendation.roles.push("support", "dps");
      } else if (answers.conflict === "avoid") {
        recommendation.ids.push("sram", "roublard", "ouginak");
        recommendation.roles.push("dps");
      } else if (answers.conflict === "team") {
        recommendation.ids.push("eniripsa", "sadida", "feca");
        recommendation.roles.push("support", "healer");
      }

      // Recommandations basées sur le pouvoir préféré
      if (answers.power === "elements") {
        recommendation.ids.push("cra", "feca", "enutrof");
      } else if (answers.power === "time") {
        recommendation.ids.push("xelor", "eliotrope", "huppermage");
      } else if (answers.power === "life") {
        recommendation.ids.push("sadida", "eniripsa", "osamodas");
      } else if (answers.power === "mind") {
        recommendation.ids.push("zobal", "sacrieur", "pandawa");
      }

      // Recommandations basées sur le sacrifice
      if (answers.sacrifice === "nothing") {
        recommendation.ids.push("enutrof", "ecaflip", "osamodas");
      } else if (answers.sacrifice === "self") {
        recommendation.ids.push("iop", "sacrieur", "feca");
      } else if (answers.sacrifice === "few") {
        recommendation.ids.push("sadida", "xelor", "eliotrope");
      } else if (answers.sacrifice === "principles") {
        recommendation.ids.push("sram", "roublard", "zobal");
      }

      // Recommandations basées sur la motivation
      if (answers.motivation === "glory") {
        recommendation.ids.push("iop", "ecaflip", "steamamer");
      } else if (answers.motivation === "knowledge") {
        recommendation.ids.push("xelor", "eliotrope", "huppermage");
      } else if (answers.motivation === "wealth") {
        recommendation.ids.push("enutrof", "roublard", "ecaflip");
      } else if (answers.motivation === "purpose") {
        recommendation.ids.push("sadida", "feca", "pandawa");
      }

      // Compter la fréquence de chaque classe recommandée
      const classFrequency = {};
      recommendation.ids.forEach((id) => {
        if (!classFrequency[id]) classFrequency[id] = 0;
        classFrequency[id]++;
      });

      // Trier les classes par fréquence (les plus recommandées en premier)
      const sortedRecommendations = Object.keys(classFrequency).sort(
        (a, b) => classFrequency[b] - classFrequency[a]
      );

      // Prendre au maximum 6 classes les plus recommandées
      recommendation.ids = sortedRecommendations.slice(0, 6);

      // Si nous avons moins de 3 recommandations, ajouter des options par défaut
      if (recommendation.ids.length < 3) {
        const defaults = [
          "iop",
          "cra",
          "eniripsa",
          "sadida",
          "sram",
          "ecaflip",
        ];

        // Ajouter des classes par défaut qui ne sont pas déjà recommandées
        for (const defaultClass of defaults) {
          if (
            !recommendation.ids.includes(defaultClass) &&
            recommendation.ids.length < 6
          ) {
            recommendation.ids.push(defaultClass);
          }
        }
      }

      // Log des recommandations finales
      console.log("Classes recommandées (max 6):", recommendation.ids);

      return {
        roles: recommendation.roles.slice(0, 3), // Limiter les rôles également
        ids: recommendation.ids,
      };
    }
  });
</script>

<script>
  document.addEventListener("astro:page-load", () => {
    // Close modal with Escape key
    document.addEventListener("keydown", (e: KeyboardEvent) => {
      if (e.key === "Escape") {
        const openModal = document.querySelector(".modal-container.flex");
        if (openModal) {
          const name = openModal.getAttribute("data-modal");
          if (name) window.closeModal(name);
        }
      }
    });
  });
</script>
