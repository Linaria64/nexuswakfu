---
import { Image } from 'astro:assets';
import Layout from '../layouts/layout.astro';

interface Artifact {
    name: string;
    imageUrl: string;
    location: string;
    questLevel: number;
    description: string;
    methodWakfuUrl: string;
}

// Artefacts de Wakfu avec leurs liens Method Wakfu
const artifacts: Artifact[] = [
    {
        name: "Boussole de Traverse ( liée à la déese féca)",
        imageUrl: "/images/artifacts/boussole.png",
        location: "Astrub",
        questLevel: 10,
        description: "Pour récupérer la Boussole, vous devez être niveau 10 et compléter la quête principale de la Cité d'Astrub.",
        methodWakfuUrl: "https://methodwakfu.com/quetes/principales/astrub/"
    },
    {
        name: "Ocarina Draconique (Lié au Dieu Osamodas)",
        imageUrl: "/images/artifacts/ocarina.png",
        location: "Quête Principale des Nations",
        questLevel: 44,
        description: "Pour récupérer l'Ocarina, vous devez être niveau 44 et avoir complété la Quête Principale des Nations.",
        methodWakfuUrl: "https://methodwakfu.com/quetes/principales/plage-zinit/"
    },
    {
        name: "Sceptre Excarné (Lié au Dieu Sram)",
        imageUrl: "/images/artifacts/sceptre.png",
        location: "Domaine Sauvage",
        questLevel: 50,
        description: "Pour récupérer le Sceptre, vous devez être niveau 50 et vous rendre au Domaine Sauvage et compléter la quête principale.",
        methodWakfuUrl: "https://methodwakfu.com/quetes/principales/domaine-sauvage/"
    },
    {
        name: "Papattes Ecaflip (Lié au Dieu Ecaflip)",
        imageUrl: "/images/artifacts/pacotilles.png",
        location: "Kelba",
        questLevel: 65,
        description: "Pour récupérer les Papattes d’Ecaflip, vous devez être niveau 65 et vous rendre à Kelba et compléter la quête principale.",
        methodWakfuUrl: "https://methodwakfu.com/quetes/principales/kelba/"
    },
    {
        name: "Baguette Rikiki (Lié à la Déesse Eniripsa)",
        imageUrl: "/images/artifacts/baguette.png",
        location: "l’Île aux Moines",
        questLevel: 80,
        description: "Pour récupérer la Baguette Rikiki, vous devez vous dirigez vers l’Île aux Moines. Là bas, vous aurez besoin d’un groupe de 4 personnages minimum afin de faire le donjon « Le Sliptorium » et d’ouvrir le coffre secret ! Faites le donjon normalement jusqu’à la salle du Boss. Petit conseil : Évitez les sorts qui vous coûtent des points de Wakfu où vous subirez de lourds dégâts !",
        methodWakfuUrl: "https://nexuswakfu.vercel.app/donjons"
    },
    {
        name: "Amulette Luminescente (Lié au Dieu Sadida)",
        imageUrl: "/images/artifacts/amulette.png",
        location: "Bilbiza",
        questLevel: 85,
        description: "	Pour récupérer l’Amulette Luminescente, vous devez être niveau 85 et vous rendre à Bilbyza et compléter la quête principale. Note : Si vous l’avez déjà complétée, il vous suffit de refaire l’étape du Show Gelax (à votre droite dans la Gelaxième Dimension).",
        methodWakfuUrl: "https://methodwakfu.com/quetes/principales/bilbyza/"
    },
    {
        name: "Spieds Rebonttis (Lié au Dieu Iop)",
        imageUrl: "/images/artifacts/sablier.png",
        location: "Saharach",
        questLevel: 115,
        description: "	Pour récupérer les Spieds Rebonttis, vous devez être niveau 115 et vous rendre à Saharach et compléter la quête principale.",
        methodWakfuUrl: "https://methodwakfu.com/quetes/principales/saharach/"
    },
    {
        name: "Awc d’appwoche Wayal (Lié à la Déesse Crâ)",
        imageUrl: "/images/artifacts/arc.png",
        location: "Île des Wabbits",
        questLevel: 120,
        description: "Pour récupérer l’Awc d’appwoche Wayal, vous devez être niveau 120 et vous rendre sur l’Île des Wabbits et compléter la quête principale.",
        methodWakfuUrl: "https://methodwakfu.com/quetes/principales/ile-des-wabbits/"
    },
    {
        name: "S.I.D. (Lié au Dieu Enutrof)",
        imageUrl: "/images/artifacts/sie.png",
        location: "Enutrosor",
        questLevel: 145,
        description: "Pour récupérer le S.I.D., vous devez être niveau 145 et vous rendre à Enutrosor et compléter la quête principale.",
        methodWakfuUrl: "https://methodwakfu.com/quetes/principales/enutrosor/"
    },
    {
        name: "Sablier de Xélor (Lié au Dieu Xélor)",
        imageUrl: "/images/artifacts/sablier-xelor.png",
        location: "Xelorium Passé",
        questLevel: 155,
        description: "Pour récupérer le Sablier, vous devez être niveau 155 et vous rendre au Xélorium Passé et compléter la quête principale.",
        methodWakfuUrl: "https://methodwakfu.com/guides-quetes/xelorium-passe/"
    }
];
---

<Layout title="Quêtes">
<div class="min-h-screen py-20 " >
    <!-- Header avec effet glassmorphism -->
        <div class="relative mb-12">
            <div class="absolute inset-0 bg-gradient-to-r from-purple-500/10 via-blue-500/10 to-teal-500/10 rounded-xl backdrop-blur-md -z-10"></div>
            <div class="border border-white/10 rounded-xl p-8 shadow-lg bg-white/5">
                <h1 class="text-5xl font-bold text-center bg-clip-text text-transparent bg-gradient-to-r from-amber-300 via-amber-400 to-yellow-200">
                    Artefacts Légendaires
                </h1>
                <p class="text-center text-gray-300 mt-4 max-w-2xl mx-auto">
                    Découvrez les artefacts légendaires du monde de Wakfu, objets mystiques liés aux divinités et essentiels à votre progression.
                </p>
            </div>
        </div>
        
        <!-- Artefacts Carousel - Version glassmorphism modernisée -->
        <section class="mb-16">
            <!-- Carousel container -->            
            <div class="carousel-container relative overflow-hidden rounded-xl artifact-carousel">
                <!-- Background glassmorphism effect -->
                <div class="absolute inset-0 bg-gradient-to-r from-blue-600/20 via-purple-600/20 to-indigo-600/20 backdrop-blur-md z-0 border border-white/10 shadow-xl"></div>
                
                <!-- Carousel track -->
                <div class="carousel-track flex transition-transform duration-500 ease-out">
                    {artifacts.map((artifact, index) => (
                        <div class="carousel-slide w-full flex-shrink-0 p-4">
                            <a href={artifact.methodWakfuUrl} target="_blank" rel="noopener noreferrer" class="block h-full">
                                <div class="h-full relative overflow-hidden rounded-xl transition-all duration-300 group backdrop-blur-sm bg-white/5 border border-white/10 hover:border-white/30 hover:bg-white/10 hover:shadow-[0_0_15px_rgba(86,153,255,0.15)] hover:-translate-y-1">
                                    <!-- Card content -->
                                    <div class="p-6">
                                        <h3 class="text-xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-300 to-purple-300 mb-2 flex items-center gap-2 group-hover:from-blue-200 group-hover:to-indigo-300 transition-all duration-300">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-400 group-hover:text-indigo-300 transition-colors" viewBox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                                            </svg>
                                            {artifact.name}
                                        </h3>
                                        
                                        <!-- Niveau requis -->
                                        <div class="backdrop-blur-sm bg-gradient-to-r from-blue-600/20 to-purple-600/20 text-blue-300 text-xs font-semibold px-3 py-1.5 rounded-full inline-flex items-center mb-3 border border-white/10 shadow-sm">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-indigo-400" viewBox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v3.586L7.707 9.293a1 1 0 00-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 10.586V7z" clip-rule="evenodd" />
                                            </svg>
                                            Niveau {artifact.questLevel}
                                        </div>
                                        
                                        <div class="mt-3 mb-4 relative">
                                            <div class="absolute -left-2 top-0 w-1 h-full bg-gradient-to-b from-blue-400/30 to-purple-500/30 rounded-full"></div>
                                            <p class="text-sm text-blue-200 font-medium mb-1 ml-2">Emplacement:</p>
                                            <p class="text-sm text-gray-300 ml-2 group-hover:text-gray-200 transition-colors">{artifact.location}</p>
                                        </div>
                                        
                                        <!-- Description avec effet glassmorphism -->
                                        <div class="p-3 bg-gradient-to-r from-blue-900/10 to-indigo-900/10 backdrop-blur-sm rounded-lg border border-white/5 mt-1">
                                            <p class="text-sm text-gray-300 leading-relaxed group-hover:text-gray-200 transition-colors">{artifact.description}</p>
                                        </div>
                                    </div>

                                    <div class="mt-4 text-center pt-2 border-t border-white/10 p-3">
                                        <span class="inline-flex items-center justify-center text-sm px-4 py-2 bg-gradient-to-r from-blue-600/30 to-indigo-600/30 hover:from-blue-600/40 hover:to-indigo-600/40 rounded-full text-blue-200 hover:text-blue-100 backdrop-blur-sm border border-white/10 shadow-sm transition-all duration-300 group-hover:shadow-[0_0_10px_rgba(59,130,246,0.3)]">
                                            Voir guide Method Wakfu
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 group-hover:translate-x-1 transition-transform duration-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                                            </svg>
                                        </span>
                                    </div>
                                </div>
                            </a>
                        </div>
                    ))}
                </div>
                
                <!-- Carousel controls avec style glassmorphism -->
                <button class="carousel-button prev absolute top-1/2 left-4 transform -translate-y-1/2 backdrop-blur-md bg-gradient-to-r from-blue-600/30 to-indigo-600/30 hover:from-blue-500/40 hover:to-indigo-500/40 text-white z-10 rounded-full p-3 border border-white/10 shadow-lg transition-all duration-300 hover:scale-110 hover:shadow-[0_0_15px_rgba(59,130,246,0.5)]">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                </button>
                
                <button class="carousel-button next absolute top-1/2 right-4 transform -translate-y-1/2 backdrop-blur-md bg-gradient-to-r from-blue-600/30 to-indigo-600/30 hover:from-blue-500/40 hover:to-indigo-500/40 text-white z-10 rounded-full p-3 border border-white/10 shadow-lg transition-all duration-300 hover:scale-110 hover:shadow-[0_0_15px_rgba(59,130,246,0.5)]">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                </button>
                
                <!-- Carousel indicators avec effet glassmorphism -->
                <div class="carousel-indicators flex justify-center mt-4 space-x-2 absolute bottom-6 left-0 right-0 px-4 py-2">
                    <div class="backdrop-blur-md bg-black/10 rounded-full px-3 py-1.5 inline-flex items-center space-x-3 border border-white/10 shadow-lg">
                        {artifacts.map((_, index) => (
                            <button class="carousel-indicator w-2.5 h-2.5 rounded-full bg-white/30 hover:bg-white/60 transition-all duration-200 hover:scale-125" data-index={index}></button>
                        ))}
                    </div>
                </div>
            </div>
        </section>
    </main>
</div>
</Layout>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize all carousels on the page
    const carousels = document.querySelectorAll('.carousel-container');
    
    carousels.forEach(carousel => {
        const track = carousel.querySelector('.carousel-track');
        const slides = carousel.querySelectorAll('.carousel-slide');
        const prevButton = carousel.querySelector('.carousel-button.prev');
        const nextButton = carousel.querySelector('.carousel-button.next');
        const indicators = carousel.querySelectorAll('.carousel-indicator');
        
        let currentSlide = 0;
        const slideCount = slides.length;
        
        // Set initial active indicator
        if (indicators.length > 0) {
            indicators[0].classList.add('bg-amber-500', 'w-6');
        }
        
        // Function to update the track transform
        function updateTrack() {
            if (track) {
                (track as HTMLElement).style.transform = `translateX(-${currentSlide * 100}%)`;
                
                // Update indicators
                indicators.forEach((indicator, index) => {
                    if (index === currentSlide) {
                        indicator.classList.add('bg-blue-400', 'scale-125');
                        indicator.classList.remove('bg-white/30');
                    } else {
                        indicator.classList.remove('bg-blue-400', 'scale-125');
                        indicator.classList.add('bg-white/30');
                    }
                });
            }
        }
        
        // Next button click
        nextButton?.addEventListener('click', () => {
            currentSlide = (currentSlide + 1) % slideCount;
            updateTrack();
        });
        
        // Previous button click
        prevButton?.addEventListener('click', () => {
            currentSlide = (currentSlide - 1 + slideCount) % slideCount;
            updateTrack();
        });
        
        // Indicator clicks
        indicators.forEach((indicator, index) => {
            indicator.addEventListener('click', () => {
                currentSlide = index;
                updateTrack();
            });
        });
        
        // Touch support for swiping
        let touchStartX = 0;
        let touchEndX = 0;
        
        if (carousel instanceof HTMLElement) {
            carousel.addEventListener('touchstart', (e: TouchEvent) => {
                touchStartX = e.changedTouches[0].screenX;
            }, { passive: true });
            
            carousel.addEventListener('touchend', (e: TouchEvent) => {
                touchEndX = e.changedTouches[0].screenX;
                handleSwipe();
            }, { passive: true });
            
            function handleSwipe() {
                if (touchEndX < touchStartX - 50) {
                    // Swipe left, go to next slide
                    currentSlide = (currentSlide + 1) % slideCount;
                    updateTrack();
                } else if (touchEndX > touchStartX + 50) {
                    // Swipe right, go to previous slide
                    currentSlide = (currentSlide - 1 + slideCount) % slideCount;
                    updateTrack();
                }
            }
        }
        
        // Auto-advance the carousel
        let autoplayInterval = setInterval(() => {
            currentSlide = (currentSlide + 1) % slideCount;
            updateTrack();
        }, 5000);
        
        // Pause autoplay on hover
        carousel.addEventListener('mouseenter', () => {
            clearInterval(autoplayInterval);
        });
        
        // Resume autoplay when mouse leaves
        carousel.addEventListener('mouseleave', () => {
            autoplayInterval = setInterval(() => {
                currentSlide = (currentSlide + 1) % slideCount;
                updateTrack();
            }, 5000);
        });
    });
});
</script>
