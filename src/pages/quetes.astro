---
import MainLayout from '../layouts/MainLayout.astro';
import { Image } from 'astro:assets';

interface Quest {
    title: string;
    methodWakfuUrl: string;
    type: 'main' | 'side';
    level?: number;
    imageUrl?: string;
    description?: string;
}

interface Artifact {
    name: string;
    imageUrl: string;
    location: string;
    questLevel: number;
    description: string;
    relatedQuest?: string;
}

const mainQuests: Quest[] = [
    {
        title: "Introduction Astrub",
        methodWakfuUrl: "https://methodwakfu.com/quetes/principales/astrub/",
        type: "main",
        level: 6,
        description: "Première quête principale du jeu",
    },
    {
        title: "Nation Chapitre 1 La Plage du Zinith lvl 20",
        methodWakfuUrl: "https://methodwakfu.com/quetes/principales/plage-zinit/",
        type: "main",
        level: 20,
        description: "Prêt pour affronter la suite de votre grande quête héroïque ? Vous allez enfin visiter les Nations et surtout.. Le Mont Zinit ! L’endroit où se trouve Ogrest le Terrible.",
    },
    {
        title: "Nation Chapitre 2 Amakna lvl 20",
        methodWakfuUrl: "https://methodwakfu.com/quetes/principales/amakna/",
        type: "main",
        level: 20,
        description: "Après avoir exploré les côtes de l’île du Mont Zinit en long, en large et en travers, vous finissiez par tourner en rond. Un artefact divin, voilà ce qu’il vous manquait pour atteindre les portes de l’antre d’Ogrest ! Aussitôt dit, aussitôt fait : vous partiez à sa recherche ! Mais, euh… de quoi, d’ailleurs ? Bah oui, c’est bien beau de chercher, mais encore faut-il savoir après quoi !",
    },
    {
        title: "Nation Chapitre 3 Bonta lvl 25",
        methodWakfuUrl: "https://methodwakfu.com/quetes/principales/bonta/",
        type: "main",
        level: 25,
        description: "Après avoir exploré les voies de l’archaologie, vous devrez réunir les 3 clefs de la porte du temple englouti de Sufokia. Votre aventure commence, ou plutôt continue dans la région de Kara, à Bonta, où vous tenterez d’accéder à l’Université Bontarienne Immatérielle.",
    },
    {
        title: "Nation Chapitre 4 Brâkmar lvl 35",
        methodWakfuUrl: "https://methodwakfu.com/quetes/principales/brakmar/",
        type: "main",
        level: 35,
        description: "Certains d’entre vous l’auront compris : au programme, une visite en profondeur dans les entrailles de Brâkmar. Rien ne vous sera épargné – mensonges, magouilles, coups bas, corruption, ruelles sombres à flanc de cratère… Il va falloir vous fondre dans la masse et parfois jouer des coudes pour arriver à obtenir ce que vous voulez.",
    },
    {
        title: "Nation Chapitre 5 Sufokia lvl 45",
        methodWakfuUrl: "https://methodwakfu.com/quetes/principales/sufokia/",
        type: "main",
        level: 45,
        description: "Habitants et habitantes du Monde des Douze, aventuriers courageux et aventurières audacieuses, héros aguerris et héroïnes valeureuses, l’heure est venue de conclure votre périple au travers des quatre nations, avec l’ouverture du temple englouti d’Oktapodas au large de Sufokia, grâce aux trois orichalques maintenant en votre possession.",
    },
];

const sideQuests: Quest[] = [
    {
        title: "Le Pêcheur Perdu",
        methodWakfuUrl: "https://methodwakfu.com/quetes/ile-dotomai/le-pecheur-perdu/",
        type: "side",
        level: 3,
        description: "Aidez un pêcheur à retrouver son chemin",
    },
    {
        title: "Collection de Plantes",
        methodWakfuUrl: "https://methodwakfu.com/quetes/ile-dotomai/collection-de-plantes/",
        type: "side",
        level: 7,
        description: "Collectez des plantes rares pour un alchimiste",
    },
    {
        title: "Le Trésor Caché",
        methodWakfuUrl: "https://methodwakfu.com/quetes/amakna/le-tresor-cache/",
        type: "side",
        level: 12,
        description: "Partez à la recherche d'un trésor légendaire",
    },
    {
        title: "La Demande du Forgeron",
        methodWakfuUrl: "https://methodwakfu.com/quetes/amakna/la-demande-du-forgeron/",
        type: "side",
        level: 18,
        description: "Aidez le forgeron à trouver des matériaux rares",
    },
    {
        title: "Le Festival des Lumières",
        methodWakfuUrl: "https://methodwakfu.com/quetes/amakna/le-festival-des-lumieres/",
        type: "side",
        level: 22,
        description: "Participez au festival annuel des lumières",
    },
];

// Artefacts de Wakfu (basé sur l'image fournie)
const artifacts: Artifact[] = [
    {
        name: "Boussole de Tristepin",
        imageUrl: "/images/artifacts/boussole.png",
        location: "Chef Chafer",
        questLevel: 13,
        description: "Pour récupérer la Boussole vous devez être niveau 13 et compléter la quête principale du Chef Chafer."
    },
    {
        name: "Ocarina",
        imageUrl: "/images/artifacts/ocarina.png",
        location: "Quête Principale des Nations",
        questLevel: 43,
        description: "Pour récupérer l'Ocarina, vous devez être niveau 43 et compléter la Quête Principale des Nations."
    },
    {
        name: "Sceptre Oscuro",
        imageUrl: "/images/artifacts/sceptre.png",
        location: "Domaine Sauvage",
        questLevel: 50,
        description: "Pour récupérer le Sceptre vous devez être niveau 50 et vous rendre au Domaine Sauvage et compléter la quête principale."
    },
    {
        name: "Pacotilles d'Olfio",
        imageUrl: "/images/artifacts/pacotilles.png",
        location: "Koko",
        questLevel: 55,
        description: "Pour récupérer les Pacotilles d'Olfio, vous devez être niveau 55 et vous rendre à Koko et compléter la quête principale."
    },
    {
        name: "Baguette Rikiki",
        imageUrl: "/images/artifacts/baguette.png",
        location: "La Dimension",
        questLevel: 60,
        description: "Pour récupérer la Baguette Rikiki, vous devez vous diriger vers l'Île des Wabbits. Le boss vous aura besoin d'un groupe de 5+ personnages (minimum 4pc de faire le donjon normalement) et pour le coffre secret il faudra le trouver dans l'affaire du Srambad."
    },
    {
        name: "Amulette Luminescente",
        imageUrl: "/images/artifacts/amulette.png",
        location: "Bilbiza",
        questLevel: 33,
        description: "Pour récupérer l'Amulette Luminescente, vous devez être niveau 33 et vous rendre à Bilbiza et compléter la quête principale. Note : Si vous l'avez déjà complétée, il vous suffit de refaire l'étape de 'Show Gola' à votre draine dans la Dimension."
    },
    {
        name: "Sablier Abiotique",
        imageUrl: "/images/artifacts/sablier.png",
        location: "Saharach",
        questLevel: 15,
        description: "Pour récupérer les Sablier Abiotique, vous devez être niveau ~15 et vous rendre à Saharach et compléter la quête principale."
    },
    {
        name: "Arc d'Archechmè",
        imageUrl: "/images/artifacts/arc.png",
        location: "Île des Wabbits",
        questLevel: 70,
        description: "Pour récupérer l'Arc d'Archechmè Pour récupérer l'Arc d'archechmè Wabbl, vous devez être niveau 70 et vous rendre à l'Île des Wabbits et compléter la quête principale."
    },
    {
        name: "S.I.E",
        imageUrl: "/images/artifacts/sie.png",
        location: "Enutrosor",
        questLevel: 140,
        description: "Pour récupérer le S.I.E., vous devez être niveau 140 et vous rendre à Enutrosor et compléter la quête principale."
    },
    {
        name: "Sablier de Xelor",
        imageUrl: "/images/artifacts/sablier-xelor.png",
        location: "Adamaï",
        questLevel: 155,
        description: "Pour récupérer le Sablier, vous devez être niveau 155 et vous rendre au Katuram Passé et compléter la quête principale."
    }
];

// Combine all quests for potential future use
const allQuests = [...mainQuests, ...sideQuests];
---

<MainLayout title="Quêtes - Nexus Wakfu">
    <main class="container mx-auto px-4 py-8">
        <h1 class="text-4xl font-bold text-center mb-8">Chronologie des Quêtes</h1>
        
        <!-- Main Quests Carousel -->
        <section class="mb-16">
            <h2 class="text-3xl font-semibold mb-6 text-primary-600 border-b-2 border-primary-500 pb-2">
                Quêtes Principales
            </h2>
            
            <!-- Carousel container -->
            <div class="carousel-container relative overflow-hidden rounded-xl">
                <!-- Background gradient for glassmorphism effect -->
                <div class="absolute inset-0 bg-gradient-to-r from-primary-500/10 to-primary-700/10 backdrop-blur-sm z-0"></div>
                
                <!-- Carousel track -->
                <div class="carousel-track flex transition-transform duration-500 ease-out">
                    {mainQuests.map((quest, index) => (
                        <div class="carousel-slide w-full flex-shrink-0 p-4">
                            <a href={quest.methodWakfuUrl} 
                               target="_blank" 
                               rel="noopener noreferrer" 
                               class="block h-full">
                                <div class="glass-card h-full relative overflow-hidden rounded-xl shadow-xl">
                                    
                                    <div class="flex flex-col h-full items-center justify-center">
                                        <div class="mb-4 text-center w-full">
                                            <h3 class="text-lg md:text-xl font-bold text-white mb-3 overflow-hidden text-ellipsis">
                                                {quest.title}
                                            </h3>
                                            {quest.level && (
                                                <span class="inline-block px-4 py-1 text-sm bg-white/30 text-white rounded-full">
                                                    Niveau {quest.level}
                                                </span>
                                            )}
                                        </div>
                                        
                                        {quest.description && (
                                            <p class="text-white/90 text-center mb-6 max-w-xs mx-auto text-sm md:text-base line-clamp-3 overflow-hidden">
                                                {quest.description}
                                            </p>
                                        )}
                                        
                                        <div class="mt-auto w-full text-center pt-4 border-t border-white/20">
                                            <div class="text-sm text-white/70 mb-2">
                                                Source: Method Wakfu
                                            </div>
                                            <span class="text-white font-medium inline-flex items-center justify-center">
                                                Voir détails
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                                                </svg>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </a>
                        </div>
                    ))}
                </div>
                
                <!-- Carousel controls -->
                <button class="carousel-button prev absolute left-2 top-1/2 transform -translate-y-1/2 z-10 bg-white/80 dark:bg-gray-800/80 rounded-full p-2 shadow-md hover:bg-white dark:hover:bg-gray-800 transition-all duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-800 dark:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                </button>
                <button class="carousel-button next absolute right-2 top-1/2 transform -translate-y-1/2 z-10 bg-white/80 dark:bg-gray-800/80 rounded-full p-2 shadow-md hover:bg-white dark:hover:bg-gray-800 transition-all duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-800 dark:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                </button>
                
                <!-- Carousel indicators -->
                <div class="carousel-indicators flex justify-center mt-4 space-x-2 absolute bottom-4 left-0 right-0">
                    {mainQuests.map((_, index) => (
                        <button class="carousel-indicator w-3 h-3 rounded-full bg-gray-300 dark:bg-gray-600 transition-all duration-200" data-index={index}></button>
                    ))}
                </div>
            </div>
        </section>

        <!-- Artefacts Carousel -->
        <section class="mb-16">
            <h2 class="text-3xl font-semibold mb-6 text-amber-500 border-b-2 border-amber-500 pb-2">
                Artefacts Légendaires
            </h2>
            
            <!-- Carousel container -->
            <div class="carousel-container relative overflow-hidden rounded-xl artifact-carousel">
                <!-- Background gradient for glassmorphism effect -->
                <div class="absolute inset-0 bg-gradient-to-r from-amber-500/10 to-amber-700/10 backdrop-blur-sm z-0"></div>
                
                <!-- Carousel track -->
                <div class="carousel-track flex transition-transform duration-500 ease-out">
                    {artifacts.map((artifact, index) => (
                        <div class="carousel-slide w-full flex-shrink-0 p-4">
                            <div class="glass-card h-full relative overflow-hidden rounded-xl shadow-xl border border-amber-500/30 hover:border-amber-500/70 transition-all hover:shadow-lg hover:shadow-amber-500/20 hover:-translate-y-1">
                                <!-- Card content -->
                                <div class="p-6">
                                    <h3 class="text-xl font-bold text-amber-400 mb-2 flex items-center gap-2">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-amber-500" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                                        </svg>
                                        {artifact.name}
                                    </h3>
                                    
                                    <!-- Niveau requis -->
                                    <div class="bg-amber-900/30 text-amber-300 text-xs font-semibold px-2.5 py-1 rounded-full inline-flex items-center mb-3">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v3.586L7.707 9.293a1 1 0 00-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 10.586V7z" clip-rule="evenodd" />
                                        </svg>
                                        Niveau {artifact.questLevel}
                                    </div>
                                    
                                    <div class="mt-2">
                                        <p class="text-sm text-amber-100 mb-1">Location:</p>
                                        <p class="text-sm text-gray-300 mb-4">{artifact.location}</p>
                                    </div>
                                    
                                    <p class="text-sm text-gray-300">{artifact.description}</p>
                                </div>
                            </div>
                        </div>
                    ))}
                </div>
                
                <!-- Carousel controls -->
                <button class="carousel-button prev absolute top-1/2 left-2 transform -translate-y-1/2 bg-black/50 hover:bg-amber-600/90 text-white z-10">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                </button>
                
                <button class="carousel-button next absolute top-1/2 right-2 transform -translate-y-1/2 bg-black/50 hover:bg-amber-600/90 text-white z-10">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                </button>
                
                <!-- Carousel indicators -->
                <div class="carousel-indicators flex justify-center mt-4 space-x-2 absolute bottom-4 left-0 right-0">
                    {artifacts.map((_, index) => (
                        <button class="carousel-indicator w-3 h-3 rounded-full bg-gray-300 dark:bg-gray-600 transition-all duration-200" data-index={index}></button>
                    ))}
                </div>
            </div>
        </section>
        
        <!-- Side Quests Carousel -->
        <section>
            <h2 class="text-3xl font-semibold mb-6 text-secondary-600 border-b-2 border-secondary-500 pb-2">
                Quêtes Secondaires
            </h2>
            
            <!-- Carousel container -->
            <div class="carousel-container relative overflow-hidden rounded-xl">
                <!-- Background gradient for glassmorphism effect -->
                <div class="absolute inset-0 bg-gradient-to-r from-secondary-500/10 to-secondary-700/10 backdrop-blur-sm z-0"></div>
                
                <!-- Carousel track -->
                <div class="carousel-track flex transition-transform duration-500 ease-out">
                    {sideQuests.map((quest, index) => (
                        <div class="carousel-slide w-full flex-shrink-0 p-4">
                            <a href={quest.methodWakfuUrl} 
                               target="_blank" 
                               rel="noopener noreferrer" 
                               class="block h-full">
                                <div class="glass-card h-full relative overflow-hidden rounded-xl shadow-xl">
                                    
                                    <div class="flex flex-col h-full items-center justify-center">
                                        <div class="mb-4 text-center w-full">
                                            <h3 class="text-lg md:text-xl font-bold text-white mb-3 overflow-hidden text-ellipsis">
                                                {quest.title}
                                            </h3>
                                            {quest.level && (
                                                <span class="inline-block px-4 py-1 text-sm bg-white/30 text-white rounded-full">
                                                    Niveau {quest.level}
                                                </span>
                                            )}
                                        </div>
                                        
                                        {quest.description && (
                                            <p class="text-white/90 text-center mb-6 max-w-xs mx-auto text-sm md:text-base line-clamp-3 overflow-hidden">
                                                {quest.description}
                                            </p>
                                        )}
                                        
                                        <div class="mt-auto w-full text-center pt-4 border-t border-white/20">
                                            <div class="text-sm text-white/70 mb-2">
                                                Source: Method Wakfu
                                            </div>
                                            <span class="text-white font-medium inline-flex items-center justify-center">
                                                Voir détails
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                                                </svg>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </a>
                        </div>
                    ))}
                </div>
                
                <!-- Carousel controls -->
                <button class="carousel-button prev absolute left-2 top-1/2 transform -translate-y-1/2 z-10 bg-white/80 dark:bg-gray-800/80 rounded-full p-2 shadow-md hover:bg-white dark:hover:bg-gray-800 transition-all duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-800 dark:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                </button>
                <button class="carousel-button next absolute right-2 top-1/2 transform -translate-y-1/2 z-10 bg-white/80 dark:bg-gray-800/80 rounded-full p-2 shadow-md hover:bg-white dark:hover:bg-gray-800 transition-all duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-800 dark:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                </button>
                
                <!-- Carousel indicators -->
                <div class="carousel-indicators flex justify-center mt-4 space-x-2 absolute bottom-4 left-0 right-0">
                    {sideQuests.map((_, index) => (
                        <button class="carousel-indicator w-3 h-3 rounded-full bg-gray-300 dark:bg-gray-600 transition-all duration-200" data-index={index}></button>
                    ))}
                </div>
            </div>
        </section>
    </main>
</MainLayout>

<script>
    // Initialisation de tous les carrousels
    document.addEventListener('DOMContentLoaded', () => {
        // Sélectionner tous les carrousels
        const carousels = document.querySelectorAll('.carousel-container');
        
        carousels.forEach(carousel => {
            const track = carousel.querySelector('.carousel-track');
            const slides = Array.from(carousel.querySelectorAll('.carousel-slide'));
            const prevButton = carousel.querySelector('.prev');
            const nextButton = carousel.querySelector('.next');
            const indicators = Array.from(carousel.querySelectorAll('.carousel-indicator'));
            
            if (!track || slides.length === 0) return;
            
            let currentIndex = 0;
            const slideWidth = 100; // En pourcentage
            
            // Initialiser les indicateurs
            if (indicators.length > 0) {
                indicators[0].classList.add('active');
                indicators[0].style.backgroundColor = carousel.classList.contains('artifact-carousel') ? 
                                                  'rgba(245, 158, 11, 0.9)' : // Ambre pour le carousel d'artefacts
                                                  'rgba(59, 130, 246, 0.9)'; // Bleu pour les autres carousels
            }
            
            // Fonction pour aller à une diapositive spécifique
            const goToSlide = (index) => {
                // Gestion des limites
                if (index < 0) {
                    index = slides.length - 1;
                } else if (index >= slides.length) {
                    index = 0;
                }
                
                currentIndex = index;
                
                // Déplacer le track
                track.style.transform = `translateX(-${currentIndex * slideWidth}%)`;
                
                // Mettre à jour les indicateurs
                indicators.forEach((indicator, i) => {
                    indicator.classList.toggle('active', i === currentIndex);
                    indicator.style.backgroundColor = i === currentIndex ? 
                                                   (carousel.classList.contains('artifact-carousel') ? 
                                                    'rgba(245, 158, 11, 0.9)' : 'rgba(59, 130, 246, 0.9)') : 
                                                   '';
                    indicator.style.width = i === currentIndex ? '10px' : '8px';
                    indicator.style.height = i === currentIndex ? '10px' : '8px';
                });
            };
            
            // Ajouter les écouteurs d'événements pour les boutons
            if (prevButton) {
                prevButton.addEventListener('click', () => {
                    goToSlide(currentIndex - 1);
                });
            }
            
            if (nextButton) {
                nextButton.addEventListener('click', () => {
                    goToSlide(currentIndex + 1);
                });
            }
            
            // Ajouter les écouteurs d'événements pour les indicateurs
            indicators.forEach((indicator, index) => {
                indicator.addEventListener('click', () => {
                    goToSlide(index);
                });
            });
            
            // Ajouter la navigation par glisser-déposer (swipe)
            let startX, moveX, isDragging = false;
            const threshold = 100; // Distance minimale pour changer de diapositive
            
            const handleStart = (clientX) => {
                startX = clientX;
                isDragging = true;
                track.style.transition = 'none'; // Désactiver la transition pendant le glissement
            };
            
            track.addEventListener('mousedown', (e) => {
                handleStart(e.clientX);
            });
            
            track.addEventListener('touchstart', (e) => {
                handleStart(e.touches[0].clientX);
            });
            
            const handleMove = (clientX) => {
                if (!isDragging) return;
                moveX = clientX;
                const diff = moveX - startX;
                const currentOffset = -currentIndex * slideWidth;
                const newOffset = currentOffset + (diff / track.offsetWidth) * 100;
                track.style.transform = `translateX(${newOffset}%)`;
            };
            
            track.addEventListener('mousemove', (e) => {
                handleMove(e.clientX);
            });
            
            track.addEventListener('touchmove', (e) => {
                handleMove(e.touches[0].clientX);
            });
            
            const handleEnd = () => {
                if (!isDragging) return;
                isDragging = false;
                track.style.transition = 'transform 500ms ease-out';
                
                if (moveX && Math.abs(moveX - startX) > threshold) {
                    if (moveX > startX) {
                        goToSlide(currentIndex - 1); // Glissement vers la droite
                    } else {
                        goToSlide(currentIndex + 1); // Glissement vers la gauche
                    }
                } else {
                    goToSlide(currentIndex); // Revenir à la position actuelle
                }
                
                startX = null;
                moveX = null;
            };
            
            track.addEventListener('mouseup', handleEnd);
            track.addEventListener('touchend', handleEnd);
            track.addEventListener('mouseleave', handleEnd);
            
            // Défilement automatique
            const autoplayInterval = 7000; // 7 secondes entre chaque diapositive
            let autoplayTimer;
            
            const startAutoplay = () => {
                autoplayTimer = setInterval(() => {
                    goToSlide(currentIndex + 1);
                }, autoplayInterval);
            };
            
            const stopAutoplay = () => {
                clearInterval(autoplayTimer);
            };
            
            // Démarrer le défilement automatique
            startAutoplay();
            
            // Arrêter le défilement automatique lors de l'interaction
            carousel.addEventListener('mouseenter', stopAutoplay);
            carousel.addEventListener('mouseleave', startAutoplay);
            carousel.addEventListener('touchstart', stopAutoplay);
            carousel.addEventListener('touchend', () => {
                setTimeout(startAutoplay, 3000); // Redémarrer après 3 secondes d'inactivité
            });
        });
    });
</script>

<style>
    /* Styles pour le carrousel glassmorphism */
    .carousel-container {
        margin-bottom: 3rem;
        height: auto;
        min-height: 450px;
        max-height: 500px;
        position: relative;
        background-color: rgba(255, 255, 255, 0.02);
        overflow: hidden;
    }
    
    .carousel-track {
        height: 100%;
        transition: transform 500ms ease-out;
    }
    
    .carousel-slide {
        height: 100%;
    }
    
    /* Effet glassmorphism avec joli dégradé */
    .glass-card {
        backdrop-filter: blur(8px);
        -webkit-backdrop-filter: blur(8px);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        border-radius: 16px;
        text-align: center;
        padding: 1.5rem;
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    
    /* Cartes pour quêtes principales - dégradé bleu avec opacité 70% */
    section:nth-of-type(1) .glass-card {
        background: linear-gradient(135deg, rgba(56, 189, 248, 0.7) 0%, rgba(37, 99, 235, 0.7) 100%);
        border: 1px solid rgba(96, 165, 250, 0.4);
    }
    
    /* Cartes pour artefacts - dégradé ambre/doré avec opacité 70% */
    section:nth-of-type(2) .glass-card {
        background: linear-gradient(135deg, rgba(245, 158, 11, 0.7) 0%, rgba(217, 119, 6, 0.7) 100%);
        border: 1px solid rgba(245, 158, 11, 0.4);
        box-shadow: 0 8px 32px rgba(245, 158, 11, 0.15);
    }
    
    /* Effet de survol pour les cartes d'artefacts */
    section:nth-of-type(2) .glass-card:hover {
        transform: translateY(-5px) scale(1.01);
        box-shadow: 0 10px 40px rgba(245, 158, 11, 0.25);
    }
    
    /* Badge de niveau pour les artefacts */
    section:nth-of-type(2) .glass-card .bg-amber-900/30 {
        transition: all 0.3s ease;
    }
    
    section:nth-of-type(2) .glass-card:hover .bg-amber-900/30 {
        background-color: rgba(180, 83, 9, 0.5);
    }
    
    /* Cartes pour quêtes secondaires - dégradé orange avec opacité 70% */
    section:nth-of-type(3) .glass-card {
        background: linear-gradient(135deg, rgba(251, 146, 60, 0.7) 0%, rgba(194, 65, 12, 0.7) 100%);
        border: 1px solid rgba(251, 146, 60, 0.4);
    }
    
    /* Styles pour le mode sombre */
    .dark section:nth-of-type(1) .glass-card {
        background: linear-gradient(135deg, rgba(56, 189, 248, 0.7) 0%, rgba(37, 99, 235, 0.7) 100%);
        border: 1px solid rgba(96, 165, 250, 0.2);
    }
    
    .dark section:nth-of-type(2) .glass-card {
        background: linear-gradient(135deg, rgba(245, 158, 11, 0.6) 0%, rgba(180, 83, 9, 0.6) 100%);
        border: 1px solid rgba(245, 158, 11, 0.3);
        box-shadow: 0 8px 32px rgba(245, 158, 11, 0.1);
    }
    
    .dark section:nth-of-type(3) .glass-card {
        background: linear-gradient(135deg, rgba(251, 146, 60, 0.7) 0%, rgba(194, 65, 12, 0.7) 100%);
        border: 1px solid rgba(251, 146, 60, 0.2);
    }
    
    /* Style pour le texte centré */
    .glass-card h3 {
        text-align: center;
        margin-bottom: 1rem;
        font-size: 1.5rem;
    }
    
    .glass-card p {
        text-align: center;
        margin-bottom: 1.5rem;
    }
    
    /* Centrage des grands titres */
    section h2 {
        text-align: center;
        margin-bottom: 2rem;
        font-size: 2rem;
        border-bottom: none !important;
        position: relative;
    }
    
    section h2::after {
        content: '';
        position: absolute;
        bottom: -0.5rem;
        left: 50%;
        transform: translateX(-50%);
        width: 100px;
        height: 3px;
        background: currentColor;
        border-radius: 3px;
    }
    
    /* Styles pour les boutons de navigation */
    .carousel-button {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
        opacity: 0.7;
    }
    
    .carousel-button:hover {
        opacity: 1;
        transform: scale(1.1);
    }
    
    /* Styles pour les indicateurs */
    .carousel-indicators {
        z-index: 20;
    }
    
    .carousel-indicator {
        border: none;
        transition: all 0.3s ease;
        margin: 0 2px;
    }
    
    .carousel-indicator:hover {
        transform: scale(1.5);
    }
    
    /* Transition simple entre les diapositives sans animation */
    .glass-card > * {
        opacity: 1;
    }
    
    /* Responsive */
    @media (max-width: 768px) {
        .carousel-container {
            height: 450px;
        }
    }
    
    @media (max-width: 640px) {
        .carousel-container {
            height: 500px;
        }
        
        .carousel-button {
            width: 36px;
            height: 36px;
        }
    }
    
    /* Fond stylisé pour la page */
    main {
        position: relative;
        overflow: hidden;
    }
    
    main::before {
        content: '';
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: radial-gradient(circle at 80% 10%, rgba(66, 153, 225, 0.08) 0%, transparent 60%),
                    radial-gradient(circle at 20% 80%, rgba(245, 158, 11, 0.08) 0%, transparent 60%);
        z-index: -1;
        pointer-events: none;
    }
    
    .dark main::before {
        background: radial-gradient(circle at 80% 10%, rgba(59, 130, 246, 0.08) 0%, transparent 60%),
                    radial-gradient(circle at 20% 80%, rgba(234, 88, 12, 0.08) 0%, transparent 60%);
    }
</style>

<script>
    // Script pour ajouter des indicateurs de défilement si nécessaire
    document.addEventListener('DOMContentLoaded', () => {
        const timelineContainers = document.querySelectorAll('.timeline-scroll');
        
        timelineContainers.forEach(container => {
            // Vérifier si le défilement est nécessaire
            if (container.scrollWidth > container.clientWidth) {
                // Créer l'indicateur de défilement
                const indicator = document.createElement('div');
                indicator.className = 'scroll-indicator';
                indicator.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/></svg>';
                
                // Ajouter l'indicateur au parent relatif
                container.parentElement.appendChild(indicator);
                
                // Masquer l'indicateur après le défilement
                container.addEventListener('scroll', () => {
                    if (container.scrollLeft > 20) {
                        indicator.style.opacity = '0';
                        setTimeout(() => {
                            indicator.remove();
                        }, 300);
                    }
                });
            }
        });
    });
</script>

<script>
    // Script pour gérer les carrousels
    document.addEventListener('DOMContentLoaded', () => {
        // Initialiser tous les carrousels sur la page
        const carousels = document.querySelectorAll('.carousel-container');
        
        carousels.forEach(carousel => {
            const track = carousel.querySelector('.carousel-track');
            const slides = carousel.querySelectorAll('.carousel-slide');
            const prevButton = carousel.querySelector('.carousel-button.prev');
            const nextButton = carousel.querySelector('.carousel-button.next');
            const indicators = carousel.querySelectorAll('.carousel-indicator');
            
            let currentIndex = 0;
            const slideCount = slides.length;
            
            // Fonction pour mettre à jour l'état actif des indicateurs
            const updateIndicators = (index) => {
                indicators.forEach((indicator, i) => {
                    if (i === index) {
                        indicator.classList.add('bg-primary-500', 'dark:bg-primary-400', 'w-6');
                        indicator.classList.remove('bg-gray-300', 'dark:bg-gray-600', 'w-3');
                    } else {
                        indicator.classList.remove('bg-primary-500', 'dark:bg-primary-400', 'w-6');
                        indicator.classList.add('bg-gray-300', 'dark:bg-gray-600', 'w-3');
                    }
                });
            };
            
            // Fonction pour aller à une diapositive spécifique
            const goToSlide = (index) => {
                if (index < 0) index = slideCount - 1;
                if (index >= slideCount) index = 0;
                
                currentIndex = index;
                const offset = -currentIndex * 100;
                
                // Animation fluide avec effet d'accélération/décélération
                track.style.transform = `translateX(${offset}%)`;
                updateIndicators(currentIndex);
            };
            
            // Initialiser les indicateurs
            updateIndicators(currentIndex);
            
            // Ajouter les écouteurs d'événements pour les boutons
            prevButton.addEventListener('click', () => {
                goToSlide(currentIndex - 1);
            });
            
            nextButton.addEventListener('click', () => {
                goToSlide(currentIndex + 1);
            });
            
            // Ajouter les écouteurs d'événements pour les indicateurs
            indicators.forEach((indicator, index) => {
                indicator.addEventListener('click', () => {
                    goToSlide(index);
                });
            });
            
            // Ajouter la navigation par glisser-déposer (swipe)
            let startX, moveX, isDragging = false;
            const threshold = 100; // Distance minimale pour changer de diapositive
            
            track.addEventListener('mousedown', (e) => {
                startX = e.clientX;
                isDragging = true;
                track.style.transition = 'none'; // Désactiver la transition pendant le glissement
            });
            
            track.addEventListener('touchstart', (e) => {
                startX = e.touches[0].clientX;
                isDragging = true;
                track.style.transition = 'none';
            });
            
            const handleMove = (clientX) => {
                if (!isDragging) return;
                moveX = clientX;
                const diff = moveX - startX;
                const currentOffset = -currentIndex * 100;
                const newOffset = currentOffset + (diff / track.offsetWidth) * 100;
                track.style.transform = `translateX(${newOffset}%)`;
            };
            
            track.addEventListener('mousemove', (e) => {
                handleMove(e.clientX);
            });
            
            track.addEventListener('touchmove', (e) => {
                handleMove(e.touches[0].clientX);
            });
            
            const handleEnd = () => {
                if (!isDragging) return;
                isDragging = false;
                track.style.transition = 'transform 500ms ease-out';
                
                if (moveX && Math.abs(moveX - startX) > threshold) {
                    if (moveX > startX) {
                        goToSlide(currentIndex - 1); // Glissement vers la droite
                    } else {
                        goToSlide(currentIndex + 1); // Glissement vers la gauche
                    }
                } else {
                    goToSlide(currentIndex); // Revenir à la position actuelle
                }
                
                startX = null;
                moveX = null;
            };
            
            track.addEventListener('mouseup', handleEnd);
            track.addEventListener('touchend', handleEnd);
            track.addEventListener('mouseleave', handleEnd);
            
            // Défilement automatique (optionnel)
            const autoplayInterval = 7000; // 7 secondes entre chaque diapositive
            let autoplayTimer;
            
            const startAutoplay = () => {
                autoplayTimer = setInterval(() => {
                    goToSlide(currentIndex + 1);
                }, autoplayInterval);
            };
            
            const stopAutoplay = () => {
                clearInterval(autoplayTimer);
            };
            
            // Démarrer le défilement automatique
            startAutoplay();
            
            // Arrêter le défilement automatique lors de l'interaction
            carousel.addEventListener('mouseenter', stopAutoplay);
            carousel.addEventListener('mouseleave', startAutoplay);
            carousel.addEventListener('touchstart', stopAutoplay);
            carousel.addEventListener('touchend', () => {
                setTimeout(startAutoplay, 3000); // Redémarrer après 3 secondes d'inactivité
            });
            
            // Pas d'effet de parallaxe sur les cartes
        });
    });
</script>
