---
import MainLayout from '../layouts/MainLayout.astro';
import { Image } from 'astro:assets';

interface Artifact {
    name: string;
    imageUrl: string;
    location: string;
    questLevel: number;
    description: string;
    methodWakfuUrl: string;
}

// Artefacts de Wakfu avec leurs liens Method Wakfu
const artifacts: Artifact[] = [
    {
        name: "Boussole de Tristepin",
        imageUrl: "/images/artifacts/boussole.png",
        location: "Chef Chafer",
        questLevel: 13,
        description: "Pour récupérer la Boussole vous devez être niveau 13 et compléter la quête principale du Chef Chafer.",
        methodWakfuUrl: "https://methodwakfu.com/instances/chef-chafer/"
    },
    {
        name: "Ocarina",
        imageUrl: "/images/artifacts/ocarina.png",
        location: "Quête Principale des Nations",
        questLevel: 43,
        description: "Pour récupérer l'Ocarina, vous devez être niveau 43 et compléter la Quête Principale des Nations.",
        methodWakfuUrl: "https://methodwakfu.com/quetes/principales/sufokia/"
    },
    {
        name: "Sceptre Oscuro",
        imageUrl: "/images/artifacts/sceptre.png",
        location: "Domaine Sauvage",
        questLevel: 50,
        description: "Pour récupérer le Sceptre vous devez être niveau 50 et vous rendre au Domaine Sauvage et compléter la quête principale.",
        methodWakfuUrl: "https://methodwakfu.com/instances/domaine-sauvage/"
    },
    {
        name: "Pacotilles d'Olfio",
        imageUrl: "/images/artifacts/pacotilles.png",
        location: "Koko",
        questLevel: 55,
        description: "Pour récupérer les Pacotilles d'Olfio, vous devez être niveau 55 et vous rendre à Koko et compléter la quête principale.",
        methodWakfuUrl: "https://methodwakfu.com/instances/mine-de-koko/"
    },
    {
        name: "Baguette Rikiki",
        imageUrl: "/images/artifacts/baguette.png",
        location: "La Dimension",
        questLevel: 60,
        description: "Pour récupérer la Baguette Rikiki, vous devez vous diriger vers l'Île des Wabbits. Le boss vous aura besoin d'un groupe de 5+ personnages (minimum 4pc de faire le donjon normalement) et pour le coffre secret il faudra le trouver dans l'affaire du Srambad.",
        methodWakfuUrl: "https://methodwakfu.com/instances/srambad/"
    },
    {
        name: "Amulette Luminescente",
        imageUrl: "/images/artifacts/amulette.png",
        location: "Bilbiza",
        questLevel: 33,
        description: "Pour récupérer l'Amulette Luminescente, vous devez être niveau 33 et vous rendre à Bilbiza et compléter la quête principale. Note : Si vous l'avez déjà complétée, il vous suffit de refaire l'étape de 'Show Gola' à votre draine dans la Dimension.",
        methodWakfuUrl: "https://methodwakfu.com/quetes/bilbiza/"
    },
    {
        name: "Sablier Abiotique",
        imageUrl: "/images/artifacts/sablier.png",
        location: "Saharach",
        questLevel: 15,
        description: "Pour récupérer les Sablier Abiotique, vous devez être niveau ~15 et vous rendre à Saharach et compléter la quête principale.",
        methodWakfuUrl: "https://methodwakfu.com/quetes/saharach/"
    },
    {
        name: "Arc d'Archechmè",
        imageUrl: "/images/artifacts/arc.png",
        location: "Île des Wabbits",
        questLevel: 70,
        description: "Pour récupérer l'Arc d'Archechmè Pour récupérer l'Arc d'archechmè Wabbl, vous devez être niveau 70 et vous rendre à l'Île des Wabbits et compléter la quête principale.",
        methodWakfuUrl: "https://methodwakfu.com/instances/ile-des-wabbits/"
    },
    {
        name: "S.I.E",
        imageUrl: "/images/artifacts/sie.png",
        location: "Enutrosor",
        questLevel: 140,
        description: "Pour récupérer le S.I.E., vous devez être niveau 140 et vous rendre à Enutrosor et compléter la quête principale.",
        methodWakfuUrl: "https://methodwakfu.com/quetes/enutrosor/"
    },
    {
        name: "Sablier de Xelor",
        imageUrl: "/images/artifacts/sablier-xelor.png",
        location: "Adamaï",
        questLevel: 155,
        description: "Pour récupérer le Sablier, vous devez être niveau 155 et vous rendre au Katuram Passé et compléter la quête principale.",
        methodWakfuUrl: "https://methodwakfu.com/quetes/niveau-130/quete-de-classe-xelor/"
    }
];
---

<MainLayout title="Artefacts Légendaires - Nexus Wakfu">
    <main class="container mx-auto px-4 py-8">
        <h1 class="text-4xl font-bold text-center mb-8">Artefacts Légendaires</h1>
        
        <!-- Artefacts Carousel -->
        <section class="mb-16">
            <!-- Carousel container -->
            <div class="carousel-container relative overflow-hidden rounded-xl artifact-carousel">
                <!-- Background gradient for glassmorphism effect -->
                <div class="absolute inset-0 bg-gradient-to-r from-amber-500/10 to-amber-700/10 backdrop-blur-sm z-0"></div>
                
                <!-- Carousel track -->
                <div class="carousel-track flex transition-transform duration-500 ease-out">
                    {artifacts.map((artifact, index) => (
                        <div class="carousel-slide w-full flex-shrink-0 p-4">
                            <a href={artifact.methodWakfuUrl} target="_blank" rel="noopener noreferrer" class="block h-full">
                                <div class="glass-card h-full relative overflow-hidden rounded-xl shadow-xl border border-amber-500/30 hover:border-amber-500/70 transition-all hover:shadow-lg hover:shadow-amber-500/20 hover:-translate-y-1">
                                    <!-- Card content -->
                                    <div class="p-6">
                                        <h3 class="text-xl font-bold text-amber-400 mb-2 flex items-center gap-2">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-amber-500" viewBox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                                            </svg>
                                            {artifact.name}
                                        </h3>
                                        
                                        <!-- Niveau requis -->
                                        <div class="bg-amber-900/30 text-amber-300 text-xs font-semibold px-2.5 py-1 rounded-full inline-flex items-center mb-3">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v3.586L7.707 9.293a1 1 0 00-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 10.586V7z" clip-rule="evenodd" />
                                            </svg>
                                            Niveau {artifact.questLevel}
                                        </div>
                                        
                                        <div class="mt-2">
                                            <p class="text-sm text-amber-100 mb-1">Location:</p>
                                            <p class="text-sm text-gray-300 mb-4">{artifact.location}</p>
                                        </div>
                                        
                                        <p class="text-sm text-gray-300">{artifact.description}</p>
                                    </div>

                                    <div class="mt-2 text-center pt-2 border-t border-amber-500/20 p-3">
                                        <span class="text-amber-300 font-medium inline-flex items-center justify-center text-sm">
                                            Voir guide Method Wakfu
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                                            </svg>
                                        </span>
                                    </div>
                                </div>
                            </a>
                        </div>
                    ))}
                </div>
                
                <!-- Carousel controls -->
                <button class="carousel-button prev absolute top-1/2 left-2 transform -translate-y-1/2 bg-black/50 hover:bg-amber-600/90 text-white z-10 rounded-full p-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                </button>
                
                <button class="carousel-button next absolute top-1/2 right-2 transform -translate-y-1/2 bg-black/50 hover:bg-amber-600/90 text-white z-10 rounded-full p-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                </button>
                
                <!-- Carousel indicators -->
                <div class="carousel-indicators flex justify-center mt-4 space-x-2 absolute bottom-4 left-0 right-0">
                    {artifacts.map((_, index) => (
                        <button class="carousel-indicator w-3 h-3 rounded-full bg-gray-300 dark:bg-gray-600 transition-all duration-200" data-index={index}></button>
                    ))}
                </div>
            </div>
        </section>
    </main>
</MainLayout>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize all carousels on the page
    const carousels = document.querySelectorAll('.carousel-container');
    
    carousels.forEach(carousel => {
        const track = carousel.querySelector('.carousel-track');
        const slides = carousel.querySelectorAll('.carousel-slide');
        const prevButton = carousel.querySelector('.carousel-button.prev');
        const nextButton = carousel.querySelector('.carousel-button.next');
        const indicators = carousel.querySelectorAll('.carousel-indicator');
        
        let currentSlide = 0;
        const slideCount = slides.length;
        
        // Set initial active indicator
        if (indicators.length > 0) {
            indicators[0].classList.add('bg-amber-500', 'w-6');
        }
        
        // Function to update the track transform
        function updateTrack() {
            track.style.transform = `translateX(-${currentSlide * 100}%)`;
            
            // Update indicators
            indicators.forEach((indicator, index) => {
                if (index === currentSlide) {
                    indicator.classList.add('bg-amber-500', 'w-6');
                } else {
                    indicator.classList.remove('bg-amber-500', 'w-6');
                    indicator.classList.add('bg-gray-300', 'dark:bg-gray-600');
                }
            });
        }
        
        // Next button click
        nextButton.addEventListener('click', () => {
            currentSlide = (currentSlide + 1) % slideCount;
            updateTrack();
        });
        
        // Previous button click
        prevButton.addEventListener('click', () => {
            currentSlide = (currentSlide - 1 + slideCount) % slideCount;
            updateTrack();
        });
        
        // Indicator clicks
        indicators.forEach((indicator, index) => {
            indicator.addEventListener('click', () => {
                currentSlide = index;
                updateTrack();
            });
        });
        
        // Touch support for swiping
        let touchStartX = 0;
        let touchEndX = 0;
        
        carousel.addEventListener('touchstart', e => {
            touchStartX = e.changedTouches[0].screenX;
        });
        
        carousel.addEventListener('touchend', e => {
            touchEndX = e.changedTouches[0].screenX;
            handleSwipe();
        });
        
        function handleSwipe() {
            if (touchEndX < touchStartX - 50) {
                // Swipe left, go to next slide
                currentSlide = (currentSlide + 1) % slideCount;
                updateTrack();
            } else if (touchEndX > touchStartX + 50) {
                // Swipe right, go to previous slide
                currentSlide = (currentSlide - 1 + slideCount) % slideCount;
                updateTrack();
            }
        }
        
        // Auto-advance the carousel
        let autoplayInterval = setInterval(() => {
            currentSlide = (currentSlide + 1) % slideCount;
            updateTrack();
        }, 5000);
        
        // Pause autoplay on hover
        carousel.addEventListener('mouseenter', () => {
            clearInterval(autoplayInterval);
        });
        
        // Resume autoplay when mouse leaves
        carousel.addEventListener('mouseleave', () => {
            autoplayInterval = setInterval(() => {
                currentSlide = (currentSlide + 1) % slideCount;
                updateTrack();
            }, 5000);
        });
    });
});
</script>
