---
// Composant pour afficher une récompense individuelle
interface Props {
  name: string;
  type: string;
  description?: string;
  stats?: string[];
}

const { name, type, description, stats } = Astro.props;

// Définir une couleur de fond en fonction du type
const typeColors = {
  equipment: "bg-blue-500/30 border-blue-500/50 hover:bg-blue-500/40",
  resource: "bg-green-500/30 border-green-500/50 hover:bg-green-500/40",
  default: "bg-purple-500/30 border-purple-500/50 hover:bg-purple-500/40"
};

const cardColor = typeColors[type] || typeColors.default;

// Fonction pour déterminer quelle image utiliser en fonction de la récompense
function getImageForReward(rewardName, rewardType) {
  // Images pour les équipements spécifiques
  if (rewardName.toLowerCase().includes('amulette') || rewardName.toLowerCase().includes('michou')) {
    return '/images/classes/eca.png';
  }
  
  if (rewardName.toLowerCase().includes('anneau')) {
    return '/images/classes/steamer.png';
  }
  
  // Images par défaut selon le type
  if (rewardType === 'equipment') {
    return '/images/classes/feca.png';
  }
  
  if (rewardType === 'resource' && rewardName.toLowerCase().includes('poil')) {
    return '/images/classes/sacrieur.png';
  }
  
  if (rewardType === 'resource' && rewardName.toLowerCase().includes('griffe')) {
    return '/images/classes/osa.png';
  }
  
  // Par défaut
  return '/images/classes/sram.png';
}
---

<div class={`reward-card ${cardColor} rounded-lg border p-4 transition-all shadow-md overflow-hidden relative`}>
  <div class="flex items-center mb-3">
    <!-- Image de classe basée sur le type d'équipement -->
    <div class="w-16 h-16 mr-4 rounded-lg overflow-hidden border-2 border-white/20 flex-shrink-0 shadow-glow">
      {name.toLowerCase().includes('amulette') && (
        <img src="/images/classes/eca.png" alt="Image de l'amulette" width="64" height="64" class="w-full h-full object-cover" />
      )}
      
      {name.toLowerCase().includes('anneau') && (
        <img src="/images/classes/steamer.png" alt="Image de l'anneau" width="64" height="64" class="w-full h-full object-cover" />
      )}
      
      {name.toLowerCase().includes('poil') && (
        <img src="/images/classes/sacrieur.png" alt="Image des poils" width="64" height="64" class="w-full h-full object-cover" />
      )}
      
      {name.toLowerCase().includes('griffe') && (
        <img src="/images/classes/osa.png" alt="Image des griffes" width="64" height="64" class="w-full h-full object-cover" />
      )}
      
      {!name.toLowerCase().includes('amulette') && !name.toLowerCase().includes('anneau') && 
       !name.toLowerCase().includes('poil') && !name.toLowerCase().includes('griffe') && (
        <img src="/images/classes/sram.png" alt="Image par défaut" width="64" height="64" class="w-full h-full object-cover" />
      )}
    </div>
    <div>
      <h3 class="text-lg font-bold text-white">{name}</h3>
      <span class="text-xs text-gray-300 capitalize py-1 px-2 bg-gray-800/50 rounded-md">{type}</span>
    </div>
  </div>
  
  {description && (
    <p class="text-sm text-gray-300 mb-3">{description}</p>
  )}
  
  {stats && stats.length > 0 && (
    <div class="stats-list border-t border-white/10 pt-2">
      {stats.map(stat => (
        <p class="text-xs text-blue-200 mb-1">• {stat}</p>
      ))}
    </div>
  )}
</div>

<style>
  .reward-card {
    min-height: 80px;
  }
  
  .reward-card:hover {
    transform: translateY(-2px);
  }
  

</style>
