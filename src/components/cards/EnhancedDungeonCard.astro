---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import { difficultyLabels } from '../../utils/constants';

interface Props {
  dungeon: CollectionEntry<'donjons'>;
  modalId: string;
}

const { dungeon, modalId } = Astro.props;
const difficultyInfo = difficultyLabels[dungeon.data.difficulty] || difficultyLabels.medium;

// Add fallbacks for potentially missing image/icon data
const imageSrc = dungeon.data.image?.src ?? '/images/donjons/default-banner.jpg';
const imageAlt = dungeon.data.image?.alt ?? dungeon.data.name ?? 'BanniÃ¨re par dÃ©faut';
const iconSrc = dungeon.data.icon?.src ?? '/images/donjons/default-icon.png';
const iconAlt = dungeon.data.icon?.alt ?? 'IcÃ´ne par dÃ©faut';
---

<div 
  class="dungeon-card group glass-card rounded-xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 flex flex-col h-full transform hover:-translate-y-1 hover:scale-[1.02]"
>
  <div class="relative">
    <Image
      src={imageSrc}
      alt={imageAlt}
      width={600}
      height={300}
      class="w-full h-48 object-cover"
      format="webp"
      loading="lazy"
    />
    <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-4">
      <h3 class="text-white text-xl font-bold truncate">{dungeon.data.name}</h3>
    </div>
    <div class={`absolute top-2 right-2 text-xs font-semibold px-2 py-1 rounded border ${difficultyInfo.color} border-opacity-50`}>
      {difficultyInfo.label}
    </div>
  </div>

  <div class="p-6 flex flex-col flex-grow">
    <div class="flex items-center mb-4">
      <div class={`bg-gray-500/20 dark:bg-gray-700/30 p-2 rounded-full mr-3 flex-shrink-0`}>
        <Image
          src={iconSrc}
          alt={iconAlt}
          width={32}
          height={32}
          class="w-8 h-8"
          format="webp"
          loading="lazy"
        />
      </div>
      <div class="flex flex-col min-w-0">
        <span class="text-gray-600 dark:text-gray-300 font-medium truncate">
          Niveau {dungeon.data.level}
        </span>
        <span class="text-gray-500 dark:text-gray-400 text-sm truncate">
          {dungeon.data.region}
        </span>
      </div>
    </div>

    <p class="text-gray-600 dark:text-gray-400 text-sm mb-4 line-clamp-3 flex-grow">
      {dungeon.data.description}
    </p>

    <div class="flex justify-between items-center mt-auto pt-4 border-t border-gray-200 dark:border-gray-700">
      <!-- Type d'Ã©quipe si disponible -->
      <div class="flex items-center text-sm text-gray-600 dark:text-gray-400">
        {dungeon.data.players === 'solo' && 
          <span class="flex items-center"><span class="mr-1">ðŸ‘¤</span> Solo</span>
        }
        {dungeon.data.players === 'group' && 
          <span class="flex items-center"><span class="mr-1">ðŸ‘¥</span> Groupe</span>
        }
        {dungeon.data.players === 'both' && 
          <span class="flex items-center"><span class="mr-1">ðŸ‘¥</span> Solo/Groupe</span>
        }
      </div>
      
      <!-- Bouton pour ouvrir la modale -->
      <button 
        class="text-wakfu-primary dark:text-wakfu-secondary font-medium text-sm group-hover:underline flex items-center"
        data-modal-open={modalId}
        aria-label={`Voir les dÃ©tails de ${dungeon.data.name}`}
      >
        DÃ©tails
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 transition-transform group-hover:translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </div>
  </div>
</div>

<style>
  .glass-card {
    background: rgba(17, 25, 40, 0.7);
    backdrop-filter: blur(12px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
</style>
