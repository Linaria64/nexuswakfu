---
interface Props {
  title: string;
  description: string;
  date: string;
  type: 'class' | 'guide' | 'donjon' | 'metier' | 'update';
  link: string;
  imageUrl?: string;
}

const { title, description, date, type, link, imageUrl } = Astro.props;

// Color classes based on content type
const typeColors = {
  class: {
    bg: 'bg-purple-100 dark:bg-purple-900/30',
    text: 'text-purple-800 dark:text-purple-300',
    border: 'border-purple-200 dark:border-purple-800'
  },
  guide: {
    bg: 'bg-blue-100 dark:bg-blue-900/30',
    text: 'text-blue-800 dark:text-blue-300',
    border: 'border-blue-200 dark:border-blue-800'
  },
  donjon: {
    bg: 'bg-red-100 dark:bg-red-900/30',
    text: 'text-red-800 dark:text-red-300',
    border: 'border-red-200 dark:border-red-800'
  },
  metier: {
    bg: 'bg-green-100 dark:bg-green-900/30',
    text: 'text-green-800 dark:text-green-300',
    border: 'border-green-200 dark:border-green-800'
  },
  update: {
    bg: 'bg-amber-100 dark:bg-amber-900/30',
    text: 'text-amber-800 dark:text-amber-300',
    border: 'border-amber-200 dark:border-amber-800'
  }
};

const colorClasses = typeColors[type];

// Type labels
const typeLabels = {
  class: 'Classe',
  guide: 'Guide',
  donjon: 'Donjon',
  metier: 'Métier',
  update: 'Mise à jour'
};

// Default images if none provided
const defaultImages = {
  class: '/images/ui/class-icon.svg',
  guide: '/images/ui/guide-icon.svg',
  donjon: '/images/ui/dungeon-icon.svg',
  metier: '/images/ui/job-icon.svg',
  update: '/images/ui/update-icon.svg'
};

const image = imageUrl || defaultImages[type];
---

<a href={link} class="group">
  <div class="bg-white dark:bg-gray-800 rounded-xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 transform group-hover:scale-[1.02] border border-gray-200 dark:border-gray-700 h-full flex flex-col">
    <div class="relative">
      <img 
        src={image} 
        alt={title} 
        class="w-full h-48 object-cover" 
      />
      <div class="absolute top-4 right-4">
        <span class={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${colorClasses.bg} ${colorClasses.text} ${colorClasses.border} border`}>
          {typeLabels[type]}
        </span>
      </div>
    </div>
    
    <div class="p-5 flex-1 flex flex-col">
      <h3 class="text-xl font-bold mb-2 text-gray-900 dark:text-white group-hover:text-wakfu-primary dark:group-hover:text-wakfu-secondary transition-colors">
        {title}
      </h3>
      <p class="text-gray-600 dark:text-gray-300 mb-4 flex-1">
        {description}
      </p>
      <div class="flex items-center justify-between mt-4 text-sm text-gray-500 dark:text-gray-400">
        <time datetime={date}>{date}</time>
        
        <span class="inline-flex items-center group-hover:text-wakfu-primary dark:group-hover:text-wakfu-secondary transition-colors">
          Voir plus
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 transition-transform group-hover:translate-x-1" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </span>
      </div>
    </div>
  </div>
</a> 