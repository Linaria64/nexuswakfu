---
// src/components/content/StasisCalculator.astro
interface Spell {
  name: string;
  description: string;
  baseDamage: number | null;
  damageType: 'direct' | 'poison' | 'other';
  effect?: string; 
}

interface Props {
  baseHp: number;
  spells: Spell[]; // Re-add spells prop
  targetHpElementId: string; // Add prop for target ID
}

const { baseHp, spells = [], targetHpElementId } = Astro.props; // Re-add spells prop with default and get the target ID

// --- DEBUGGING LOG --- 
console.log('[StasisCalculator] Prop received - baseHp:', baseHp, 'Type:', typeof baseHp);

// Stasis modifier data (HP %, Damage %, Loot %)
const stasisData = [
  { level: 1, hpMod: 70, dmgMod: 60, lootMod: 60 },
  { level: 2, hpMod: 100, dmgMod: 100, lootMod: 100 },
  { level: 3, hpMod: 140, dmgMod: 130, lootMod: 120 },
  { level: 4, hpMod: 210, dmgMod: 190, lootMod: 160 },
  { level: 5, hpMod: 310, dmgMod: 200, lootMod: 188 },
  { level: 6, hpMod: 440, dmgMod: 210, lootMod: 200 },
  { level: 7, hpMod: 600, dmgMod: 230, lootMod: 205 },
  { level: 8, hpMod: 660, dmgMod: 240, lootMod: 210 },
  { level: 9, hpMod: 880, dmgMod: 250, lootMod: 215 },
  { level: 10, hpMod: 1100, dmgMod: 260, lootMod: 220 },
];

// REMOVED displaySpells filter
---

<div class="bg-black/20 p-4 rounded mt-6">
  {/* Slider Section */}
  <h4 class="text-lg font-semibold text-emerald-300 mb-3">Calculateur de Stasis</h4>
  <div class="flex flex-col sm:flex-row items-center justify-between gap-4">
    <label for="stasis-slider" class="text-sm font-medium text-gray-300 whitespace-nowrap">Niveau Stasis : <span id="stasis-level-display" class="font-bold text-emerald-400">2</span></label>
    <input
      id="stasis-slider"
      type="range"
      min="1"
      max="10"
      step="1"
      value="2" # Default to Stasis 2
      class="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer accent-emerald-500"
    />
  </div>

  {/* REMOVED Integrated Stats Display */}
  {/* REMOVED Dynamic Spell List */}
</div>

<script define:vars={{ baseHp, stasisData, spells, targetHpElementId }}>
  // --- DEBUGGING LOG --- 
  console.log('[StasisCalculator Script] define:vars - baseHp:', baseHp, 'Type:', typeof baseHp);
  
  const slider = document.getElementById('stasis-slider');
  const levelDisplay = document.getElementById('stasis-level-display');
  const hpDisplay = document.getElementById(targetHpElementId); 
  
  function getSpellDescriptionElements() {
    return document.querySelectorAll('span[data-spell-name]');
  }

  function updateStats() {
    // Check for the specific hpDisplay element for this instance
    const currentHpDisplay = document.getElementById(targetHpElementId);
    if (!currentHpDisplay) {
      // console.error(`[StasisCalculator Script] HP display element (#${targetHpElementId}) not found.`);
      return; 
    }
    // console.log(`[StasisCalculator Script] Found HP display #${targetHpElementId}`);
    
    const currentLevel = parseInt(slider.value);
    const data = stasisData.find(d => d.level === currentLevel);

    if (!data) return;

    levelDisplay.textContent = currentLevel;
    
    const numericBaseHp = Number(baseHp);
    // console.log(`[StasisCalculator Script #${targetHpElementId}] baseHp: ${baseHp}, numericBaseHp: ${numericBaseHp}`);

    if (!isNaN(numericBaseHp)) {
        const calculatedHp = Math.round(numericBaseHp * (data.hpMod / 100));
        // console.log(`[StasisCalculator Script #${targetHpElementId}] Stasis ${currentLevel} -> HP: ${calculatedHp}`);
        currentHpDisplay.textContent = calculatedHp.toLocaleString(); // Update the specific element
    } else {
        // console.error(`[StasisCalculator Script #${targetHpElementId}] baseHp prop is invalid: ${baseHp}`);
        currentHpDisplay.textContent = 'Erreur'; 
    }

    // Update spell descriptions (still targets elements across the page, might need refinement if multiple spell lists exist)
    const spellDescElements = getSpellDescriptionElements();
    spellDescElements.forEach(span => {
        // Retrieve data from the element itself
        const baseDamage = parseFloat(span.dataset.baseDamage);
        const damageType = span.dataset.damageType;
        const originalDescription = span.dataset.originalDescription || span.textContent; // Store original on first run
        span.dataset.originalDescription = originalDescription; // Store it

        let updatedDescription = originalDescription;

        // Calculate damage only for 'direct' type with a valid baseDamage
        if (damageType === 'direct' && !isNaN(baseDamage)) {
            const calculatedDmg = Math.round(baseDamage * (data.dmgMod / 100));
            // Replace the first number found in the original description template
            updatedDescription = originalDescription.replace(/\d+/, `<span class="font-mono font-semibold text-emerald-400">${calculatedDmg.toLocaleString()}</span>`);
        } 
        
        // Update the span's innerHTML safely
        span.innerHTML = updatedDescription;
    });
  }

  // Add check if hpDisplay exists before initial call
  const initialHpDisplay = document.getElementById(targetHpElementId);
  if (initialHpDisplay) {
      setTimeout(updateStats, 100); 
  } else {
      setTimeout(() => {
          const hpDisplayRetry = document.getElementById(targetHpElementId);
          if (hpDisplayRetry) {
              // console.log(`[StasisCalculator Script #${targetHpElementId}] hpDisplay found on retry.`);
              updateStats();
          } else {
              console.error(`[StasisCalculator Script] HP display element (#${targetHpElementId}) still not found after retry.`);
          }
      }, 500);
  }

  slider.addEventListener('input', updateStats);
</script> 