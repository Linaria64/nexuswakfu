---
// src/components/content/StasisCalculator.astro

// Interface should match the data STRUCTURE expected, 
// even if BossDisplay passes the slightly different BossSpellData.
// Alternatively, BossDisplay could map the data before passing.
// For now, let's keep it simple and match the schema.
interface Spell {
  name: string;
  description: string;
  baseDamage: number | null;
  // Aligning with the Zod schema used in config.ts & BossDisplay
  damageType: 'direct' | 'indirect' | 'poison' | 'heal' | 'buff' | 'debuff' | 'other'; 
  // Removed effect?: string;
}

interface Props {
  baseHp: number;
  targetHpElementId: string; // ID of the HP span to update in BossDisplay
  bossDisplayId: string; // ID of the parent BossDisplay container to scope listeners
}

const { baseHp, targetHpElementId, bossDisplayId } = Astro.props;

// Stasis modifier data (HP %, Damage %, Loot %)
const stasisData = [
  { level: 1, hpMod: 70, dmgMod: 60, lootMod: 60 },
  { level: 2, hpMod: 100, dmgMod: 100, lootMod: 100 },
  { level: 3, hpMod: 140, dmgMod: 130, lootMod: 120 },
  { level: 4, hpMod: 210, dmgMod: 190, lootMod: 160 },
  { level: 5, hpMod: 310, dmgMod: 200, lootMod: 188 },
  { level: 6, hpMod: 440, dmgMod: 210, lootMod: 200 },
  { level: 7, hpMod: 600, dmgMod: 230, lootMod: 205 },
  { level: 8, hpMod: 660, dmgMod: 240, lootMod: 210 },
  { level: 9, hpMod: 880, dmgMod: 250, lootMod: 215 },
  { level: 10, hpMod: 1100, dmgMod: 260, lootMod: 220 },
];
---

<div class="stasis-calculator-container bg-black/20 p-4 rounded mt-6">
  <h4 class="text-lg font-semibold text-emerald-300 mb-3">Calculateur de Stasis</h4>
  <div class="flex flex-col sm:flex-row items-center justify-between gap-4">
    <label for={`${bossDisplayId}-stasis-slider`} class="text-sm font-medium text-gray-300 whitespace-nowrap">Niveau Stasis : <span id={`${bossDisplayId}-stasis-level-display`} class="stasis-level-display font-bold text-emerald-400">2</span></label>
    <input
      id={`${bossDisplayId}-stasis-slider`} 
      type="range"
      min="1"
      max="10"
      step="1"
      value="2"
      class="stasis-slider w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer accent-emerald-500"
      aria-labelledby={`${bossDisplayId}-stasis-label`}
    />
    <span id={`${bossDisplayId}-stasis-label`} class="sr-only">Sélecteur de niveau Stasis</span>
  </div>
  
  <div class="grid grid-cols-3 gap-2 mt-4">
    <div class="bg-black/30 p-2 rounded text-center">
      <span class="text-xs text-gray-400">PV</span>
      <p class="text-sm font-semibold text-emerald-400"><span id={`${bossDisplayId}-stasis-hp-mod`}>100</span>%</p>
    </div>
    <div class="bg-black/30 p-2 rounded text-center">
      <span class="text-xs text-gray-400">Dégâts</span>
      <p class="text-sm font-semibold text-emerald-400"><span id={`${bossDisplayId}-stasis-dmg-mod`}>100</span>%</p>
    </div>
    <div class="bg-black/30 p-2 rounded text-center">
      <span class="text-xs text-gray-400">Butin</span>
      <p class="text-sm font-semibold text-emerald-400"><span id={`${bossDisplayId}-stasis-loot-mod`}>100</span>%</p>
    </div>
  </div>
</div>

<script define:vars={{ baseHp, stasisData, targetHpElementId, bossDisplayId }}>
  document.addEventListener('DOMContentLoaded', () => {
    const bossContainer = document.querySelector(`.boss-display-container.${bossDisplayId}`);
    if (!bossContainer) {
      console.error(`StasisCalculator: Could not find parent BossDisplay container with ID ${bossDisplayId}`);
      return;
    }
    
    const slider = bossContainer.querySelector(`#${bossDisplayId}-stasis-slider`);
    const levelDisplay = bossContainer.querySelector(`#${bossDisplayId}-stasis-level-display`);
    const hpModDisplay = document.getElementById(`${bossDisplayId}-stasis-hp-mod`);
    const dmgModDisplay = document.getElementById(`${bossDisplayId}-stasis-dmg-mod`);
    const lootModDisplay = document.getElementById(`${bossDisplayId}-stasis-loot-mod`);
    
    let currentTargetHpId = targetHpElementId;
    let currentBaseHp = baseHp;

    // --- Main Update Function ---
    function updateStats() {
      if (!slider || !levelDisplay) {
        return;
      }

      const hpDisplaySpan = document.getElementById(currentTargetHpId); 
      if (!hpDisplaySpan) {
        console.error(`StasisCalculator: Target HP element with ID ${currentTargetHpId} not found.`);
        return;
      }

      const currentStasisLevel = parseInt(slider.value, 10);
      const data = stasisData.find(d => d.level === currentStasisLevel);

      if (!data) {
        console.error(`Stasis data for level ${currentStasisLevel} not found.`);
        return;
      }

      // Update Stasis Level Display
      levelDisplay.textContent = currentStasisLevel;
      
      // Update modifier displays
      if (hpModDisplay) hpModDisplay.textContent = data.hpMod;
      if (dmgModDisplay) dmgModDisplay.textContent = data.dmgMod;
      if (lootModDisplay) lootModDisplay.textContent = data.lootMod;
      
      // Calculate and Update HP
      if (!isNaN(currentBaseHp)) {
        const calculatedHp = Math.round(currentBaseHp * (data.hpMod / 100));
        hpDisplaySpan.textContent = calculatedHp.toLocaleString(); 
      } else {
        hpDisplaySpan.textContent = 'Erreur'; 
      }

      // Récupérer uniquement les éléments de description de sort visibles (dans le conteneur de niveau actif)
      const activeContainer = bossContainer.querySelector('.boss-level-container.active');
      if (!activeContainer) return;
      
      const spellDescElements = activeContainer.querySelectorAll('.spell-description');
      spellDescElements.forEach(span => {
        // Retrieve base data stored on the element by BossDisplay
        const baseDamage = parseFloat(span.dataset.baseDamage);
        const damageType = span.dataset.damageType;
        // Use original description stored on element, default to current text content if dataset is missing
        let originalDescription = span.dataset.originalDescription || span.textContent.trim(); 
        
        // Ensure original description is stored for next update
        if (!span.dataset.originalDescription) {
          span.dataset.originalDescription = originalDescription;
        }

        let updatedDescription = originalDescription;

        // Update description only for direct damage spells with valid base damage
        if (damageType === 'direct' && !isNaN(baseDamage) && baseDamage !== null) {
          const calculatedDmg = Math.round(baseDamage * (data.dmgMod / 100));
          // Be more specific replacing only the first number found, assuming format like "X damage"
          updatedDescription = originalDescription.replace(/(\d[\d,\.]*)/, 
            `<span class="font-mono font-semibold text-emerald-400">${calculatedDmg.toLocaleString()}</span>`);
        } 
        // TODO: Add logic here if poison/other damage types should scale with Stasis?
        
        span.innerHTML = updatedDescription; // Use innerHTML to render the styled span
      });
    }

    // --- Event Listener for Stasis Slider --- 
    if (slider) {
      slider.addEventListener('input', () => {
        updateStats();
      });
    }
    
    // --- Event Listener for Level Changes from BossDisplay --- 
    document.addEventListener('boss-level-changed', (event) => { 
      const customEvent = event;
      if (customEvent.detail && customEvent.detail.bossDisplayId === bossDisplayId) {
        const newLevelData = customEvent.detail.newLevelData;
        const newTargetHpId = customEvent.detail.targetHpElementId;
        
        if (newLevelData && newLevelData.hp) {
          currentBaseHp = newLevelData.hp;
          if (newTargetHpId) {
            currentTargetHpId = newTargetHpId;
          }
          updateStats();
        }
      }
    });
    
    // --- Initial Calculation ---
    updateStats();
  });
</script> 