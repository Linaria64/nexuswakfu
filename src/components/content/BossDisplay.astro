---
import StasisCalculator from './StasisCalculator.astro';

interface ResistanceProps {
  value: number;
}

interface SpellProps {
  name: string;
  description: string;
  baseDamage: number | null;
  damageType: 'direct' | 'indirect' | 'poison' | 'heal' | 'buff' | 'debuff' | 'other';
}

interface LevelProps {
  level: number;
  hp: number;
  ap: number;
  mp: number;
  description: string;
  bossImage: {
    src: string;
    alt: string;
  };
  resistances: {
    water: number;
    earth: number;
    air: number;
    fire: number;
  };
  spells: SpellProps[];
}

interface BossProps {
  name: string;
  levels: LevelProps[];
}

const { boss } = Astro.props as { boss: BossProps };
// Créer un ID unique pour ce boss basé sur son nom
const bossDisplayId = boss.name.toLowerCase().replace(/\s+/g, '-');

// Trier les niveaux par ordre croissant
const sortedLevels = [...boss.levels].sort((a, b) => a.level - b.level);
---

<div class={`boss-display-container ${bossDisplayId} mb-12`}>
  <h2 class="text-3xl font-bold text-red-300 mb-6 border-b border-red-700 pb-2">Boss du Donjon</h2>
  
  <div class="boss-container">
    <h3 class="text-2xl font-bold text-red-400 mb-4">{boss.name}</h3>
    
    <div class="mb-4 flex flex-wrap gap-2">
      <span class="text-sm font-medium text-gray-300 mr-2">Niveau du boss:</span>
      {sortedLevels.map((level, index) => (
        <button 
          class="level-selector px-3 py-1 rounded-full bg-red-900/50 text-red-200 hover:bg-red-800/60 transition-colors" 
          data-level-index={index}
          data-level={level.level}
        >
          {level.level}
        </button>
      ))}
    </div>

    {sortedLevels.map((level, index) => (
      <div class={`boss-level-container ${index === 0 ? 'active' : 'hidden'}`} data-level-index={index} data-level={level.level}>
        <div class="bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-md border border-white/10 rounded-lg p-6 mb-6 shadow-lg transition-all duration-300 ease-in-out hover:border-white/20 hover:shadow-xl">
          <div class="flex flex-col md:flex-row gap-6">
            <div class="md:w-1/3">
              <img
                src={level.bossImage.src}
                alt={level.bossImage.alt}
                class="rounded-lg w-full h-auto border-2 border-white/20 shadow-lg"
                loading="lazy"
                width="400"
                height="400"
              />
            </div>
            
            <div class="md:w-2/3">
              <h4 class="text-xl font-semibold text-red-400 mb-2">Niveau <span class="boss-level-display">{level.level}</span></h4>
              <p class="text-gray-300 mb-4">{level.description}</p>
              
              <div class="grid grid-cols-2 md:grid-cols-4 gap-3 mb-4">
                <div class="bg-black/30 p-2 rounded-lg text-center">
                  <span class="text-xs text-gray-400">PV</span>
                  <p class="text-lg font-bold text-red-300">
                    <span id={`boss-hp-${bossDisplayId}-${level.level}`} class="boss-hp" data-base-hp={level.hp}>{level.hp}</span>
                  </p>
                </div>
                <div class="bg-black/30 p-2 rounded-lg text-center">
                  <span class="text-xs text-gray-400">PA</span>
                  <p class="text-lg font-bold text-yellow-300">{level.ap}</p>
                </div>
                <div class="bg-black/30 p-2 rounded-lg text-center">
                  <span class="text-xs text-gray-400">PM</span>
                  <p class="text-lg font-bold text-blue-300">{level.mp}</p>
                </div>
              </div>
              
              <h5 class="text-lg font-semibold text-gray-200 mb-2">Résistances</h5>
              <div class="grid grid-cols-2 md:grid-cols-4 gap-3 mb-4">
                <div class="bg-blue-900/30 p-2 rounded-lg text-center">
                  <span class="text-xs text-gray-300">Eau</span>
                  <p class={`text-lg font-bold ${level.resistances.water >= 0 ? 'text-blue-300' : 'text-red-400'}`}>
                    {level.resistances.water > 0 ? '+' : ''}{level.resistances.water}%
                  </p>
                </div>
                <div class="bg-green-900/30 p-2 rounded-lg text-center">
                  <span class="text-xs text-gray-300">Terre</span>
                  <p class={`text-lg font-bold ${level.resistances.earth >= 0 ? 'text-green-300' : 'text-red-400'}`}>
                    {level.resistances.earth > 0 ? '+' : ''}{level.resistances.earth}%
                  </p>
                </div>
                <div class="bg-purple-900/30 p-2 rounded-lg text-center">
                  <span class="text-xs text-gray-300">Air</span>
                  <p class={`text-lg font-bold ${level.resistances.air >= 0 ? 'text-purple-300' : 'text-red-400'}`}>
                    {level.resistances.air > 0 ? '+' : ''}{level.resistances.air}%
                  </p>
                </div>
                <div class="bg-orange-900/30 p-2 rounded-lg text-center">
                  <span class="text-xs text-gray-300">Feu</span>
                  <p class={`text-lg font-bold ${level.resistances.fire >= 0 ? 'text-orange-300' : 'text-red-400'}`}>
                    {level.resistances.fire > 0 ? '+' : ''}{level.resistances.fire}%
                  </p>
                </div>
              </div>
              
              <h5 class="text-lg font-semibold text-gray-200 mb-2">Sorts</h5>
              <div class="space-y-2">
                {level.spells.map((spell) => (
                  <div class="bg-black/30 p-3 rounded-lg">
                    <h6 class="font-semibold text-yellow-300">{spell.name}</h6>
                    <p class="text-gray-300 text-sm spell-description" 
                       data-base-damage={spell.baseDamage} 
                       data-damage-type={spell.damageType}>
                      {spell.description}
                    </p>
                    <span class={`inline-block px-2 py-1 rounded text-xs mt-1
                      ${spell.damageType === 'direct' ? 'bg-red-900/50 text-red-200' : ''}
                      ${spell.damageType === 'poison' ? 'bg-green-900/50 text-green-200' : ''}
                      ${spell.damageType === 'heal' ? 'bg-emerald-900/50 text-emerald-200' : ''}
                      ${spell.damageType === 'buff' ? 'bg-blue-900/50 text-blue-200' : ''}
                      ${spell.damageType === 'debuff' ? 'bg-purple-900/50 text-purple-200' : ''}
                      ${spell.damageType === 'other' ? 'bg-gray-900/50 text-gray-200' : ''}
                    `}>
                      {spell.damageType}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    ))}

    {/* Stasis Calculator */}
    <StasisCalculator 
      baseHp={sortedLevels[0].hp} 
      bossDisplayId={bossDisplayId} 
      targetHpElementId={`boss-hp-${bossDisplayId}-${sortedLevels[0].level}`}
    />
  </div>
</div>

<script define:vars={{ bossDisplayId, levels: sortedLevels }}>
  // Gestion du changement de niveau
  document.addEventListener('DOMContentLoaded', () => {
    const bossContainer = document.querySelector(`.boss-display-container.${bossDisplayId}`);
    if (!bossContainer) return;

    const levelSelectors = bossContainer.querySelectorAll('.level-selector');
    const levelContainers = bossContainer.querySelectorAll('.boss-level-container');
    
    // Fonction pour mettre à jour le StasisCalculator
    function updateStasisCalculator(levelIndex) {
      const level = levels[levelIndex];
      if (!level) return;
      
      const targetHpId = `boss-hp-${bossDisplayId}-${level.level}`;
      const hpElement = document.getElementById(targetHpId);
      
      // Créer un événement personnalisé pour informer le calculateur Stasis
      const event = new CustomEvent('boss-level-changed', {
        detail: {
          bossDisplayId,
          newLevelData: level,
          targetHpElementId: targetHpId
        }
      });
      
      document.dispatchEvent(event);
    }

    // Ajouter les écouteurs d'événements aux sélecteurs de niveau
    levelSelectors.forEach((button) => {
      button.addEventListener('click', () => {
        const levelIndex = parseInt(button.dataset.levelIndex, 10);
        
        // Mettre à jour la classe active des boutons
        levelSelectors.forEach(btn => btn.classList.remove('bg-red-700', 'font-semibold'));
        button.classList.add('bg-red-700', 'font-semibold');
        
        // Afficher le container du niveau sélectionné et cacher les autres
        levelContainers.forEach((container, idx) => {
          container.classList.toggle('hidden', idx !== levelIndex);
          container.classList.toggle('active', idx === levelIndex);
        });
        
        // Mettre à jour le calculateur Stasis
        updateStasisCalculator(levelIndex);
      });
    });

    // Activer le premier niveau par défaut
    if (levelSelectors.length > 0) {
      levelSelectors[0].classList.add('bg-red-700', 'font-semibold');
    }
  });
</script>

<style>
  .boss-container {
    overflow: hidden;
    transition: all 0.3s ease;
  }
  
  .level-selector {
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .boss-level-container {
    transition: opacity 0.3s ease;
  }
  
  .boss-level-container.hidden {
    display: none;
  }
</style> 