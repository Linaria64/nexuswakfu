---
import StasisCalculator from './StasisCalculator.astro';

interface Spell {
  name: string;
  description: string;
  baseDamage: number | null;
  damageType: 'direct' | 'indirect' | 'poison' | 'heal' | 'buff' | 'debuff' | 'other';
}

interface BossLevel {
  level: number;
  hp: number;
  ap: number;
  mp: number;
  description: string;
  bossImage: {
    src: string;
    alt: string;
  };
  resistances: {
    water: number;
    earth: number;
    air: number;
    fire: number;
  };
  spells: Spell[];
}

interface Boss {
  name: string;
  levels: BossLevel[];
}

interface Props {
  boss: Boss;
}

const { boss } = Astro.props;
const currentLevel = boss.levels[0]; // Display first level by default

// Cr√©er un ID unique pour ce boss bas√© sur son nom
const bossDisplayId = boss.name.toLowerCase().replace(/\s+/g, '-');

// Trier les niveaux par ordre croissant
const sortedLevels = [...boss.levels].sort((a, b) => a.level - b.level);
---

<div class={`boss-display-container ${bossDisplayId} mb-12`}>
  <h1 class="boss-title text-3xl font-bold text-center mb-6">
    <span class="inline-block bg-clip-text text-transparent bg-gradient-to-r from-cyan-400 to-blue-500">
      Boss du Donjon: {boss.name}
    </span>
  </h1>
  {sortedLevels.length > 1 && (
    <nav class="level-selector flex justify-center gap-2 mb-6" aria-label="S√©lection du niveau du boss">
      {sortedLevels.map((level, idx) => (
        <button
          key={level.level}
          type="button"
          class={`level-btn px-3 py-1 rounded font-semibold border border-cyan-600 bg-cyan-900/40 text-cyan-200 hover:bg-cyan-700/60 focus:outline-none focus-visible:ring-2 focus-visible:ring-cyan-400 transition-colors ${idx === 0 ? 'active' : ''}`}
          data-level={level.level}
          aria-pressed={idx === 0 ? 'true' : 'false'}
          aria-label={`Afficher le niveau ${level.level}`}
          tabIndex={0}
        >
          Niveau {level.level}
        </button>
      ))}
    </nav>
  )}
  
  <div class="boss-container glass-card">
    <div class="boss-header">
      <div class="boss-image-wrapper">
        {currentLevel.bossImage?.src ? (
          <img src={currentLevel.bossImage.src} alt={currentLevel.bossImage.alt || boss.name} class="boss-image" />
        ) : (
          <div class="boss-image-placeholder">
            <span>{boss.name.charAt(0)}</span>
          </div>
        )}
      </div>
      
      <div class="boss-info">
        <h2 class="boss-name">{boss.name}</h2>
        <p class="boss-title">{currentLevel.description}</p>
        
        <div class="boss-stats-container">
          <div class="boss-stat">
            <div class="stat-icon hp-icon">‚ù§Ô∏è</div>
            <div class="stat-value-container">
              <div class="stat-label">HP</div>
              <div class="stat-value hp" id={`boss-hp-${bossDisplayId}-${currentLevel.level}`} data-base-hp={currentLevel.hp}>{currentLevel.hp.toLocaleString()}</div>
            </div>
          </div>

          <div class="boss-stat">
            <div class="stat-icon ap-icon">üéØ</div>
            <div class="stat-value-container">
              <div class="stat-label">PA</div>
              <div class="stat-value">{currentLevel.ap}</div>
            </div>
          </div>

          <div class="boss-stat">
            <div class="stat-icon mp-icon">üë£</div>
            <div class="stat-value-container">
              <div class="stat-label">PM</div>
              <div class="stat-value">{currentLevel.mp}</div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="boss-details" aria-live="polite">
      <div class="boss-resistances">
        <h3 class="details-title">R√©sistances</h3>
        <div class="resistances-grid">
          <div class={`resistance-item ${currentLevel.resistances.water > 0 ? 'positive' : 'negative'}`}>
            <span class="element-icon water"></span>
            <span class="resistance-value">{currentLevel.resistances.water > 0 ? '+' : ''}{currentLevel.resistances.water}%</span>
          </div>
          <div class={`resistance-item ${currentLevel.resistances.earth > 0 ? 'positive' : 'negative'}`}>
            <span class="element-icon earth"></span>
            <span class="resistance-value">{currentLevel.resistances.earth > 0 ? '+' : ''}{currentLevel.resistances.earth}%</span>
          </div>
          <div class={`resistance-item ${currentLevel.resistances.air > 0 ? 'positive' : 'negative'}`}>
            <span class="element-icon air"></span>
            <span class="resistance-value">{currentLevel.resistances.air > 0 ? '+' : ''}{currentLevel.resistances.air}%</span>
          </div>
          <div class={`resistance-item ${currentLevel.resistances.fire > 0 ? 'positive' : 'negative'}`}>
            <span class="element-icon fire"></span>
            <span class="resistance-value">{currentLevel.resistances.fire > 0 ? '+' : ''}{currentLevel.resistances.fire}%</span>
          </div>
        </div>
      </div>
      
      <div class="boss-spells">
        <h3 class="details-title">Sorts</h3>
        <div class="spells-container">
          {currentLevel.spells.map((spell) => (
            <div class={`spell-card ${spell.damageType}`}>
              <div class="spell-header">
                <h3 class="spell-name">{spell.name}</h3>
                {spell.baseDamage && (
                  <span class="spell-damage" data-base-damage={spell.baseDamage}>
                    <span class="base-damage">{spell.baseDamage.toLocaleString()}</span>
                    <span class="stasis-bonus hidden"></span>
                    <span class="total-damage"></span>
                    d√©g√¢ts
                  </span>
                )}
              </div>
              
              {spell.description && (
                <p class="spell-description" data-base-damage={spell.damageInDescription || spell.baseDamage || 0}>
                  {spell.description}
                </p>
              )}
              <span class="spell-type">{spell.damageType}</span>
            </div>
          ))}
        </div>
      </div>
    </div>

    {/* Stasis Calculator */}
    <StasisCalculator 
      baseHp={sortedLevels[0].hp} 
      bossDisplayId={bossDisplayId} 
      targetHpElementId={`boss-hp-${bossDisplayId}-${sortedLevels[0].level}`}
      resistances={sortedLevels[0].resistances}
      maxStasis={1000}
    />
  </div>
</div>

<script define:vars={{ bossDisplayId, levels: sortedLevels }}>
  // Gestion du changement de niveau
  document.addEventListener('DOMContentLoaded', () => {
    const bossContainer = document.querySelector(`.boss-display-container.${bossDisplayId}`);
    if (!bossContainer) return;
    
    const levelButtons = bossContainer.querySelectorAll('.level-selector button');
    const levelContainers = bossContainer.querySelectorAll('.boss-level-container');
    
    // Ajouter les √©couteurs d'√©v√©nements pour chaque bouton de niveau
    levelButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Gestion ARIA pressed
        levelButtons.forEach(btn => btn.setAttribute('aria-pressed', 'false'));
        button.setAttribute('aria-pressed', 'true');
      });
      // Accessibilit√© clavier : Entr√©e/Espace
      button.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          button.click();
        }
      });
      const level = parseInt(button.dataset.level);
      
      // Mettre √† jour les classes actives
      levelButtons.forEach(btn => btn.classList.remove('active'));
      button.classList.add('active');
      
      // Afficher le conteneur de niveau correspondant
      levelContainers.forEach(container => {
        const containerLevel = parseInt(container.dataset.level);
        if (containerLevel === level) {
          container.classList.add('active');
          
          // Obtenir l'ID de l'√©l√©ment HP pour ce niveau
          const hpElementId = `boss-hp-${bossDisplayId}-${level}`;
          
          // R√©cup√©rer les donn√©es du niveau s√©lectionn√©
          const levelData = levels.find(l => l.level === level);
          
          if (levelData) {
            // Force stasis calculator to update with new level data
            document.dispatchEvent(new CustomEvent('boss-level-changed', {
              detail: {
                bossDisplayId,
                newLevelData: levelData,
                targetHpElementId: hpElementId
        
        // Afficher le conteneur de niveau correspondant
        levelContainers.forEach(container => {
          const containerLevel = parseInt(container.dataset.level);
          if (containerLevel === level) {
            container.classList.add('active');
            
            // Obtenir l'ID de l'√©l√©ment HP pour ce niveau
            const hpElementId = `boss-hp-${bossDisplayId}-${level}`;
            
            // R√©cup√©rer les donn√©es du niveau s√©lectionn√©
            const levelData = levels.find(l => l.level === level);
            
            if (levelData) {
              // Force stasis calculator to update with new level data
              document.dispatchEvent(new CustomEvent('boss-level-changed', {
                detail: {
                  bossDisplayId,
                  newLevelData: levelData,
                  targetHpElementId: hpElementId
                }
              }));
              
              // Also trigger the stasis level slider change if it exists
              const stasisSlider = document.getElementById(`${bossDisplayId}-stasis-slider`);
              if (stasisSlider) {
                const event = new Event('input');
                stasisSlider.dispatchEvent(event);
              }
            }
          } else {
            container.classList.remove('active');
          }
        });
      });
    });
  });
</script>

<style>
  .boss-title {
    text-shadow: 0 0 10px rgba(6, 182, 212, 0.5);
  }
  
  .boss-container {
    position: relative;
    overflow: hidden;
  }
  
  .boss-container::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(
      circle at center,
      rgba(6, 182, 212, 0.1) 0%,
      transparent 60%
    );
    animation: rotate 30s linear infinite;
    z-index: -1;
  }
  
  @keyframes rotate {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
  
  .level-selector {
    position: relative;
    transition: all 0.3s ease;
    overflow: hidden;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .level-selector:hover {
    transform: translateY(-2px);
    box-shadow: 0 0 15px rgba(6, 182, 212, 0.3);
  }
  
  .level-selector::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(
      45deg,
      rgba(6, 182, 212, 0) 0%,
      rgba(6, 182, 212, 0.3) 50%,
      rgba(6, 182, 212, 0) 100%
    );
    transform: translateX(-100%) translateY(-100%) rotate(45deg);
    transition: all 0.5s ease;
  }
  
  .level-selector:hover::after {
    transform: translateX(100%) translateY(100%) rotate(45deg);
  }
  
  .boss-level-container {
    display: none;
  }
  
  .boss-level-container.active {
    display: block;
  }
  
  .boss-image-container {
    position: relative;
    margin-bottom: 1rem;
    transition: all 0.3s ease;
  }
  
  .boss-image-container:hover {
    transform: translateY(-5px);
  }
  
  .boss-image-container:hover img {
    box-shadow: 0 0 25px rgba(6, 182, 212, 0.4);
  }
  
  .boss-display {
    background: rgba(0, 0, 0, 0.3);
    border-radius: 16px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    overflow: hidden;
    margin: 2rem 0;
  }
  
  .boss-header {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    padding: 1.5rem;
    background: rgba(165, 55, 253, 0.1);
    border-bottom: 1px solid rgba(165, 55, 253, 0.2);
  }
  
  @media (min-width: 768px) {
    .boss-header {
      flex-direction: row;
      align-items: center;
    }
  }
  
  .boss-image-wrapper {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    overflow: hidden;
    border: 2px solid rgba(165, 55, 253, 0.5);
    box-shadow: 0 0 20px rgba(165, 55, 253, 0.4);
  }
  
  .boss-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .boss-image-placeholder {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(165, 55, 253, 0.2);
    color: rgba(165, 55, 253, 0.8);
    font-size: 3rem;
    font-weight: 700;
  }
  
  .boss-info {
    flex: 1;
  }
  
  .boss-name {
    font-size: 1.75rem;
    font-weight: 700;
    color: rgb(167, 139, 250);
    margin-bottom: 0.25rem;
  }
  
  .boss-title {
    font-size: 1rem;
    color: rgba(255, 255, 255, 0.6);
    margin-bottom: 1rem;
  }
  
  .boss-stats-container {
    display: flex;
    gap: 1.5rem;
  }
  
  .boss-stat {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .stat-icon {
    width: 24px;
    height: 24px;
    background-position: center;
    background-repeat: no-repeat;
    background-size: contain;
  }
  
  .stat-value-container {
    flex: 1;
  }
  
  .stat-label {
    font-size: 0.875rem;
    color: rgba(255, 255, 255, 0.6);
  }
  
  .boss-details {
    padding: 1.5rem;
  }
  
  .details-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: rgb(167, 139, 250);
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid rgba(165, 55, 253, 0.2);
  }
  
  .resistances-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }
  
  @media (min-width: 640px) {
    .resistances-grid {
      grid-template-columns: repeat(4, 1fr);
    }
  }
  
  .resistance-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem;
    border-radius: 8px;
    background: rgba(0, 0, 0, 0.2);
  }
  
  .resistance-item.positive {
    border-left: 3px solid rgb(16, 185, 129);
  }
  
  .resistance-item.negative {
    border-left: 3px solid rgb(239, 68, 68);
  }
  
  .element-icon {
    width: 24px;
    height: 24px;
    background-position: center;
    background-repeat: no-repeat;
    background-size: contain;
  }
  
  .resistance-value {
    font-weight: 600;
  }
  
  .resistance-item.positive .resistance-value {
    color: rgb(16, 185, 129);
  }
  
  .resistance-item.negative .resistance-value {
    color: rgb(239, 68, 68);
  }
  
  .boss-spells {
    margin-top: 2rem;
  }
  
  .spells-container {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1rem;
  }
  
  @media (min-width: 768px) {
    .spells-container {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  .spell-card {
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    padding: 1rem;
    border-left: 3px solid rgb(167, 139, 250);
  }
  
  .spell-card.direct {
    border-left-color: rgb(239, 68, 68);
  }
  
  .spell-card.indirect {
    border-left-color: rgb(245, 158, 11);
  }
  
  .spell-card.poison {
    border-left-color: rgb(16, 185, 129);
  }
  
  .spell-card.heal {
    border-left-color: rgb(59, 130, 246);
  }
  
  .spell-card.buff {
    border-left-color: rgb(139, 92, 246);
  }
  
  .spell-card.debuff {
    border-left-color: rgb(236, 72, 153);
  }
  
  .spell-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 0.5rem;
  }
  
  .spell-name {
    font-weight: 600;
    color: rgb(255, 255, 255);
  }
  
  .spell-damage {
    font-size: 0.875rem;
    padding: 0.25rem 0.5rem;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
    color: rgba(255, 255, 255, 0.7);
    font-family: 'Orbitron', monospace;
  }
  
  .spell-damage .base-damage {
    color: rgba(255, 255, 255, 0.9);
  }
  
  .spell-damage .stasis-bonus {
    color: rgb(16, 185, 129);
  }
  
  .spell-damage .total-damage {
    color: rgb(6, 182, 212);
  }
  
  .spell-damage .hidden {
    display: none;
  }
  
  .spell-description {
    font-size: 0.875rem;
    color: rgba(255, 255, 255, 0.7);
    margin-bottom: 0.5rem;
  }
  
  .spell-type {
    display: inline-block;
    font-size: 0.75rem;
    padding: 0.15rem 0.5rem;
    border-radius: 4px;
    background: rgba(255, 255, 255, 0.1);
    color: rgba(255, 255, 255, 0.5);
    text-transform: capitalize;
  }
</style> 