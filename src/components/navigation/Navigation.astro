---
// Définir les liens de navigation - Réorganisés selon la demande
const navItems = [
  { text: 'Classes', href: '/classes' },
  { text: 'Quêtes', href: '/quetes' },
  { text: 'Accueil', href: '/', isHome: true },
  { text: 'Donjons', href: '/donjons' },
];

// Récupérer le chemin actuel pour marquer l'élément actif
const pathname = Astro.url.pathname;

// Import GlobalSearch
import GlobalSearch from '../search/GlobalSearch.astro';
---

<header class="sticky top-0 z-40 w-full glass border-b border-[var(--color-border-muted)]">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex h-16 items-center justify-center">
      <!-- Navigation Desktop -->
      <nav class="hidden md:flex items-center justify-center">
        {navItems.map((item) => {
          if (item.isHome) {
            return (
              <a href={item.href} class="flex items-center mx-6">
                <div class="flex items-center text-xl font-bold text-[var(--color-text-base)]">
                  <span class="text-primary">Nexus</span>
                  <span class="ml-1">Wakfu</span>
                </div>
              </a>
            );
          }
          const isActive = pathname === item.href || (item.href !== '/' && pathname.startsWith(item.href));
          return (
            <a 
              href={item.href} 
              class={`text-sm font-medium transition-colors hover:text-primary px-4 py-2 rounded-md mx-2 relative group
                ${isActive ? 
                  'text-primary' : 
                  'text-[var(--color-text-muted)] hover:text-[var(--color-text-base)]'}`
              }
            >
              {item.text}
              {/* Underline effect for active/hover */}
              <span class={`absolute bottom-0 left-0 w-full h-0.5 bg-primary transition-transform duration-300 ease-out scale-x-0 group-hover:scale-x-100 ${isActive ? 'scale-x-100' : ''}`}></span>
            </a>
          );
        })}
      </nav>

      <!-- Mobile menu button -->
      <div class="flex md:hidden justify-between items-center w-full">
        <a href="/" class="flex items-center text-xl font-bold text-[var(--color-text-base)]">
          <span class="text-primary">Nexus</span>
          <span class="ml-1">Wakfu</span>
        </a>
        
        <button 
          type="button" 
          class="mobile-menu-button text-[var(--color-text-muted)] hover:text-[var(--color-text-base)] hover:bg-white/10 p-2 rounded-md"
          aria-label="Ouvrir le menu"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu -->
  <div class="mobile-menu hidden md:hidden border-t border-[var(--color-border-muted)] bg-[var(--color-bg-alt)]/90 backdrop-blur-md">
    <div class="container mx-auto px-4 py-3 space-y-1">
      {navItems.filter(item => !item.isHome).map((item) => {
         const isActive = pathname === item.href || (item.href !== '/' && pathname.startsWith(item.href));
         return (
            <a 
              href={item.href} 
              class={`block px-3 py-2 rounded-md text-base font-medium transition-colors
                ${isActive ? 
                  'bg-primary/10 text-primary' : 
                  'text-[var(--color-text-muted)] hover:bg-white/5 hover:text-[var(--color-text-base)]'}`
              }
            >
              {item.text}
            </a>
          );
        })}
    </div>
  </div>
</header>

<!-- Include the GlobalSearch component -->
<GlobalSearch />

<script>
// Gestion avancée du menu mobile (accessibilité, focus, ARIA)
document.addEventListener('DOMContentLoaded', () => {
  const mobileMenuButton = document.querySelector('.mobile-menu-button');
  const mobileMenu = document.querySelector('.mobile-menu');
  let lastFocusedElement = null;

  // Accessibilité ARIA
  if (mobileMenu) {
    mobileMenu.setAttribute('role', 'menu');
    mobileMenu.setAttribute('aria-label', 'Menu principal');
    mobileMenu.setAttribute('tabindex', '-1');
  }
  if (mobileMenuButton) {
    mobileMenuButton.setAttribute('aria-expanded', 'false');
    mobileMenuButton.setAttribute('aria-controls', 'mobile-menu');
  }

  function openMenu() {
    if (!mobileMenu) return;
    mobileMenu.classList.remove('hidden');
    mobileMenuButton?.setAttribute('aria-expanded', 'true');
    // Focus sur le premier lien
    const firstLink = mobileMenu.querySelector('a');
    if (firstLink) firstLink.focus();
    // Trap focus
    document.addEventListener('keydown', trapFocus);
  }
  function closeMenu() {
    if (!mobileMenu) return;
    mobileMenu.classList.add('hidden');
    mobileMenuButton?.setAttribute('aria-expanded', 'false');
    // Rendre le focus au bouton
    if (mobileMenuButton) mobileMenuButton.focus();
    document.removeEventListener('keydown', trapFocus);
  }
  function trapFocus(e) {
    if (!mobileMenu || mobileMenu.classList.contains('hidden')) return;
    if (e.key === 'Escape') {
      closeMenu();
    }
    if (e.key === 'Tab') {
      const focusableEls = Array.from(mobileMenu.querySelectorAll('a,button,[tabindex]:not([tabindex="-1"])')).filter(el => !el.hasAttribute('disabled'));
      if (!focusableEls.length) return;
      const first = focusableEls[0];
      const last = focusableEls[focusableEls.length - 1];
      if (e.shiftKey) {
        if (document.activeElement === first) {
          e.preventDefault();
          last.focus();
        }
      } else {
        if (document.activeElement === last) {
          e.preventDefault();
          first.focus();
        }
      }
    }
  }

  mobileMenuButton?.addEventListener('click', () => {
    if (mobileMenu?.classList.contains('hidden')) {
      lastFocusedElement = document.activeElement;
      openMenu();
    } else {
      closeMenu();
    }
  });

  document.addEventListener('click', (event) => {
    const target = event.target;
    const isMenuButtonClick = target.closest('.mobile-menu-button');
    const isMenuClick = target.closest('.mobile-menu');
    if (!isMenuButtonClick && !isMenuClick && !mobileMenu?.classList.contains('hidden')) {
      closeMenu();
    }
  });
});
</script>