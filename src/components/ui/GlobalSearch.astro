---
import { getCollection } from 'astro:content';
import type { SearchItem } from '../../lib/utils/search';

// Récupérer toutes les collections nécessaires
const classes = await getCollection('classes');
const metiers = await getCollection('metiers');
const donjons = (await getCollection('donjons')).filter(item => item.data && item.data.title);
const guides = (await getCollection('guides')).filter(item => item.data && item.data.title);

// Fusionner toutes les données pour la recherche
const searchData: SearchItem[] = [
  ...classes.map(item => ({
    type: 'classe',
    title: item.data.title,
    subtitle: item.data.role,
    description: item.data.description,
    image: item.data.image,
    slug: `/classes/${item.slug}`,
    keywords: [item.data.title, item.data.role, ...(item.data.strengths || []), ...(item.data.weaknesses || [])].join(' ')
  })),
  ...metiers.map(item => ({
    type: 'métier',
    title: item.data.title,
    subtitle: item.data.category,
    description: item.data.description,
    image: item.data.icon,
    slug: `/metiers/${item.slug}`,
    keywords: [item.data.title, item.data.category, item.data.difficulty].join(' ')
  })),
  ...donjons.map(item => ({
    type: 'donjon',
    title: item.data.title,
    subtitle: `Niv. ${item.data.level || '?'}`,
    description: item.data.description,
    image: item.data.image,
    slug: `/donjons/${item.slug}`,
    keywords: [item.data.title, item.data.location, item.data.level?.toString()].join(' ')
  })),
  ...guides.map(item => ({
    type: 'guide',
    title: item.data.title,
    subtitle: item.data.category,
    description: item.data.description,
    image: item.data.image,
    slug: `/guides/${item.slug}`,
    keywords: [item.data.title, item.data.category, item.data.tags?.join(' ')].join(' ')
  }))
];
---

<div class="relative" x-data="searchModal()" aria-haspopup="dialog" aria-expanded="false">
  <script>
    import { debounce } from '../../lib/utils/debounce';
    import { simpleSearch } from '../../lib/utils/search';
    /**
     * @typedef {import('../../lib/utils/search').SearchItem} SearchItem
     */
    function searchModal() {
      return {
        open: false,
        searchQuery: '',
        searchResults: [],
        selectedIndex: -1,
        resultsGrouped: {},
        showResults: false,
        searchData: [],
        _keydownListener: null,
        _debouncedSearch: null,
        init() {
          this.searchData = JSON.parse(document.getElementById('search-data').textContent);
          this._debouncedSearch = debounce((value) => {
            if (value.length > 1) {
              this.search(value);
              this.showResults = true;
            } else {
              this.searchResults = [];
              this.resultsGrouped = {};
              this.showResults = false;
            }
          }, 200);

          // Intercepter la touche '/' pour ouvrir la recherche
          this._keydownListener = (e) => {
            if (e.key === '/' && !this.open && document.activeElement.tagName !== 'INPUT' && document.activeElement.tagName !== 'TEXTAREA') {
              e.preventDefault();
              this.open = true;
              this.$nextTick(() => {
                this.$refs.searchInput.focus();
              });
            }
            if (e.key === 'Escape' && this.open) {
              this.close();
            }
          };
          document.addEventListener('keydown', this._keydownListener);

          this.$watch('searchQuery', (value) => {
            this._debouncedSearch(value);
          });
        },
        destroy() {
          if (this._keydownListener) {
            document.removeEventListener('keydown', this._keydownListener);
          }
        },
        search(query) {
          // Utilitaire factorisé (prêt à remplacer par Fuse.js si besoin)
          this.searchResults = simpleSearch(query, this.searchData, 10);
          // Grouper les résultats par type
          this.resultsGrouped = this.searchResults.reduce((acc, item) => {
            const type = item.type;
            if (!acc[type]) acc[type] = [];
            acc[type].push(item);
            return acc;
          }, {});
        },
        selectItem(index) {
          this.selectedIndex = index;
        },
        navigate(direction) {
          const totalResults = this.searchResults.length;
          if (totalResults === 0) return;
          if (direction === 'next') {
            this.selectedIndex = (this.selectedIndex + 1) % totalResults;
          } else {
            this.selectedIndex = (this.selectedIndex - 1 + totalResults) % totalResults;
          }
          this.$nextTick(() => {
            const selected = this.$el.querySelector(`[data-index='${this.selectedIndex}']`);
            if (selected) {
              selected.scrollIntoView({ block: 'nearest' });
            }
          });
        },
        goToSelected() {
          if (this.selectedIndex >= 0 && this.searchResults[this.selectedIndex]) {
            window.location.href = this.searchResults[this.selectedIndex].slug;
          }
        },
        close() {
          this.open = false;
          this.searchQuery = '';
          this.searchResults = [];
          this.selectedIndex = -1;
          this.showResults = false;
        }
      };
    }
  </script>
  <!-- Bouton de recherche -->
  <button 
    type="button" 
    @click="open = true; $nextTick(() => $refs.searchInput.focus())" 
    class="flex items-center text-sm leading-6 text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white gap-2 py-1.5 px-3 rounded-md ring-1 ring-gray-200 dark:ring-gray-700 shadow-sm hover:ring-gray-300 dark:hover:ring-gray-600"
  >
    <svg width="20" height="20" fill="none" aria-hidden="true" class="flex-none">
      <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m19 19-3.5-3.5"></path>
      <circle cx="10" cy="10" r="6.5" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></circle>
    </svg>
    <span>Rechercher...</span>
    <span class="ml-auto hidden sm:block text-xs text-gray-400 dark:text-gray-500" aria-hidden="true">⌘K</span>
  </button>
  
  <!-- Modal de recherche -->
  <div 
    x-show="open" 
    x-transition:enter="transition ease-out duration-200" 
    x-transition:enter-start="opacity-0" 
    x-transition:enter-end="opacity-100" 
    x-transition:leave="transition ease-in duration-150" 
    x-transition:leave-start="opacity-100" 
    x-transition:leave-end="opacity-0" 
    @keydown.escape="close"
    @keydown.arrow-down.prevent="navigate('next')"
    @keydown.arrow-up.prevent="navigate('prev')"
    @keydown.enter.prevent="goToSelected"
    class="fixed inset-0 z-50"
    style="display: none;"
    role="dialog"
    aria-modal="true"
    aria-label="Recherche"
  >
    <!-- Fond semi-transparent -->
    <div 
      x-show="open" 
      x-transition:enter="transition ease-out duration-200" 
      x-transition:enter-start="opacity-0" 
      x-transition:enter-end="opacity-100" 
      x-transition:leave="transition ease-in duration-150" 
      x-transition:leave-start="opacity-100" 
      x-transition:leave-end="opacity-0" 
      class="fixed inset-0 bg-black/30 backdrop-blur-sm"
      @click="close"
    ></div>
    
    <!-- Contenu de la recherche -->
    <div class="fixed inset-0 flex items-start justify-center pt-16 px-4 sm:pt-24">
      <div 
        x-show="open" 
        x-transition:enter="transition ease-out duration-200" 
        x-transition:enter-start="opacity-0 translate-y-4" 
        x-transition:enter-end="opacity-100 translate-y-0" 
        x-transition:leave="transition ease-in duration-150" 
        x-transition:leave-start="opacity-100 translate-y-0" 
        x-transition:leave-end="opacity-0 translate-y-4" 
        class="w-full max-w-xl transform rounded-xl bg-white dark:bg-gray-800 shadow-2xl ring-1 ring-black/5 dark:ring-white/5 divide-y divide-gray-100 dark:divide-gray-700 overflow-hidden"
        @click.stop
      >
        <!-- Champ de recherche -->
        <div class="relative">
          <svg class="pointer-events-none absolute left-4 top-3.5 h-5 w-5 text-gray-400 dark:text-gray-500" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
            <path fill-rule="evenodd" d="M9 3.5a5.5 5.5 0 100 11 5.5 5.5 0 000-11zM2 9a7 7 0 1112.452 4.391l3.328 3.329a.75.75 0 11-1.06 1.06l-3.329-3.328A7 7 0 012 9z" clip-rule="evenodd" />
          </svg>
          <input 
            x-ref="searchInput" 
            x-model="searchQuery"
            type="text" 
            placeholder="Rechercher des classes, métiers, donjons, guides..."
            class="h-12 w-full border-0 bg-transparent pl-11 pr-4 text-gray-900 dark:text-white placeholder:text-gray-400 dark:placeholder:text-gray-500 focus:ring-0 sm:text-sm"
          />
          <!-- Raccourci clavier -->
          <kbd class="absolute right-3 top-3.5 hidden h-5 select-none items-center gap-1 rounded border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 px-1.5 font-mono text-xs text-gray-500 dark:text-gray-400 sm:flex">
            <abbr title="Command" class="no-underline">⌘</abbr>K
          </kbd>
        </div>
        
        <!-- Résultats de recherche -->
        <div class="max-h-80 scroll-py-2 overflow-y-auto py-2 px-2" x-show="showResults">
          <!-- Message aucun résultat -->
          <div x-show="searchResults.length === 0 && searchQuery.length > 1" class="p-4 text-center text-gray-500 dark:text-gray-400">
            Aucun résultat trouvé pour "<span x-text="searchQuery"></span>"
          </div>
          
          <!-- Résultats par type -->
          <template x-for="(results, type) in resultsGrouped" :key="type">
            <div class="mb-2">
              <h3 class="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase mb-2 px-2 mt-2">
                <span x-text="type"></span>s
              </h3>
              
              <ul>
                <template x-for="(item, index) in results" :key="index">
                  <li>
                    <a 
                      :href="item.slug"
                      @mousemove="selectItem(searchResults.findIndex(r => r.slug === item.slug))"
                      :class="{'bg-wakfu-primary/10 dark:bg-wakfu-secondary/20': searchResults.findIndex(r => r.slug === item.slug) === selectedIndex}"
                      :data-index="searchResults.findIndex(r => r.slug === item.slug)"
                      class="group flex gap-3 select-none rounded-md p-2 hover:bg-gray-100 dark:hover:bg-gray-700"
                    >
                      <!-- Image -->
                      <div class="flex h-10 w-10 flex-none items-center justify-center rounded-lg bg-gray-50 dark:bg-gray-800 group-hover:bg-white dark:group-hover:bg-gray-700">
                        <img :src="item.image" :alt="item.title" class="h-8 w-8 object-cover object-center rounded" />
                      </div>
                      
                      <!-- Texte -->
                      <div class="flex-auto">
                        <h4 class="text-sm font-semibold text-gray-900 dark:text-white" x-text="item.title"></h4>
                        <p class="text-xs text-gray-500 dark:text-gray-400" x-text="item.subtitle"></p>
                      </div>
                      
                      <!-- Flèche de navigation -->
                      <div class="flex-none self-center">
                        <svg class="h-5 w-5 text-gray-400 dark:text-gray-500" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                          <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd" />
                        </svg>
                      </div>
                    </a>
                  </li>
                </template>
              </ul>
            </div>
          </template>
          
          <!-- Lien vers la recherche avancée -->
          <div class="py-2 px-2 mt-2 border-t border-gray-100 dark:border-gray-700">
            <a href="/recherche" class="flex justify-between items-center rounded-md px-2 py-3 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">
              <span>Voir tous les résultats pour "<span x-text="searchQuery"></span>"</span>
              <svg class="h-5 w-5 text-gray-400 dark:text-gray-500" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd" />
              </svg>
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Données de recherche cachées -->
  <script id="search-data" type="application/json">
    {JSON.stringify(searchData)}
  </script>
</div> 