---
interface Props {
  tabs: {
    id: string;
    label: string;
    icon?: string;
    badge?: string | number;
  }[];
  defaultTab?: string;
  variant?: 'underline' | 'pills' | 'buttons';
  size?: 'sm' | 'md' | 'lg';
  fullWidth?: boolean;
  className?: string;
}

const { 
  tabs, 
  defaultTab = tabs[0]?.id, 
  variant = 'underline',
  size = 'md',
  fullWidth = false,
  className = ''
} = Astro.props;

// Générer un ID unique pour ce composant
const tabsId = `tabs-${Math.random().toString(36).substring(2, 9)}`;

// Classes de style en fonction des variants
const variantClasses = {
  underline: {
    container: "border-b border-gray-200 dark:border-gray-700",
    tab: "inline-flex items-center px-1 py-4 border-b-2 font-medium text-sm",
    active: "border-wakfu-primary dark:border-wakfu-secondary text-wakfu-primary dark:text-wakfu-secondary",
    inactive: "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300 dark:hover:border-gray-600"
  },
  pills: {
    container: "flex space-x-1",
    tab: "px-3 py-2 font-medium text-sm rounded-md",
    active: "bg-wakfu-primary dark:bg-wakfu-secondary text-white",
    inactive: "text-gray-500 hover:text-gray-700 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
  },
  buttons: {
    container: "inline-flex rounded-md shadow-sm",
    tab: "px-4 py-2 text-sm font-medium border",
    active: "bg-wakfu-primary dark:bg-wakfu-secondary text-white border-wakfu-primary dark:border-wakfu-secondary",
    inactive: "bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700"
  }
};

// Tailles
const sizeClasses = {
  sm: "text-xs",
  md: "text-sm",
  lg: "text-base"
};

const tabsClasses = variantClasses[variant];
const navClass = `tabs-container ${tabsClasses.container} ${fullWidth ? 'flex w-full' : 'inline-flex'}`;
const tabClass = `${tabsClasses.tab} ${sizeClasses[size]} ${fullWidth ? 'flex-1 justify-center text-center' : ''}`;
const activeTabClass = `${tabClass} ${tabsClasses.active}`;
const inactiveTabClass = `${tabClass} ${tabsClasses.inactive}`;
---

<div id={tabsId} class={`tabs-component ${className}`}>
  <div class="tabs-nav" role="tablist" aria-label="Tabs">
    <nav class={navClass}>
      {tabs.map((tab, index) => (
        <button
          id={`${tabsId}-tab-${tab.id}`}
          class={tab.id === defaultTab ? activeTabClass : inactiveTabClass}
          role="tab"
          aria-selected={tab.id === defaultTab ? "true" : "false"}
          aria-controls={`${tabsId}-panel-${tab.id}`}
          data-tab-id={tab.id}
          type="button"
        >
          {tab.icon && (
            <span class="mr-2" set:html={tab.icon} />
          )}
          {tab.label}
          {tab.badge && (
            <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300">
              {tab.badge}
            </span>
          )}
        </button>
      ))}
    </nav>
  </div>
  
  <div class="tabs-content mt-4">
    {tabs.map(tab => (
      <div
        id={`${tabsId}-panel-${tab.id}`}
        class={`tab-panel ${tab.id === defaultTab ? 'active' : 'hidden'}`}
        role="tabpanel"
        aria-labelledby={`${tabsId}-tab-${tab.id}`}
        data-tab-content={tab.id}
      >
        <!-- Ici nous utilisons un slot unique sans nom plutôt que des slots nommés -->
      </div>
    ))}
  </div>
</div>

<script define:vars={{ tabsId, defaultTab, variant }}>
  document.addEventListener('DOMContentLoaded', function() {
    const tabsComponent = document.getElementById(tabsId);
    if (!tabsComponent) return;
    
    // Déplacer tout le contenu des slots dans les conteneurs de tab appropriés
    const allSlotContents = Array.from(tabsComponent.children).filter(child => 
      !child.classList.contains('tabs-nav') && !child.classList.contains('tabs-content')
    );
    
    allSlotContents.forEach(content => {
      const targetTabId = content.getAttribute('data-tab');
      if (targetTabId) {
        const tabPanel = tabsComponent.querySelector(`[data-tab-content="${targetTabId}"]`);
        if (tabPanel) {
          tabPanel.appendChild(content);
        }
      }
    });
    
    const tabs = tabsComponent.querySelectorAll('button[role="tab"]');
    const tabPanels = tabsComponent.querySelectorAll('div[role="tabpanel"]');
    
    // Ajouter les écouteurs d'événements aux onglets
    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        const tabId = tab.getAttribute('data-tab-id');
        
        // Mettre à jour l'état des onglets
        tabs.forEach(t => {
          if (t === tab) {
            t.setAttribute('aria-selected', 'true');
            t.classList.remove(...t.className.split(' ').filter(c => c.includes('inactive')));
            t.classList.add(...t.className.split(' ').filter(c => c.includes('active')));
          } else {
            t.setAttribute('aria-selected', 'false');
            t.classList.remove(...t.className.split(' ').filter(c => c.includes('active')));
            t.classList.add(...t.className.split(' ').filter(c => c.includes('inactive')));
          }
        });
        
        // Afficher le panneau sélectionné
        tabPanels.forEach(panel => {
          panel.classList.toggle('hidden', panel.id !== `${tabsId}-panel-${tabId}`);
          panel.classList.toggle('active', panel.id === `${tabsId}-panel-${tabId}`);
        });
        
        // Déclencher un événement personnalisé
        const event = new CustomEvent('tab-change', {
          detail: { tabId },
          bubbles: true
        });
        tabsComponent.dispatchEvent(event);
      });
    });
  });
</script>

<style>
  .tab-panel {
    animation: fadeIn 0.2s ease-in-out;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
</style> 