---
interface Props {
  content: string;
  position?: 'top' | 'right' | 'bottom' | 'left';
  trigger?: 'hover' | 'click';
  maxWidth?: string;
  delay?: number;
  arrow?: boolean;
  dark?: boolean;
  className?: string;
}

const {
  content,
  position = 'top',
  trigger = 'hover',
  maxWidth = '200px',
  delay = 300,
  arrow = true,
  dark = false,
  className = '',
} = Astro.props;

// Générer un ID unique pour ce tooltip
const tooltipId = `tooltip-${Math.random().toString(36).substring(2, 9)}`;

// Calculer les classes de position
const positionClasses = {
  top: 'bottom-full left-1/2 transform -translate-x-1/2 mb-2',
  right: 'left-full top-1/2 transform -translate-y-1/2 ml-2',
  bottom: 'top-full left-1/2 transform -translate-x-1/2 mt-2',
  left: 'right-full top-1/2 transform -translate-y-1/2 mr-2',
};

// Calculer les classes de flèche en fonction de la position
const arrowClasses = {
  top: 'bottom-[-4px] left-1/2 transform -translate-x-1/2 border-l-transparent border-r-transparent border-b-transparent',
  right: 'left-[-4px] top-1/2 transform -translate-y-1/2 border-t-transparent border-b-transparent border-r-transparent',
  bottom: 'top-[-4px] left-1/2 transform -translate-x-1/2 border-l-transparent border-r-transparent border-t-transparent',
  left: 'right-[-4px] top-1/2 transform -translate-y-1/2 border-t-transparent border-b-transparent border-l-transparent',
};

// Appliquer le thème
const themeClasses = dark 
  ? 'bg-gray-800 text-white border-gray-700'
  : 'bg-white text-gray-900 border-gray-200 dark:bg-gray-800 dark:text-white dark:border-gray-700';

// Classe finale du tooltip
const tooltipClasses = `invisible absolute z-50 px-3 py-2 text-sm rounded-md opacity-0 shadow-sm border ${themeClasses} ${positionClasses[position]} ${className}`;

// Classe de l'arrow
const arrowClass = dark
  ? 'border-gray-800'
  : 'border-white dark:border-gray-800';
---

<div class="relative inline-block" data-tooltip-id={tooltipId}>
  <slot />
  <div 
    id={tooltipId}
    role="tooltip" 
    class={tooltipClasses} 
    style={`max-width: ${maxWidth}; transition-delay: 0ms;`}
  >
    <div set:html={content} />
    {arrow && (
      <div class={`absolute border-4 ${arrowClass} ${arrowClasses[position]}`}></div>
    )}
  </div>
</div>

<script define:vars={{ tooltipId, trigger, delay }}>
  document.addEventListener('DOMContentLoaded', function() {
    const triggerEl = document.querySelector(`[data-tooltip-id="${tooltipId}"]`);
    const tooltipEl = document.getElementById(tooltipId);
    
    if (!triggerEl || !tooltipEl) return;
    
    let timeout;
    
    function showTooltip() {
      // Annuler tout délai précédent
      clearTimeout(timeout);
      
      // Définir un nouveau délai pour l'affichage
      timeout = setTimeout(() => {
        tooltipEl.style.visibility = 'visible';
        tooltipEl.style.opacity = '1';
        tooltipEl.style.transitionDelay = `${delay}ms`;
      }, delay);
    }
    
    function hideTooltip() {
      // Annuler tout délai précédent
      clearTimeout(timeout);
      
      // Masquer immédiatement
      tooltipEl.style.visibility = 'hidden';
      tooltipEl.style.opacity = '0';
      tooltipEl.style.transitionDelay = '0ms';
    }
    
    if (trigger === 'hover') {
      triggerEl.addEventListener('mouseenter', showTooltip);
      triggerEl.addEventListener('mouseleave', hideTooltip);
      triggerEl.addEventListener('focus', showTooltip);
      triggerEl.addEventListener('blur', hideTooltip);
    } else if (trigger === 'click') {
      triggerEl.addEventListener('click', function(e) {
        e.stopPropagation();
        
        const isVisible = tooltipEl.style.visibility === 'visible';
        
        if (isVisible) {
          hideTooltip();
        } else {
          showTooltip();
          
          // Ajouter un gestionnaire pour fermer le tooltip en cliquant ailleurs
          const closeOnClickOutside = function(e) {
            if (!tooltipEl.contains(e.target) && !triggerEl.contains(e.target)) {
              hideTooltip();
              document.removeEventListener('click', closeOnClickOutside);
            }
          };
          
          // Attendre le prochain cycle pour ajouter l'écouteur
          setTimeout(() => {
            document.addEventListener('click', closeOnClickOutside);
          }, 0);
        }
      });
    }
  });
</script>

<style>
  [role="tooltip"] {
    transition: opacity 0.15s ease-in-out, visibility 0.15s ease-in-out;
    will-change: opacity, visibility;
    z-index: 50;
    pointer-events: none;
  }
</style> 