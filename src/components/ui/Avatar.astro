---
interface Props {
  src?: string;
  alt?: string;
  name?: string;
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  shape?: 'circle' | 'square' | 'rounded';
  status?: 'online' | 'offline' | 'busy' | 'away';
  bordered?: boolean;
  initials?: boolean;
  className?: string;
}

const {
  src,
  alt = '',
  name = '',
  size = 'md',
  shape = 'circle',
  status,
  bordered = false,
  initials = false,
  className = '',
} = Astro.props;

// Définir les tailles
const sizeMap = {
  'xs': 'w-6 h-6 text-xs',
  'sm': 'w-8 h-8 text-sm',
  'md': 'w-10 h-10 text-base',
  'lg': 'w-12 h-12 text-lg',
  'xl': 'w-16 h-16 text-xl',
};

// Définir les formes
const shapeMap = {
  'circle': 'rounded-full',
  'square': 'rounded-none',
  'rounded': 'rounded-lg',
};

// Définir les couleurs de statut
const statusColorMap = {
  'online': 'bg-green-500',
  'offline': 'bg-gray-400',
  'busy': 'bg-red-500',
  'away': 'bg-yellow-500'
};

// Définir les tailles d'indicateur de statut
const statusSizeMap = {
  'xs': 'w-1.5 h-1.5',
  'sm': 'w-2 h-2',
  'md': 'w-2.5 h-2.5',
  'lg': 'w-3 h-3',
  'xl': 'w-3.5 h-3.5',
};

// Calculer la bordure
const borderClass = bordered ? 'border-2 border-white dark:border-gray-800' : '';

// Calculer la classe finale
const avatarClass = `${sizeMap[size]} ${shapeMap[shape]} ${borderClass} ${className}`;
const statusClass = status ? `${statusColorMap[status]} ${statusSizeMap[size]} absolute rounded-full ring-2 ring-white dark:ring-gray-800` : '';

// Calculer la position de l'indicateur de statut en fonction de la forme
const statusPositionClass = shape === 'circle' 
  ? 'bottom-0 right-0'
  : '-bottom-1 -right-1';

// Générer les initiales à partir du nom
function getInitials(name: string): string {
  if (!name) return '';
  return name
    .split(' ')
    .map(part => part.charAt(0))
    .join('')
    .toUpperCase()
    .substring(0, 2);
}

// Définir les couleurs d'arrière-plan pour les avatars avec initiales
function getRandomColor(name: string): string {
  const colors = [
    'bg-red-500 dark:bg-red-700',
    'bg-blue-500 dark:bg-blue-700',
    'bg-green-500 dark:bg-green-700',
    'bg-yellow-500 dark:bg-yellow-700',
    'bg-purple-500 dark:bg-purple-700',
    'bg-pink-500 dark:bg-pink-700',
    'bg-indigo-500 dark:bg-indigo-700',
    'bg-gray-500 dark:bg-gray-700'
  ];
  
  if (!name) return colors[0];
  
  // Utiliser la somme des codes de caractères pour une couleur cohérente
  const charCodeSum = name.split('').reduce((sum, char) => sum + char.charCodeAt(0), 0);
  return colors[charCodeSum % colors.length];
}

const avatarInitials = getInitials(name);
const avatarColor = getRandomColor(name);
---

<div class="relative inline-flex flex-shrink-0">
  {initials || !src ? (
    <div 
      class={`${avatarClass} ${avatarColor} flex items-center justify-center text-white`}
      aria-label={name || 'Avatar'}
    >
      {avatarInitials}
    </div>
  ) : (
    <img 
      src={src} 
      alt={alt || name || 'Avatar'} 
      class={`${avatarClass} object-cover`}
      loading="lazy"
      onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
    />
    <div 
      class={`${avatarClass} ${avatarColor} flex items-center justify-center text-white`}
      style="display: none;"
    >
      {avatarInitials}
    </div>
  )}
  
  {status && (
    <span class={`${statusClass} ${statusPositionClass}`}></span>
  )}
</div>

<style>
  img {
    object-fit: cover;
  }
</style> 