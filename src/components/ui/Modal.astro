---
interface Props {
  id: string;
  title: string;
  size?: 'sm' | 'md' | 'lg' | 'full';
}

const { id, title, size = 'md' } = Astro.props;

const sizeClasses = {
  sm: 'max-w-sm',
  md: 'max-w-lg',
  lg: 'max-w-2xl',
  full: 'max-w-4xl',
};
---

<div 
  id={id}
  class="modal fixed inset-0 z-50 flex items-center justify-center pointer-events-none opacity-0" 
  aria-modal="true" 
  role="dialog" 
  tabindex="-1"
>
  <div 
    class="modal-overlay fixed inset-0 bg-black/60 backdrop-blur-lg transition-opacity duration-300 cursor-pointer"
    data-modal-close
  ></div>
  <div 
    class={`modal-content glass relative w-full mx-4 rounded-xl shadow-2xl overflow-y-auto ${sizeClasses[size]}`}
  >
    <div class="p-6">
      {/* Title is now usually part of the slotted content for better layout control */}
      <div class="flex items-center justify-center mb-6">
        <h2 class="text-2xl font-bold text-white">{title}</h2>
      </div>
      
      <slot />
    </div>
  </div>
</div>

{/* Minimal styles - relying on utility classes now */}
<style>
  .modal.is-open {
    opacity: 1;
    visibility: visible;
  }
  .modal.is-open .modal-content {
    transform: scale(1);
  }

  .modal-content {
    /* @apply glass rounded-xl shadow-2xl relative max-h-[90vh] overflow-y-auto transition-transform duration-300 ease-in-out scale-95 p-6 sm:p-8; Removed @apply glass */
  }
  .modal.is-open .modal-content {
    transform: scale(1);
  }

  .modal-content.size-full {
    @apply max-w-6xl w-11/12; /* Kept size class separate */
  }
  
  .close-modal {
    @apply absolute top-3 right-3 rounded-md p-1 text-[var(--color-text-muted)] hover:text-[var(--color-text-base)] hover:bg-white/10 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-cyan-500/75 transition-all;
  }

  /* Custom scrollbar for modal content */
  .modal-content::-webkit-scrollbar {
    width: 8px;
  }
  .modal-content::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 10px;
  }
  .modal-content::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 10px;
  }
  .modal-content::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.3);
  }
</style>

<script>
  // Gestionnaire pour les modales
  document.addEventListener('DOMContentLoaded', () => {
    // Ouvrir la modale
    document.querySelectorAll('[data-modal-target]').forEach(trigger => {
      trigger.addEventListener('click', () => {
        const modalId = trigger.getAttribute('data-modal-target');
        const modal = document.getElementById(modalId);
        if (modal) {
          modal.classList.remove('pointer-events-none', 'opacity-0');
          document.body.style.overflow = 'hidden';
        }
      });
    });

    // Fermer la modale
    document.querySelectorAll('[data-modal-close]').forEach(closeBtn => {
      closeBtn.addEventListener('click', () => {
        const modal = closeBtn.closest('.modal');
        if (modal) {
          modal.classList.add('pointer-events-none', 'opacity-0');
          document.body.style.overflow = '';
        }
      });
    });

    // Fermer avec Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        const modal = document.querySelector('.modal:not(.pointer-events-none)');
        if (modal) {
          modal.classList.add('pointer-events-none', 'opacity-0');
          document.body.style.overflow = '';
        }
      }
    });
  });
</script>