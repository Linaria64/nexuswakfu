---
interface Props {
  isOpen: boolean;
  title?: string;
  onClose: () => void;
  size?: 'sm' | 'md' | 'lg' | 'full';
  className?: string;
}

const { isOpen, title, onClose, size = 'md', className = '' } = Astro.props;

const sizeClasses = {
  sm: 'max-w-sm',
  md: 'max-w-lg',
  lg: 'max-w-2xl',
  full: 'max-w-full',
};
---

<div 
  class={`modal fixed inset-0 z-50 flex items-center justify-center ${isOpen ? '' : 'pointer-events-none opacity-0'} ${className}`} 
  aria-modal="true" 
  role="dialog" 
  tabindex="-1"
>
  <div 
    class="modal-overlay fixed inset-0 bg-black/60 backdrop-blur-lg transition-opacity duration-300" 
    on:click={onClose}
  ></div>
  <div 
    class={`modal-content glass-card relative w-full mx-auto animate-fadeInUp ${sizeClasses[size]}`}
  >
    {/* Modal Header */}
    <div class="absolute top-0 right-0 pt-4 pr-4">
      <button 
        class="absolute top-5 right-5 btn btn-glass bg-transparent text-primary hover:text-accent focus-visible:ring-2 focus-visible:ring-primary focus:outline-none transition-all" 
        aria-label="Fermer la modale" 
        on:click={onClose}
      >
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          class="h-7 w-7" 
          fill="none" 
          viewBox="0 0 24 24" 
          stroke="currentColor"
        >
          <path 
            stroke-linecap="round" 
            stroke-linejoin="round" 
            stroke-width="2" 
            d="M6 18L18 6M6 6l12 12" 
          />
        </svg>
      </button>
    </div>
    
    {/* Modal Body - Slot for content */}
    <div class="modal-body">
      {/* Title is now usually part of the slotted content for better layout control */}
      <slot />
    </div>
  </div>
</div>

{/* Minimal styles - relying on utility classes now */}
<style>
  .modal.is-open {
    opacity: 1;
    visibility: visible;
  }
  .modal.is-open .modal-content {
    transform: scale(1);
  }

  .modal-content {
    /* @apply glass rounded-xl shadow-2xl relative max-h-[90vh] overflow-y-auto transition-transform duration-300 ease-in-out scale-95 p-6 sm:p-8; Removed @apply glass */
  }
  .modal.is-open .modal-content {
    transform: scale(1);
  }

  .modal-content.size-full {
    @apply max-w-6xl w-11/12; /* Kept size class separate */
  }
  
  .close-modal {
    @apply absolute top-3 right-3 rounded-md p-1 text-[var(--color-text-muted)] hover:text-[var(--color-text-base)] hover:bg-white/10 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-cyan-500/75 transition-all;
  }

  /* Custom scrollbar for modal content */
  .modal-content::-webkit-scrollbar {
    width: 8px;
  }
  .modal-content::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 10px;
  }
  .modal-content::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 10px;
  }
  .modal-content::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.3);
  }
</style>

<script>
  import { openModal, closeModal, trapFocus } from '../../lib/utils/modal';

  let lastFocusedElement = null;

  function initializeModalListeners() {
    document.body.addEventListener('click', (e) => {
      const target = e.target;
      // Modal trigger
      const triggerButton = target.closest('[data-modal-target]');
      if (triggerButton) {
        const modalId = triggerButton.getAttribute('data-modal-target');
        const modal = document.getElementById(modalId);
        lastFocusedElement = document.activeElement;
        openModal(modal);
        // Focus trap
        if (modal) trapFocus(modal);
      }
      // Modal close (button or overlay)
      const closeButton = target.closest('.close-modal');
      const modalOverlay = target.closest('.modal');
      if (closeButton) {
        const modalToClose = closeButton.closest('.modal');
        closeModal(modalToClose);
        if (lastFocusedElement && typeof lastFocusedElement.focus === 'function') {
          lastFocusedElement.focus();
        }
      } else if (modalOverlay && target === modalOverlay) {
        closeModal(modalOverlay);
        if (lastFocusedElement && typeof lastFocusedElement.focus === 'function') {
          lastFocusedElement.focus();
        }
      }
    }, { capture: false });
    // Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        const openModalElement = document.querySelector('.modal.is-open');
        if (openModalElement) {
          closeModal(openModalElement);
          if (lastFocusedElement && typeof lastFocusedElement.focus === 'function') {
            lastFocusedElement.focus();
          }
        }
      }
    });
  }
  if (typeof window !== 'undefined') {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeModalListeners);
    } else {
      initializeModalListeners();
    }
  }
</script>