---
interface Props {
  id: string;
  title: string;
  size?: 'default' | 'full';
}

const { id, title, size = 'default' } = Astro.props;

const sizeClasses = {
  default: 'max-w-2xl',
  full: 'max-w-6xl w-11/12',
};
---

<div 
  id={id} 
  class="modal fixed inset-0 z-50 flex items-center justify-center p-4 opacity-0 invisible transition-opacity duration-300 ease-in-out bg-black/60 backdrop-blur-sm"
  role="dialog" 
  aria-modal="true"
  aria-labelledby={`${id}-title`}
  aria-hidden="true" 
>
  {/* Modal Content - Apply .glass class directly */}
  <div class={`modal-content glass rounded-xl shadow-2xl relative max-h-[90vh] overflow-y-auto transition-transform duration-300 ease-in-out scale-95 p-6 sm:p-8 ${sizeClasses[size]}`}>
    {/* Modal Header */}
    <div class="absolute top-0 right-0 pt-4 pr-4">
      <button 
        type="button"
        class="close-modal rounded-md p-1 text-gray-400 hover:text-white hover:bg-white/10 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-cyan-500 transition-all"
        aria-label="Close modal"
      >
        <span class="sr-only">Close</span>
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    
    {/* Modal Body - Slot for content */}
    <div class="modal-body">
      {/* Title is now usually part of the slotted content for better layout control */}
      {/* <h2 id={`${id}-title`} class="text-2xl font-bold text-white mb-6">{title}</h2> */} 
      <slot />
    </div>
  </div>
</div>

{/* Minimal styles - relying on utility classes now */}
<style>
  .modal.is-open {
    opacity: 1;
    visibility: visible;
  }
  .modal.is-open .modal-content {
    transform: scale(1);
  }

  .modal-content {
    /* @apply glass rounded-xl shadow-2xl relative max-h-[90vh] overflow-y-auto transition-transform duration-300 ease-in-out scale-95 p-6 sm:p-8; Removed @apply glass */
  }
  .modal.is-open .modal-content {
    transform: scale(1);
  }

  .modal-content.size-full {
    @apply max-w-6xl w-11/12; /* Kept size class separate */
  }
  
  .close-modal {
    @apply absolute top-3 right-3 rounded-md p-1 text-[var(--color-text-muted)] hover:text-[var(--color-text-base)] hover:bg-white/10 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-cyan-500/75 transition-all;
  }

  /* Custom scrollbar for modal content */
  .modal-content::-webkit-scrollbar {
    width: 8px;
  }
  .modal-content::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 10px;
  }
  .modal-content::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 10px;
  }
  .modal-content::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.3);
  }
</style>

<script>
  function openModal(modalElement) {
    if (!modalElement) return;
    modalElement.classList.add('is-open');
    modalElement.setAttribute('aria-hidden', 'false');
    document.body.style.overflow = 'hidden';
  }

  function closeModal(modalElement) {
    if (!modalElement) return;
    modalElement.classList.remove('is-open');
    modalElement.setAttribute('aria-hidden', 'true');
    // Check if any other modals are open before restoring scroll
    const anyModalOpen = document.querySelector('.modal.is-open');
    if (!anyModalOpen) {
      document.body.style.overflow = '';
    }
  }

  // Use a single event listener setup after DOM loaded
  function initializeModalListeners() {
      document.body.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        
        // Handle modal triggers
        const triggerButton = target.closest('[data-modal-target]');
        if (triggerButton) {
          const modalId = triggerButton.getAttribute('data-modal-target');
          const modal = document.getElementById(modalId);
          openModal(modal);
        }
        
        // Handle modal close buttons OR click outside modal content
        const closeButton = target.closest('.close-modal');
        const modalOverlay = target.closest('.modal');
        
        if (closeButton) {
            const modalToClose = closeButton.closest('.modal');
            closeModal(modalToClose);
        } else if (modalOverlay && target === modalOverlay) { // Clicked on overlay, not content
            closeModal(modalOverlay);
        } 
      }, { capture: false }); // Use bubble phase

      // Handle escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          const openModalElement = document.querySelector('.modal.is-open');
          if (openModalElement) {
            closeModal(openModalElement);
          }
        }
      });
  }
  
  // Run initialization script
  if (typeof window !== 'undefined') { // Ensure runs only in browser
    if (document.readyState === 'loading') { // HandleDOMContentLoaded equivalent for modules
      document.addEventListener('DOMContentLoaded', initializeModalListeners);
    } else {
      initializeModalListeners(); // Already loaded
    }
  }
</script> 