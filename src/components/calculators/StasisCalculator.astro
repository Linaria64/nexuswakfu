---
interface Props {
  baseHp: number;
  bossDisplayId: string;
  targetHpElementId?: string;
  resistances?: {
    water: number;
    earth: number;
    air: number;
    fire: number;
  };
  maxStasis?: number;
}

const { 
  bossDisplayId, 
  baseHp, 
  targetHpElementId,
  resistances = { water: 0, earth: 0, air: 0, fire: 0 }, 
  maxStasis = 1000 
} = Astro.props;
---

<div class="stasis-calculator glass" data-boss-id={bossDisplayId} data-base-hp={baseHp}>
  <h4 class="calculator-title text-lg font-semibold mb-5 flex items-center">
    <span class="mr-2 text-gradient-primary">Calculateur de Stase</span>
    <span class="h-px flex-grow bg-gradient-to-r from-[var(--color-primary)/30] to-transparent"></span>
  </h4>
  
  <div class="element-inputs">
    <div class="element-input">
      <label for={`water-${bossDisplayId}`} class="element-label water">
        <span class="element-icon"></span>
        Eau
      </label>
      <input 
        type="number" 
        id={`water-${bossDisplayId}`}
        class="damage-input input-glass"
        min="0" 
        value="0"
        data-resistance={resistances.water}
        data-element="water"
      />
      <span class="resistance-value">
        {resistances.water > 0 ? '+' : ''}{resistances.water}%
      </span>
    </div>

    <div class="element-input">
      <label for={`earth-${bossDisplayId}`} class="element-label earth">
        <span class="element-icon"></span>
        Terre
      </label>
      <input 
        type="number" 
        id={`earth-${bossDisplayId}`}
        class="damage-input input-glass"
        min="0" 
        value="0"
        data-resistance={resistances.earth}
        data-element="earth"
      />
      <span class="resistance-value">
        {resistances.earth > 0 ? '+' : ''}{resistances.earth}%
      </span>
    </div>

    <div class="element-input">
      <label for={`air-${bossDisplayId}`} class="element-label air">
        <span class="element-icon"></span>
        Air
      </label>
      <input 
        type="number" 
        id={`air-${bossDisplayId}`}
        class="damage-input input-glass"
        min="0" 
        value="0"
        data-resistance={resistances.air}
        data-element="air"
      />
      <span class="resistance-value">
        {resistances.air > 0 ? '+' : ''}{resistances.air}%
      </span>
    </div>

    <div class="element-input">
      <label for={`fire-${bossDisplayId}`} class="element-label fire">
        <span class="element-icon"></span>
        Feu
      </label>
      <input 
        type="number" 
        id={`fire-${bossDisplayId}`}
        class="damage-input input-glass"
        min="0" 
        value="0"
        data-resistance={resistances.fire}
        data-element="fire"
      />
      <span class="resistance-value">
        {resistances.fire > 0 ? '+' : ''}{resistances.fire}%
      </span>
    </div>
  </div>

  <div class="stasis-level-selector mt-4 mb-6">
    <label for={`${bossDisplayId}-stasis-slider`} class="block mb-2 font-semibold">
      Niveau de Stase: <span id={`${bossDisplayId}-stasis-level-display`}>2</span>
    </label>
    <input 
      type="range" 
      id={`${bossDisplayId}-stasis-slider`} 
      min="1" 
      max="10" 
      value="2" 
      class="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer"
    />
    <div class="flex justify-between text-xs mt-1 text-gray-400">
      <span>1</span>
      <span>2</span>
      <span>3</span>
      <span>4</span>
      <span>5</span>
      <span>6</span>
      <span>7</span>
      <span>8</span>
      <span>9</span>
      <span>10</span>
    </div>
  </div>

  <div class="results-section">
    <div class="total-damage">
      <span class="label">Dégâts totaux:</span>
      <span id={`total-damage-${bossDisplayId}`} class="value">0</span>
    </div>

    <div class="stasis-progress">
      <div class="progress-track">
        <div id={`stasis-bar-${bossDisplayId}`} class="progress-bar"></div>
      </div>
      <div class="progress-labels">
        <span>0</span>
        <span>{maxStasis}</span>
      </div>
    </div>

    <div class="stasis-status">
      <span class="label">État:</span>
      <span id={`stasis-status-${bossDisplayId}`} class="status">Pas en stase</span>
    </div>
  </div>
</div>

<style>
  .stasis-calculator {
    margin-top: 1.5rem;
    padding: 1.5rem;
    border-radius: 1rem;
    border: 1px solid rgba(255, 255, 255, 0.1);
    position: relative;
    overflow: hidden;
  }

  .stasis-calculator::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at bottom right, rgba(var(--color-primary), 0.15) 0%, transparent 70%);
    z-index: -1;
  }

  .calculator-title {
    text-shadow: 0 0 10px hsla(var(--color-primary), 0.5);
  }

  .element-inputs {
    display: grid;
    gap: 0.75rem;
    margin-bottom: 1.5rem;
  }

  .element-input {
    display: grid;
    grid-template-columns: auto 1fr auto;
    align-items: center;
    gap: 0.75rem;
    padding: 0.5rem;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 0.5rem;
    border: 1px solid rgba(255, 255, 255, 0.05);
    transition: all 0.3s ease;
  }

  .element-input:hover {
    background: rgba(var(--color-primary), 0.1);
    border-color: hsla(var(--color-primary), 0.3);
    transform: translateY(-2px);
  }

  .element-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
    min-width: 80px;
  }

  .element-icon {
    width: 24px;
    height: 24px;
    border-radius: 0.25rem;
  }

  .water .element-icon {
    background: var(--color-neon-blue);
    box-shadow: 0 0 10px var(--color-neon-blue);
  }

  .earth .element-icon {
    background: var(--color-neon-green);
    box-shadow: 0 0 10px var(--color-neon-green);
  }

  .air .element-icon {
    background: var(--color-neon-purple);
    box-shadow: 0 0 10px var(--color-neon-purple);
  }

  .fire .element-icon {
    background: var(--color-neon-red);
    box-shadow: 0 0 10px var(--color-neon-red);
  }

  .damage-input {
    font-family: 'Orbitron', sans-serif;
    width: 100%;
  }

  .resistance-value {
    font-family: 'Orbitron', sans-serif;
    font-size: 0.875rem;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    background: rgba(0, 0, 0, 0.3);
  }

  .results-section {
    background: rgba(0, 0, 0, 0.2);
    border-radius: 0.75rem;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    border: 1px solid rgba(255, 255, 255, 0.05);
  }

  .total-damage {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 1.25rem;
  }

  .total-damage .value {
    font-family: 'Orbitron', sans-serif;
    font-weight: 600;
    color: hsl(var(--color-primary));
  }

  .stasis-progress {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .progress-track {
    height: 8px;
    background: rgba(0, 0, 0, 0.3);
    border-radius: 4px;
    overflow: hidden;
  }

  .progress-bar {
    height: 100%;
    width: 0;
    background: linear-gradient(90deg, hsl(var(--color-primary)), hsl(var(--color-secondary)));
    transition: width 0.3s ease;
  }

  .progress-labels {
    display: flex;
    justify-content: space-between;
    font-size: 0.875rem;
    color: hsl(var(--color-primary));
    font-family: 'Orbitron', sans-serif;
  }

  .stasis-status {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .status {
    font-weight: 600;
  }

  .status.active {
    color: var(--color-neon-green);
    text-shadow: 0 0 10px rgba(16, 185, 129, 0.5);
  }

  @media (min-width: 768px) {
    .element-inputs {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 0.75rem;
    }
  }

  /* Styles pour le slider de niveau de stase */
  input[type=range] {
    appearance: none;
    height: 8px;
    border-radius: 10px;
    background: linear-gradient(90deg, rgba(6, 182, 212, 0.3), rgba(6, 182, 212, 0.8));
    outline: none;
  }

  input[type=range]::-webkit-slider-thumb {
    appearance: none;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: var(--color-neon-blue);
    box-shadow: 0 0 10px var(--color-neon-blue);
    cursor: pointer;
    transition: all 0.2s ease;
  }

  input[type=range]::-webkit-slider-thumb:hover {
    transform: scale(1.2);
  }
</style>

<script define:vars={{ bossDisplayId, baseHp, targetHpElementId, resistances, maxStasis }}>
  // Définir les multiplicateurs de stase par niveau
  const stasisModifiers = [
    { level: 1, hpMod: 70, dmgMod: 60 },
    { level: 2, hpMod: 100, dmgMod: 100 },
    { level: 3, hpMod: 140, dmgMod: 130 },
    { level: 4, hpMod: 210, dmgMod: 190 },
    { level: 5, hpMod: 310, dmgMod: 200 },
    { level: 6, hpMod: 440, dmgMod: 210 },
    { level: 7, hpMod: 600, dmgMod: 230 },
    { level: 8, hpMod: 660, dmgMod: 240 },
    { level: 9, hpMod: 880, dmgMod: 250 },
    { level: 10, hpMod: 1100, dmgMod: 260 }
  ];

  // Wait for document to be fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    // Get all required elements
    const inputs = document.querySelectorAll(`input[id^="${bossDisplayId}"][class="damage-input input-glass"]`);
    const totalDamageElement = document.getElementById(`total-damage-${bossDisplayId}`);
    const stasisBar = document.getElementById(`stasis-bar-${bossDisplayId}`);
    const stasisStatus = document.getElementById(`stasis-status-${bossDisplayId}`);
    
    // Get stasis level slider and display
    const stasisSlider = document.getElementById(`${bossDisplayId}-stasis-slider`);
    const stasisLevelDisplay = document.getElementById(`${bossDisplayId}-stasis-level-display`);
    
    // Get the HP element that needs to be updated
    const hpElement = document.getElementById(targetHpElementId);
    const calculator = document.querySelector(`.stasis-calculator[data-boss-id="${bossDisplayId}"]`);
    
    // Save base HP value for calculations
    let baseHpValue = baseHp;
    if (calculator && calculator.dataset.baseHp) {
      baseHpValue = parseInt(calculator.dataset.baseHp);
    }

    // Calculate total damage considering resistances
    function calculateTotalDamage() {
      let total = 0;
      
      inputs.forEach(input => {
        const damage = parseInt(input.value) || 0;
        const resistance = parseInt(input.dataset.resistance) || 0;
        
        // Apply resistance correctly (reduce damage by resistance percentage)
        const effectiveDamage = damage * (1 - resistance / 100);
        
        total += Math.max(0, effectiveDamage); // Ensure no negative damage
      });

      return Math.floor(total);
    }

    // Update HP and spell damages based on current stasis level
    function updateBossStats(stasisLevel) {
      // Get modifier data for this level
      const modData = stasisModifiers.find(mod => mod.level === stasisLevel) || stasisModifiers[1];
      
      // Update boss HP if element exists
      if (hpElement && baseHpValue) {
        const modifiedHp = Math.round(baseHpValue * (modData.hpMod / 100));
        hpElement.textContent = modifiedHp.toLocaleString();
      }
      
      // Find all spell elements that could be affected by stasis level
      const spellElements = document.querySelectorAll(`.${bossDisplayId} .spell-damage[data-base-damage]`);
      
      spellElements.forEach(element => {
        const baseDamage = parseInt(element.dataset.baseDamage) || 0;
        if (baseDamage) {
          const modifiedDamage = Math.round(baseDamage * (modData.dmgMod / 100));
          const bonus = modifiedDamage - baseDamage;
          
          // Update the display components
          const baseDisplay = element.querySelector('.base-damage');
          const bonusDisplay = element.querySelector('.stasis-bonus');
          const totalDisplay = element.querySelector('.total-damage');
          
          if (baseDisplay) baseDisplay.textContent = baseDamage.toLocaleString();
          if (bonusDisplay) {
            bonusDisplay.textContent = ` (+${bonus.toLocaleString()})`;
            bonusDisplay.classList.remove('hidden');
          }
          if (totalDisplay) {
            totalDisplay.textContent = ` → ${modifiedDamage.toLocaleString()}`;
          }
        }
      });

      // Update spell descriptions with damage values
      const spellDescriptions = document.querySelectorAll(`.${bossDisplayId} .spell-description[data-base-damage]`);
      spellDescriptions.forEach(element => {
        const baseDamage = parseInt(element.dataset.baseDamage) || 0;
        if (baseDamage) {
          const modifiedDamage = Math.round(baseDamage * (modData.dmgMod / 100));
          
          // Store original text if not already stored
          if (!element.dataset.originalText) {
            element.dataset.originalText = element.textContent;
          }
          
          // Replace damage number with modified value and bonus
          const originalText = element.dataset.originalText;
          const bonus = modifiedDamage - baseDamage;
          const updatedText = originalText.replace(/(\d[\d\s,.]*)/,
            `<span class="font-mono font-semibold">
              <span class="text-white">${baseDamage.toLocaleString()}</span>
              <span class="text-emerald-400">(+${bonus.toLocaleString()})</span>
              <span class="text-cyan-400">→ ${modifiedDamage.toLocaleString()}</span>
            </span>`
          );
          
          element.innerHTML = updatedText;
        }
      });
    }

    // Update UI with calculated values
    function updateUI() {
      const totalDamage = calculateTotalDamage();
      const stasisPercentage = Math.min((totalDamage / maxStasis) * 100, 100);
      const currentStasisLevel = stasisSlider ? parseInt(stasisSlider.value) : 2;
      
      // Update total damage display
      if (totalDamageElement) {
        totalDamageElement.textContent = totalDamage.toLocaleString();
      }
      
      // Update progress bar
      if (stasisBar) {
        stasisBar.style.width = `${stasisPercentage}%`;
      }
      
      // Update stasis status text and style
      if (stasisStatus) {
        if (totalDamage >= maxStasis) {
          stasisStatus.textContent = "En stase !";
          stasisStatus.classList.add("active");
        } else {
          stasisStatus.textContent = "Pas en stase";
          stasisStatus.classList.remove("active");
        }
      }
      
      // Update boss stats based on current stasis level
      updateBossStats(currentStasisLevel);
    }

    // Add event listeners to all damage inputs
    if (inputs) {
      inputs.forEach(input => {
        input.addEventListener("input", updateUI);
      });
    }
    
    // Add event listener to stasis level slider
    if (stasisSlider && stasisLevelDisplay) {
      stasisSlider.addEventListener("input", () => {
        const level = parseInt(stasisSlider.value);
        stasisLevelDisplay.textContent = level;
        
        // Wait a small amount of time to ensure DOM updates
        setTimeout(() => {
          updateUI();
          
          // Immediately update boss stats with new stasis level
          updateBossStats(level);
          
          console.log(`Stasis level changed to ${level}, damage modifier: ${stasisModifiers.find(mod => mod.level === level)?.dmgMod}%`);
        }, 50);
      });
    }

    // Listen for custom events that might be triggered by the BossDisplay component
    document.addEventListener('boss-level-changed', function(event) {
      if (event.detail && event.detail.bossDisplayId === bossDisplayId) {
        // When the level changes, update the UI with the new level data
        if (event.detail.newLevelData && event.detail.newLevelData.hp) {
          baseHpValue = event.detail.newLevelData.hp;
          if (calculator) {
            calculator.dataset.baseHp = baseHpValue.toString();
          }
        }
        
        if (event.detail.targetHpElementId) {
          const newHpElement = document.getElementById(event.detail.targetHpElementId);
          if (newHpElement) {
            hpElement = newHpElement;
          }
        }
        
        setTimeout(updateUI, 50); // Small delay to ensure DOM is updated
      }
    });

    // Initialize UI
    updateUI();
  });
</script> 