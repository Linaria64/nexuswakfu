---
import { Image } from 'astro:assets';
import { getDifficultyInfo, getPlayersText } from '../../utils/dungeonUtils';
import type { CollectionEntry } from 'astro:content';

interface Props {
  dungeon: CollectionEntry<'donjons'>;
  modalId: string;
}

const { dungeon, modalId } = Astro.props;
const { data } = dungeon;

const difficultyInfo = getDifficultyInfo(data.difficulty);
const playersText = getPlayersText(data.players, data.playersCount);

// Handle potential missing images
const iconSrc = data.icon?.src ?? '/images/donjons/default-icon.png';
const iconAlt = data.icon?.alt ?? `Icône du donjon ${data.name}`;
const imageSrc = data.image?.src ?? '/images/donjons/default-banner.jpg';
const imageAlt = data.image?.alt ?? `Bannière du donjon ${data.name}`;
---

<div 
  id={modalId}
  class="modal fixed inset-0 z-50 flex items-center justify-center p-4 opacity-0 pointer-events-none transition-opacity duration-300 ease-in-out"
  aria-labelledby={`modal-title-${modalId}`}
  role="dialog"
  aria-modal="true"
  tabindex="-1"
>
  <div class="modal-backdrop fixed inset-0 bg-black bg-opacity-80 backdrop-blur-sm" data-modal-close></div>
  
  <div class="modal-content bg-gray-900/95 border border-purple-900/50 rounded-xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-y-auto relative z-10 animate-modal-scale">
    <!-- Close button -->
    <button 
      class="absolute top-4 right-4 p-2 rounded-full bg-gray-800/70 text-gray-400 hover:text-white hover:bg-primary/60 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary transform hover:rotate-90"
      data-modal-close
      aria-label="Fermer"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
    
    <div class="p-0 md:p-0">
      <!-- Header avec image de fond et overlay -->
      <div class="relative">
        <!-- Image de fond avec overlay -->
        <div class="relative h-64 w-full overflow-hidden rounded-t-xl">
          <div class="absolute inset-0 bg-gradient-to-b from-gray-900/70 via-gray-900/50 to-gray-900/90 z-10"></div>
          <Image
            src={imageSrc}
            alt={imageAlt}
            width={1200}
            height={400}
            class="w-full h-full object-cover object-center"
            format="webp"
            loading="lazy"
          />
          
          <!-- Contenu superposé sur l'image -->
          <div class="absolute inset-0 z-20 flex flex-col justify-center items-center text-center p-6">
            {data.icon && (
              <Image
                src={iconSrc}
                alt={iconAlt}
                width={100}
                height={100}
                class="rounded-full mb-4 shadow-lg border-4 border-primary/30 bg-gray-900/40"
                format="webp"
                loading="lazy"
              />
            )}
            
            <h2 id={`modal-title-${modalId}`} class="text-3xl md:text-4xl font-bold text-white drop-shadow-md mb-2">
              {data.name}
            </h2>
          </div>
        </div>
        
        <!-- Badges d'informations dans une barre en dessous de l'image -->
        <div class="bg-gray-800/80 backdrop-blur-md py-4 px-6 border-t border-b border-gray-700/50">
          <div class="flex flex-wrap gap-3 justify-center">
            <span class="badge bg-blue-900/80 text-blue-200 border border-blue-700/50 px-3 py-1 rounded-full text-xs flex items-center gap-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
              Niveau {data.level}
            </span>
            <span class={`badge ${difficultyInfo.bgColor} ${difficultyInfo.textColor} border px-3 py-1 rounded-full text-xs flex items-center gap-1`}>
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
              </svg>
              {difficultyInfo.label}
            </span>
            <span class="badge bg-purple-900/80 text-purple-200 border border-purple-700/50 px-3 py-1 rounded-full text-xs flex items-center gap-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
              </svg>
              {playersText}
            </span>
            
            {data.playersCount && (
              <span class="badge bg-indigo-900/80 text-indigo-200 border border-indigo-700/50 px-3 py-1 rounded-full text-xs flex items-center gap-1">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
                </svg>
                {data.playersCount} joueurs
              </span>
            )}
            
            {data.rooms && (
              <span class="badge bg-pink-900/80 text-pink-200 border border-pink-700/50 px-3 py-1 rounded-full text-xs flex items-center gap-1">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                </svg>
                {data.rooms} salle{data.rooms > 1 ? 's' : ''}
              </span>
            )}
            <span class="badge bg-green-900/80 text-green-200 border border-green-700/50 px-3 py-1 rounded-full text-xs flex items-center gap-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
              {data.region}
            </span>
          </div>
        </div>
      </div>
      
      <!-- Description -->
      {data.description && (
        <div class="px-6 md:px-8 pt-6 pb-2">
          <p class="text-base text-gray-300 leading-relaxed">
            {data.description}
          </p>
        </div>
      )}
      
      <!-- Main content grid -->
      <div class="grid grid-cols-1 gap-6 mx-6 md:mx-8 my-6">
        <!-- Bosses -->
        {data.bosses && data.bosses.length > 0 && (
          <div class="glass-card rounded-xl border border-purple-800/30 shadow-lg overflow-hidden">
            <div class="bg-gradient-to-r from-purple-900/60 to-blue-900/60 py-3 px-4 border-b border-purple-700/30">
              <h3 class="text-xl font-bold text-white flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3zM6 8a2 2 0 11-4 0 2 2 0 014 0zM16 18v-3a5.972 5.972 0 00-.75-2.906A3.005 3.005 0 0119 15v3h-3zM4.75 12.094A5.973 5.973 0 004 15v3H1v-3a3 3 0 013.75-2.906z" />
                </svg>
                Boss
              </h3>
            </div>
            <div class="p-4 space-y-6">
              {data.bosses.map(boss => (
                <div class="flex flex-col bg-gray-800/30 rounded-lg p-4 border border-gray-700/30 hover:border-primary/30 transition-colors duration-300">
                  <div class="flex items-start gap-4">
                    {boss.bossImage && (
                      <div class="flex-shrink-0 w-16 h-16 md:w-20 md:h-20 relative rounded-md overflow-hidden ring-2 ring-primary/20">
                        <Image
                          src={boss.bossImage.src}
                          alt={`Image de ${boss.name}`}
                          class="object-cover w-full h-full"
                          width={80} height={80}
                          format="webp"
                          loading="lazy"
                        />
                      </div>
                    )}
                    
                    <div class="flex-grow">
                      <h4 class="text-lg font-semibold text-primary drop-shadow-sm">{boss.name}</h4>
                      {boss.description && <p class="text-sm text-gray-300 mt-1">{boss.description}</p>}
                    </div>
                  </div>
                  
                  <div class="mt-4 text-sm grid grid-cols-1 md:grid-cols-2 gap-3 pt-3 border-t border-gray-700/30">
                    {boss.hp && (
                      <div class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                          <path fill-rule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clip-rule="evenodd" />
                        </svg>
                        <span class="text-primary font-medium mr-1">PV :</span> 
                        <span class="text-gray-300">{boss.hp.toLocaleString()}</span>
                      </div>
                    )}
                    
                    {boss.masteries && (
                      <div class="flex flex-col">
                        <span class="text-primary font-medium flex items-center mb-1">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z" clip-rule="evenodd" />
                          </svg>
                          Maîtrises :
                        </span>
                        <div class="flex flex-wrap gap-1">
                          {Object.entries(boss.masteries).map(([key, value]) => (
                            <span class="text-xs px-2 py-0.5 rounded bg-gray-700/60 text-gray-200 border border-gray-600/50">
                              {key.charAt(0).toUpperCase() + key.slice(1)}: {value}%
                            </span>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    {boss.resistances && (
                      <div class="flex flex-col">
                        <span class="text-primary font-medium flex items-center mb-1">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 text-blue-400" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd" />
                          </svg>
                          Résistances :
                        </span>
                        <div class="flex flex-wrap gap-1">
                          {Object.entries(boss.resistances).map(([key, value]) => (
                            <span class="text-xs px-2 py-0.5 rounded bg-gray-700/60 text-gray-200 border border-gray-600/50">
                              {key.charAt(0).toUpperCase() + key.slice(1)}: {value}%
                            </span>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
        
        <!-- Mechanics & Strategy -->
        <div class="glass-card rounded-xl border border-purple-800/30 shadow-lg overflow-hidden">
          {(data.mechanics && data.mechanics.length > 0) || data.strategy ? (
            <div class="bg-gradient-to-r from-blue-900/60 to-purple-900/60 py-3 px-4 border-b border-purple-700/30">
              <h3 class="text-xl font-bold text-white flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd" />
                </svg>
                Tactiques & Stratégies
              </h3>
            </div>
          ) : null}
          <div class="p-4">
            {data.mechanics && data.mechanics.length > 0 && (
              <div class="mb-5">
                <h4 class="text-base font-semibold text-primary mb-3 flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                  </svg>
                  Mécaniques
                </h4>
                <ul class="space-y-3 list-none p-0">
                  {data.mechanics.map(mechanic => (
                    <li class="bg-gray-800/30 rounded-lg p-3 border-l-4 border-primary/70">
                      <h5 class="font-medium text-primary text-sm">{mechanic.name}</h5>
                      <p class="text-xs text-gray-300 mt-1">{mechanic.description}</p>
                    </li>
                  ))}
                </ul>
              </div>
            )}
            
            {data.strategy && (
              <div>
                <h4 class="text-base font-semibold text-primary mb-3 flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" viewBox="0 0 20 20" fill="currentColor">
                    <path d="M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a2 2 0 012-2h12a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-4z" />
                  </svg>
                  Stratégie
                </h4>
                <div class="bg-gray-800/30 rounded-lg p-4 border border-gray-700/30">
                  <p class="whitespace-pre-line text-sm text-gray-300 leading-relaxed">{data.strategy}</p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
      
      <!-- Additional Sections avec style amélioré -->
      <div class="grid grid-cols-1 gap-6 mx-6 md:mx-8 mb-8">
        <!-- Section Stèles et Monstres alignés verticalement -->
          <!-- Stèles -->
          {data.steles && data.steles.length > 0 && (
            <div class="glass-card rounded-xl border border-purple-800/30 shadow-lg overflow-hidden h-full">
              <div class="bg-gradient-to-r from-green-900/60 to-blue-900/60 py-3 px-4 border-b border-green-700/30">
                <h3 class="text-xl font-bold text-white flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                    <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z" />
                  </svg>
                  Stèles
                </h3>
              </div>
              <div class="p-4">
                <ul class="grid grid-cols-1 gap-3 list-none p-0">
                  {data.steles.map(stele => (
                    <li class="bg-gray-800/30 rounded-lg p-3 border border-gray-700/30 hover:border-green-700/30 transition-colors duration-300">
                      <div class="flex items-start">
                        <div class="bg-green-900/50 text-green-300 rounded-full p-2 mr-3">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                          </svg>
                        </div>
                        <div class="flex-1">
                          <h4 class="font-medium text-primary text-sm">Stèle {stele.name}</h4>
                          <p class="text-xs text-gray-300 mt-1">{stele.description}</p>
                        </div>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          )}
          

        
        <!-- Récompenses avec design amélioré -->
        {data.rewards && data.rewards.length > 0 && (
          <div class="glass-card rounded-xl border border-purple-800/30 shadow-lg overflow-hidden">
            <div class="bg-gradient-to-r from-yellow-800/60 to-amber-800/60 py-3 px-4 border-b border-yellow-700/30">
              <h3 class="text-xl font-bold text-white flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M5 5a3 3 0 015-2.236A3 3 0 0114.83 6H16a2 2 0 110 4h-5V9a1 1 0 10-2 0v1H4a2 2 0 110-4h1.17A3 3 0 015 5zm4 1V5a1 1 0 10-1 1h1zm3 0a1 1 0 10-1-1v1h1z" clip-rule="evenodd" />
                  <path d="M9 11H3v5a2 2 0 002 2h4v-7zM11 18h4a2 2 0 002-2v-5h-6v7z" />
                </svg>
                Récompenses
              </h3>
            </div>
            <div class="p-4">

              <!-- Séparer les récompenses en deux catégories -->
              {(() => {
                // Mappage direct d'icônes et couleurs par nom d'équipement
                const equipmentIconMap = {
                  "Amulette Michou": { icon: "A", color: "text-red-500" },
                  "Anneau Vital": { icon: "V", color: "text-amber-400" },
                  // Ajouter d'autres équipements au besoin
                };
                
                const equipments = data.rewards.filter(r => r.type === 'equipment');
                const resources = data.rewards.filter(r => r.type === 'resource');
                return (
                  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* Colonne Équipements */}
                    <div class="space-y-4">
                      <h4 class="font-bold text-amber-200 text-lg border-b border-amber-700/30 pb-2 flex items-center">
                        <span class="mr-2">🛡️</span> Équipements
                      </h4>
                      {equipments.length === 0 ? (
                        <p class="text-sm text-gray-400 italic">Aucun équipement disponible</p>
                      ) : (
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
                          {equipments.map((reward, index) => {
                            const equipModalId = `equip-details-${modalId}-${index}`;
                            return (
                              <>
                                <div class="equipment-wrapper relative">
                                  <button 
                                    class="equipment-toggle equipment-item text-left bg-gray-800/30 p-3 rounded-lg border border-yellow-800/30 hover:border-yellow-600/30 hover:bg-yellow-900/10 transition-colors duration-300 flex items-center w-full"
                                    data-target={equipModalId}
                                  >
                                    <div class="w-10 h-10 rounded-full mr-3 flex-shrink-0 flex items-center justify-center bg-gradient-to-br from-amber-900/50 to-yellow-800/40 border border-amber-700/30 overflow-hidden">
                                      {reward.iconImage ? (
                                        <img src={reward.iconImage} alt={`Icône ${reward.name}`} class="w-full h-full object-cover" />
                                      ) : reward.icon ? (
                                        <span class={`text-sm font-bold ${reward.iconColor || 'text-amber-300'}`}>{reward.icon}</span>
                                      ) : equipmentIconMap[reward.name] ? (
                                        <span class={`text-sm font-bold ${equipmentIconMap[reward.name].color}`}>{equipmentIconMap[reward.name].icon}</span>
                                      ) : (
                                        <span class="text-amber-300">🛡️</span>
                                      )}
                                    </div>
                                    <div class="flex-1">
                                      <span class="text-sm font-medium text-amber-200 block">{reward.name}</span>
                                      {reward.description && (
                                        <span class="text-xs text-gray-400 mt-1 block">{reward.description}</span>
                                      )}
                                    </div>
                                    <div class="text-amber-400 ml-2">
                                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                      </svg>
                                    </div>
                                  </button>
                                  
                                  {/* Popup détails pour l'équipement */}
                                  <div 
                                    id={equipModalId} 
                                    class="equipment-details hidden absolute z-50 w-80 p-4 bg-gray-900/95 backdrop-blur-md border border-amber-700/50 rounded-lg shadow-xl right-0 top-full mt-2"
                                  >
                                    {/* Image de l'équipement */}
                                    {reward.image && (
                                      <div class="mb-4 overflow-hidden rounded-lg shadow-lg border-2 border-amber-600/50 flex justify-center bg-gradient-to-b from-amber-900/30 to-gray-900/50 p-2">
                                        <img 
                                          src={reward.image} 
                                          alt={`Image de ${reward.name}`} 
                                          class="max-w-full max-h-48 object-contain" 
                                        />
                                      </div>
                                    )}
                                    
                                    {/* Titre */}
                                    <h3 class="text-lg font-bold text-amber-200 mb-2 flex items-center">
                                      <span class="mr-2 bg-gradient-to-br from-amber-900/50 to-yellow-800/40 border border-amber-700/30 rounded-full w-6 h-6 flex items-center justify-center overflow-hidden">
                                        {reward.iconImage ? (
                                          <img src={reward.iconImage} alt={`Icône ${reward.name}`} class="w-full h-full object-cover" />
                                        ) : reward.icon ? (
                                          <span class={`text-xs font-bold ${reward.iconColor || 'text-amber-300'}`}>{reward.icon}</span>
                                        ) : equipmentIconMap[reward.name] ? (
                                          <span class={`text-xs font-bold ${equipmentIconMap[reward.name].color}`}>{equipmentIconMap[reward.name].icon}</span>
                                        ) : (
                                          <span class="text-amber-300">🛡️</span>
                                        )}
                                      </span>
                                      {reward.name}
                                    </h3>
                                    
                                    {/* Description */}
                                    {reward.description && (
                                      <div class="mb-4">
                                        <h4 class="text-sm font-semibold text-amber-300 mb-1">Description :</h4>
                                        <p class="text-sm text-gray-300 italic">"{reward.description}"</p>
                                      </div>
                                    )}
                                    
                                    {/* Statistiques */}
                                    {reward.stats && reward.stats.length > 0 && (
                                      <div class="p-3 bg-amber-950/30 rounded border border-amber-700/20">
                                        <h4 class="text-sm font-semibold text-amber-300 mb-2">Statistiques :</h4>
                                        <ul class="text-sm text-gray-300 space-y-2 pl-1">
                                          {reward.stats.map(stat => (
                                            <li class="flex items-baseline">
                                              <span class="text-amber-400 mr-2">•</span> {stat}
                                            </li>
                                          ))}
                                        </ul>
                                      </div>
                                    )}
                                  </div>
                                </div>
                              </>
                            );
                          })}
                        </div>
                      )}
                    </div>
                    
                    {/* Colonne Ressources */}
                    <div class="space-y-4">
                      <h4 class="font-bold text-amber-200 text-lg border-b border-amber-700/30 pb-2 flex items-center">
                        <span class="mr-2">💎</span> Ressources
                      </h4>
                      {resources.length === 0 ? (
                        <p class="text-sm text-gray-400 italic">Aucune ressource disponible</p>
                      ) : (
                        <div class="grid grid-cols-1 gap-3">
                          {resources.map(reward => (
                            <div class="bg-gray-800/30 p-3 rounded-lg border border-yellow-800/30 hover:border-yellow-600/30 transition-colors duration-300 flex items-center">
                              <div class="w-10 h-10 rounded-full mr-3 flex-shrink-0 flex items-center justify-center text-amber-300 bg-gradient-to-br from-amber-900/50 to-yellow-800/40 border border-amber-700/30">
                                💎
                              </div>
                              <div class="flex-1">
                                <span class="text-sm font-medium text-amber-200 block">{reward.name}</span>
                                {reward.description && (
                                  <span class="text-xs text-gray-400 mt-1 block">{reward.description}</span>
                                )}
                              </div>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                )
              })()}
              </div>
            </div>
          </div>
        )}
      </div>
      
      <!-- Footer Copyright -->
      <div class="py-4 px-6 flex justify-center items-center bg-gradient-to-r from-gray-900/80 to-gray-800/80 border-t border-gray-700/30">
        <span class="text-xs text-gray-400">© NexusWakfu - Guide des donjons</span>
      </div>
    </div>
  </div>
</div>

<style>
  .animate-modal-scale {
    animation: modalScale 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  }
  
  @keyframes modalScale {
    from {
      opacity: 0;
      transform: scale(0.95);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }
  
  .modal-content {
    max-height: 90vh;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: rgba(255, 255, 255, 0.2) transparent;
  }
  
  .modal-content::-webkit-scrollbar {
    width: 8px;
  }
  
  .modal-content::-webkit-scrollbar-track {
    background: transparent;
  }
  
  .modal-content::-webkit-scrollbar-thumb {
    background-color: rgba(255, 255, 255, 0.2);
    border-radius: 20px;
  }
  
  .glass-card {
    background: rgba(30, 41, 59, 0.4);
    backdrop-filter: blur(12px);
  }
  /* Style pour les mini-modals des équipements */
  .equipment-item:hover {
    z-index: 10;
  }
  
  /* Styles pour les popups d'équipement */
  .equipment-wrapper {
    position: relative;
  }
  
  .equipment-toggle {
    cursor: pointer;
  }
  
  .equipment-details {
    position: absolute;
    z-index: 100;
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.5);
    transition: opacity 0.2s, transform 0.2s;
  }
  
  .equipment-details.hidden {
    opacity: 0;
    transform: translateY(10px);
    pointer-events: none;
  }
  
  .equipment-details.block {
    opacity: 1;
    transform: translateY(0);
    pointer-events: auto;
  }
</style>

<script>
  // Script pour gérer l'affichage des détails des équipements
  document.addEventListener('DOMContentLoaded', () => {
    const equipButtons = document.querySelectorAll('.equipment-toggle');
    
    equipButtons.forEach(button => {
      const targetId = button.getAttribute('data-target');
      const target = document.getElementById(targetId);
      
      if (!target) return;
      
      // Montrer/cacher les détails au clic
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        const isVisible = target.classList.contains('block');
        
        // Fermer tous les popups
        document.querySelectorAll('.equipment-details').forEach(popup => {
          popup.classList.remove('block');
          popup.classList.add('hidden');
        });
        
        // Ouvrir celui-ci s'il était fermé
        if (!isVisible) {
          target.classList.remove('hidden');
          target.classList.add('block');
        }
      });
    });
    
    // Fermer les popups quand on clique ailleurs
    document.addEventListener('click', () => {
      document.querySelectorAll('.equipment-details').forEach(popup => {
        popup.classList.remove('block');
        popup.classList.add('hidden');
      });
    });
  });
</script>

