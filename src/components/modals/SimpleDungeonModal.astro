---
import { Image } from 'astro:assets';
import { getDifficultyInfo, getPlayersText } from '../../utils/dungeonUtils';
import type { CollectionEntry } from 'astro:content';

interface Props {
  dungeon: CollectionEntry<'donjons'>;
  modalId: string;
}

const { dungeon, modalId } = Astro.props;
const { data } = dungeon;

const difficultyInfo = getDifficultyInfo(data.difficulty);
const playersText = getPlayersText(data.players, data.playersCount);

// Handle potential missing images
const iconSrc = data.icon?.src ?? '/images/donjons/default-icon.png';
const iconAlt = data.icon?.alt ?? `Icône du donjon ${data.name}`;
const imageSrc = data.image?.src ?? '/images/donjons/default-banner.jpg';
const imageAlt = data.image?.alt ?? `Bannière du donjon ${data.name}`;

// Fonction pour obtenir l'image de la récompense
function getRewardImagePath(reward: any) {
  return reward.image?.src;
}

// Fonction pour mapper le type de récompense à un style et un texte
function getRewardTypeInfo(type: string | undefined) {
  switch (type?.toLowerCase()) {
    case 'equipment':
      return { text: 'Équipement', style: 'bg-blue-500/20 border-blue-500/50', textClass: 'text-blue-300' };
    case 'resource':
      return { text: 'Ressource', style: 'bg-green-500/20 border-green-500/50', textClass: 'text-green-300' };
    case 'cosmetic':
      return { text: 'Cosmétique', style: 'bg-purple-500/20 border-purple-500/50', textClass: 'text-purple-300' };
    case 'token':
         return { text: 'Jeton', style: 'bg-yellow-500/20 border-yellow-500/50', textClass: 'text-yellow-300' };
    default:
      return { text: 'Récompense', style: 'bg-gray-800/50 border-gray-500/50', textClass: 'text-gray-300' };
  }
}
---

<div 
  id={modalId}
  class="dungeon-modal fixed inset-0 z-50 flex items-center justify-center p-4 opacity-0 pointer-events-none transition-opacity duration-300 ease-in-out"
  aria-labelledby={`modal-title-${modalId}`}
  role="dialog"
  aria-modal="true"
  tabindex="-1"
>
  <div class="modal-backdrop fixed inset-0 bg-black bg-opacity-80 backdrop-blur-sm" data-modal-close></div>
  
  <div class="modal-content bg-gray-900/95 border border-purple-900/50 rounded-xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-y-auto relative z-10 animate-modal-scale">
    <!-- Bouton de fermeture -->
    <button 
      class="absolute top-4 right-4 p-2 rounded-full bg-gray-800/70 text-gray-400 hover:text-white hover:bg-primary/60 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary transform hover:rotate-90 z-50"
      data-modal-close
      aria-label="Fermer"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
    
    <!-- En-tête avec image -->
    <div class="relative">
      <div class="relative h-64 w-full overflow-hidden rounded-t-xl">
        <div class="absolute inset-0 bg-gradient-to-b from-gray-900/70 via-gray-900/50 to-gray-900/90 z-10"></div>
        <Image
          src={imageSrc}
          alt={imageAlt}
          width={1200}
          height={400}
          class="w-full h-full object-cover object-center"
          format="webp"
          loading="lazy"
        />
        
        <!-- Contenu superposé sur l'image -->
        <div class="absolute inset-0 z-20 flex flex-col justify-center items-center text-center p-6">
          {data.icon && (
            <Image
              src={iconSrc}
              alt={iconAlt}
              width={100}
              height={100}
              class="rounded-full mb-4 shadow-lg border-4 border-primary/30 bg-gray-900/40"
              format="webp"
              loading="lazy"
            />
          )}
          
          <h2 id={`modal-title-${modalId}`} class="text-3xl md:text-4xl font-bold text-white drop-shadow-md mb-2">
            {data.name}
          </h2>
        </div>
      </div>
      
      <!-- Badges d'information -->
      <div class="bg-gray-800/80 backdrop-blur-md py-4 px-6 border-t border-b border-gray-700/50">
        <div class="flex flex-wrap gap-3 justify-center">
          <!-- Niveau -->
          <span class="badge bg-blue-900/80 text-blue-200 border border-blue-700/50 px-3 py-1 rounded-full text-xs flex items-center gap-1">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
            </svg>
            Niveau {data.level}
          </span>
          
          <!-- Difficulté -->
          <span class={`badge ${difficultyInfo.bgColor} ${difficultyInfo.textColor} border px-3 py-1 rounded-full text-xs flex items-center gap-1`}>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
            </svg>
            {difficultyInfo.label}
          </span>
          
          <!-- Joueurs -->
          <span class="badge bg-purple-900/80 text-purple-200 border border-purple-700/50 px-3 py-1 rounded-full text-xs flex items-center gap-1">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
            </svg>
            {playersText}
          </span>
          
          <!-- Région -->
          {data.region && (
            <span class="badge bg-pink-900/80 text-pink-200 border border-pink-700/50 px-3 py-1 rounded-full text-xs flex items-center gap-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
              {data.region}
            </span>
          )}
        </div>
      </div>
    </div>
    
    <!-- Description -->
    {data.description && (
      <div class="px-6 md:px-8 pt-6 pb-2">
        <p class="text-base text-gray-300 leading-relaxed">
          {data.description}
        </p>
      </div>
    )}
    
    <!-- Contenu principal -->
    <div class="grid grid-cols-1 gap-6 mx-6 md:mx-8 my-6">
      
      <!-- Boss -->
      {data.bosses && data.bosses.length > 0 && (
        <div class="glass-card rounded-xl border border-purple-800/30 shadow-lg overflow-hidden">
          <div class="bg-gradient-to-r from-purple-900/60 to-blue-900/60 py-3 px-4 border-b border-purple-700/30">
            <h3 class="text-xl font-bold text-white flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3zM6 8a2 2 0 11-4 0 2 2 0 014 0zM16 18v-3a5.972 5.972 0 00-.75-2.906A3.005 3.005 0 0119 15v3h-3zM4.75 12.094A5.973 5.973 0 004 15v3H1v-3a3 3 0 013.75-2.906z" />
              </svg>
              Boss
            </h3>
          </div>
          <div class="p-4 space-y-6">
            {data.bosses.map(boss => (
              <div class="flex flex-col bg-gray-800/30 rounded-lg p-4 border border-gray-700/30 hover:border-primary/30 transition-colors duration-300">
                <div class="flex items-start gap-4">
                  {boss.bossImage && (
                    <div class="flex-shrink-0 w-16 h-16 md:w-20 md:h-20 relative rounded-md overflow-hidden ring-2 ring-primary/20">
                      <Image
                        src={boss.bossImage.src}
                        alt={`Image de ${boss.name}`}
                        class="object-cover w-full h-full"
                        width={80} height={80}
                        format="webp"
                        loading="lazy"
                      />
                    </div>
                  )}
                  
                  <div class="flex-grow">
                    <h4 class="text-lg font-semibold text-primary drop-shadow-sm">{boss.name}</h4>
                    {boss.description && <p class="text-sm text-gray-300 mt-1">{boss.description}</p>}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
      
      <!-- Récompenses -->
      {data.rewards && data.rewards.length > 0 && (
        <div class="glass-card rounded-xl border border-amber-800/30 shadow-lg overflow-hidden">
          <div class="bg-gradient-to-r from-amber-900/60 to-yellow-900/60 py-3 px-4 border-b border-amber-700/30">
            <h3 class="text-xl font-bold text-white flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M5 5a3 3 0 015-2.236A3 3 0 0114.83 6H16a2 2 0 110 4h-5V9a1 1 0 10-2 0v1H4a2 2 0 110-4h1.17A3 3 0 015 5zm4 1V5a1 1 0 10-1 1h1zm3 0a1 1 0 10-1-1v1h1z" clip-rule="evenodd" />
                <path d="M9 11H3v5a2 2 0 002 2h4v-7zM11 18h4a2 2 0 002-2v-5h-6v7z" />
              </svg>
              Récompenses
            </h3>
          </div>
          <div class="p-4">
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
              {data.rewards.map((reward, index) => {
                const typeInfo = getRewardTypeInfo(reward.type);
                const imagePath = getRewardImagePath(reward);
                const isEquipment = reward.type?.toLowerCase() === 'equipment';
                const popupId = `reward-details-${modalId}-${index}`;
                
                return (
                  <div class={`rounded-lg border ${typeInfo.style} p-4 shadow-lg flex flex-col relative equipment-wrapper`}>
                    {/* Carte de récompense cliquable pour toutes les récompenses */}
                    <div 
                      class="flex items-center mb-3 cursor-pointer equipment-toggle"
                      data-target={popupId}
                    >
                      <div class="w-16 h-16 mr-4 flex-shrink-0 overflow-hidden rounded-lg border-2 border-white/30 bg-gray-700 flex items-center justify-center">
                        {imagePath ? (
                          <img
                            src={imagePath}
                            alt={reward.image?.alt || reward.name || 'Reward Image'}
                            class="max-w-full max-h-full object-contain"
                            loading="lazy"
                            width="64" 
                            height="64" 
                          />
                        ) : (
                          <div class="text-gray-400 text-xs text-center">Voir image</div>
                        )}
                      </div>
                      <div class="flex-grow">
                        <h3 class="text-lg font-bold text-white leading-tight">{reward.name}</h3>
                        <span class={`text-xs ${typeInfo.textClass} bg-gray-800/60 rounded px-2 py-0.5 mt-1 inline-block`}>
                          {typeInfo.text}
                        </span>
                      </div>
                      <div class="text-amber-400 ml-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                      </div>
                    </div>
                    
                    {reward.description && (
                      <p class="text-gray-300 text-sm mt-auto pt-2 border-t border-gray-700">{reward.description}</p>
                    )}
                    
                    {/* Popup pour toutes les récompenses */}
                    <div 
                      id={popupId} 
                      class="equipment-details hidden absolute z-50 w-80 p-4 bg-gray-900/95 backdrop-blur-md border border-amber-700/50 rounded-lg shadow-xl right-0 bottom-full mb-2"
                    >
                      {/* Affichage large de l'image */}
                      {reward.image?.src && (
                        <div class="mb-4 overflow-hidden rounded-lg border-2 border-amber-600/30 flex justify-center bg-gradient-to-b from-amber-900/20 to-gray-900/40 p-3">
                          <img
                            src={reward.image.src}
                            alt={reward.image.alt || reward.name}
                            class="max-w-full max-h-48 object-contain" 
                            loading="lazy"
                          />
                        </div>
                      )}
                      
                      {/* Entête du popup */}
                      <div class="flex items-center mb-3 pb-2 border-b border-amber-700/30">
                        <div>
                          <h4 class="text-amber-300 font-bold">{reward.name}</h4>
                          <span class="text-xs text-amber-200/70">{typeInfo.text}</span>
                        </div>
                      </div>
                      
                      {/* Stats de l'équipement (si c'est un équipement) */}
                      {isEquipment && reward.stats && (
                        <div class="space-y-1 text-sm mb-3">
                          {reward.stats.map(stat => (
                            <p class="text-amber-100">{stat}</p>
                          ))}
                        </div>
                      )}
                      
                      {/* Description */}
                      {reward.description && (
                        <div class="mt-1 pt-2 border-t border-amber-700/30">
                          <p class="text-gray-300 text-xs italic">{reward.description}</p>
                        </div>
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      )}
      
      <!-- Stratégie -->
      {data.strategy && (
        <div class="mb-10">
          <h2 class="text-2xl font-bold mb-4 text-secondary border-b-2 border-secondary/30 pb-2">Stratégie</h2>
          <div class="prose prose-invert max-w-none prose-p:text-muted-foreground prose-headings:text-primary prose-strong:text-primary">
            <p>{data.strategy}</p> 
          </div>
        </div>
      )}
    </div>
    
    <!-- Footer Copyright -->
    <div class="py-4 px-6 flex justify-center items-center bg-gradient-to-r from-gray-900/80 to-gray-800/80 border-t border-gray-700/30">
      <span class="text-xs text-gray-400">NexusWakfu - Guide des donjons</span>
    </div>
  </div>
</div>

<style>
  .animate-modal-scale {
    animation: modalScale 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  }
  
  @keyframes modalScale {
    from {
      opacity: 0;
      transform: scale(0.95);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }
  
  .modal-content {
    max-height: 90vh;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: rgba(255, 255, 255, 0.2) transparent;
  }
  
  .modal-content::-webkit-scrollbar {
    width: 8px;
  }
  
  .modal-content::-webkit-scrollbar-track {
    background: transparent;
  }
  
  .modal-content::-webkit-scrollbar-thumb {
    background-color: rgba(255, 255, 255, 0.2);
    border-radius: 20px;
  }
  
  .glass-card {
    background: rgba(30, 41, 59, 0.4);
    backdrop-filter: blur(12px);
  }
  
  /* Styles pour les popups d'équipement */
  .equipment-wrapper {
    position: relative;
  }
  
  .equipment-toggle {
    cursor: pointer;
  }
  
  .equipment-details {
    position: absolute;
    z-index: 100;
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.5);
    transition: opacity 0.2s, transform 0.2s;
  }
  
  .equipment-details.hidden {
    opacity: 0;
    transform: translateY(10px);
    pointer-events: none;
  }
  
  .equipment-details.block {
    opacity: 1;
    transform: translateY(0);
    pointer-events: auto;
  }
</style>

<script>
  // Script pour gérer l'affichage des détails des équipements
  document.addEventListener('DOMContentLoaded', () => {
    const equipButtons = document.querySelectorAll('.equipment-toggle');
    
    equipButtons.forEach(button => {
      const targetId = button.getAttribute('data-target');
      const target = document.getElementById(targetId);
      
      if (!target) return;
      
      // Montrer/cacher les détails au clic
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        const isVisible = target.classList.contains('block');
        
        // Fermer tous les popups
        document.querySelectorAll('.equipment-details').forEach(popup => {
          popup.classList.remove('block');
          popup.classList.add('hidden');
        });
        
        // Ouvrir celui-ci s'il était fermé
        if (!isVisible) {
          target.classList.remove('hidden');
          target.classList.add('block');
        }
      });
    });
    
    // Fermer les popups quand on clique ailleurs
    document.addEventListener('click', () => {
      document.querySelectorAll('.equipment-details').forEach(popup => {
        popup.classList.remove('block');
        popup.classList.add('hidden');
      });
    });
  });
</script>
