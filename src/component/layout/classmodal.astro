---
interface Props {
  isOpen: boolean;
  onClose: string;
  classData: {
    data: {
      name: string;
      description: string;
      abilities: Array<{
        type: string;
        name: string;
        image: {
          src: string;
          alt: string;
        };
      }>;
      uniquePassive?: {
        name: string;
        description: string;
        image?: {
          src: string;
          alt: string;
        };
      };
      passiveSpells: Array<{
        name: string;
        description: string;
        image: {
          src: string;
          alt: string;
        };
      }>;
    };
  };
}

const { isOpen, onClose, classData } = Astro.props;
---

<div class={`fixed inset-0 z-50 ${isOpen ? 'flex' : 'hidden'} items-center justify-center modal-container`} data-modal={classData.data.name}>
  <!-- Overlay -->
  <div class="fixed inset-0 bg-black/70 backdrop-blur-sm modal-overlay"></div>

  <!-- Modal -->
  <div class="relative z-10 w-full max-w-4xl max-h-[90vh] overflow-y-auto glass-card bg-white/10 m-4">
    <!-- Header -->
    <div class="sticky top-0 z-20 flex items-center justify-between p-6 border-b border-white/10 bg-black/50 backdrop-blur-md">
      <h2 class="text-3xl font-bold text-cyan-400">{classData.data.name}</h2>
      <button
        onclick={onClose}
        class="p-2 text-white/60 hover:text-white transition-colors"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>

    <!-- Content -->
    <div class="p-6 space-y-8">
      <!-- Description -->
      <div class="glass-card bg-white/5 p-6">
        <p class="text-lg text-white/90">{classData.data.description}</p>
      </div>

      <!-- Abilities -->
      {classData.data.abilities && (
        <div class="space-y-4">
          <h3 class="text-2xl font-semibold text-white">Rôles</h3>
          <div class="flex flex-wrap gap-4">
            {classData.data.abilities.map((ability) => (
              <div class="glass-card bg-white/5 p-4 flex items-center gap-3">
                <img
                  src={ability.image.src}
                  alt={ability.image.alt}
                  class="w-10 h-10 rounded-full bg-white/10 p-1"
                />
                <span class="text-white/90">{ability.name}</span>
              </div>
            ))}
          </div>
        </div>
      )}

      <!-- Unique Passive -->
      {classData.data.uniquePassive && (
        <div class="space-y-4">
          <h3 class="text-2xl font-semibold text-white">Passif Unique</h3>
          <div class="glass-card bg-white/5 p-6">
            <div class="flex items-center gap-4 mb-4">
              {classData.data.uniquePassive.image && (
                <img
                  src={classData.data.uniquePassive.image.src}
                  alt={classData.data.uniquePassive.image.alt}
                  class="w-12 h-12 rounded-lg bg-white/10 p-1"
                />
              )}
              <h4 class="text-xl font-semibold text-cyan-400">
                {classData.data.uniquePassive.name}
              </h4>
            </div>
            <p class="text-white/90">{classData.data.uniquePassive.description}</p>
          </div>
        </div>
      )}

      <!-- Passive Spells -->
      {classData.data.passiveSpells && (
        <div class="space-y-4">
          <h3 class="text-2xl font-semibold text-white">Sorts Passifs</h3>
          <div class="grid gap-4 md:grid-cols-2">
            {classData.data.passiveSpells.map((spell) => (
              <div class="glass-card bg-white/5 p-6">
                <div class="flex items-center gap-4 mb-4">
                  {spell.image && (
                    <img
                      src={spell.image.src}
                      alt={spell.image.alt}
                      class="w-12 h-12 rounded-lg bg-white/10 p-1"
                    />
                  )}
                  <h4 class="text-xl font-semibold text-cyan-400">{spell.name}</h4>
                </div>
                <p class="text-white/90">{spell.description}</p>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  </div>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    // Observer pour gérer le scroll du body
    const modals = document.querySelectorAll('[data-modal]');
    
    modals.forEach(modal => {
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
            const isHidden = modal.classList.contains('hidden');
            document.body.style.overflow = isHidden ? '' : 'hidden';
          }
        });
      });

      observer.observe(modal, { attributes: true });
    });
  });
</script>