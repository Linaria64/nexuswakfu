---
interface Props {
  isOpen: boolean;
  onClose: string;
  classData: {
    data: {
      name: string;
      description: string;
      abilities?: Array<{
        type: string;
        name: string;
        image: {
          src: string;
          alt: string;
        };
      }>;
      uniquePassive?: {
        name: string;
        description: string;
        image?: {
          src: string;
          alt: string;
        };
      };
      passiveSpells?: Array<{
        name: string;
        description: string;
        image: {
          src: string;
          alt: string;
        };
      }>;
      levelProgression?: Record<
        string | number,
        {
          stats: Array<string>;
          items: Array<{
            name: string;
            type: string;
            stats?: Array<string>;
            source?: string;
          }>;
        }
      >;
    };
  };
}

const { isOpen, onClose, classData } = Astro.props;

// Extraire les niveaux de progression s'ils existent
const progression = classData?.data?.levelProgression || {};
const progressionLevels = Object.keys(progression)
  .map((level) => parseInt(level, 10))
  .sort((a, b) => a - b);
---

<div
  class={`fixed inset-0 z-50 ${isOpen ? "flex" : "hidden"} items-center justify-center modal-container  `}
  data-modal={classData.data.name}
>
  <!-- Overlay - Ajout de onclick pour fermer en cliquant sur le fond -->
  <div class="fixed inset-0 modal-overlay" onclick={onClose}></div>

  <!-- Modal -->
  <div
    class="relative z-10 w-full max-w-4xl max-h-[90vh] overflow-y-auto bg-gradient-to-b from-[#0f0c29]/50 via-[#302b63]/50 to-[#24243e]/50 backdrop-blur-md shadow-md m-4"
  >
    <!-- Header -->
    <div
      class="sticky top-0 z-20 flex items-center justify-between p-6 border-b border-white/10 bg-black/50 backdrop-blur-md"
    >
      <h2 class="text-3xl font-bold text-cyan-400">{classData.data.name}</h2>
      <button
        onclick={onClose}
        class="p-2 text-white/60 hover:text-white transition-colors"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <!-- Content -->
    <div class="p-6 space-y-8">
      <!-- Description -->
      <div class="glass-card bg-white/5 p-6">
        <p class="text-lg text-white/90">{classData.data.description}</p>
      </div>

      <!-- Abilities -->
      {
        classData.data.abilities && (
          <div class="space-y-4">
            <h3 class="text-2xl font-semibold text-white">Rôles</h3>
            <div class="flex flex-wrap gap-4">
              {classData.data.abilities.map((ability) => (
                <div class="glass-card bg-white/5 p-4 flex items-center gap-3">
                  <img
                    src={ability.image.src}
                    alt={ability.image.alt}
                    class="w-10 h-10 rounded-full bg-white/10 p-1"
                  />
                  <span class="text-white/90">{ability.name}</span>
                </div>
              ))}
            </div>
          </div>
        )
      }

      <!-- Unique Passive -->
      {
        classData.data.uniquePassive && (
          <div class="space-y-4">
            <h3 class="text-2xl font-semibold text-white">Passif Unique</h3>
            <div class="glass-card bg-white/5 p-6">
              <div class="flex items-center gap-4 mb-4">
                {classData.data.uniquePassive.image && (
                  <img
                    src={classData.data.uniquePassive.image.src}
                    alt={classData.data.uniquePassive.image.alt}
                    class="w-12 h-12 rounded-lg bg-white/10 p-1"
                  />
                )}
                <h4 class="text-xl font-semibold text-cyan-400">
                  {classData.data.uniquePassive.name}
                </h4>
              </div>
              <p class="text-white/90">
                {classData.data.uniquePassive.description}
              </p>
            </div>
          </div>
        )
      }

      <!-- Passive Spells -->
      {
        classData.data.passiveSpells && (
          <div class="space-y-4">
            <h3 class="text-2xl font-semibold text-white">Sorts Passifs</h3>
            <div class="grid gap-4 md:grid-cols-2">
              {classData.data.passiveSpells.map((spell) => (
                <div class="glass-card bg-white/5 p-6">
                  <div class="flex items-center gap-4 mb-4">
                    {spell.image && (
                      <img
                        src={spell.image.src}
                        alt={spell.image.alt}
                        class="w-12 h-12 rounded-lg bg-white/10 p-1"
                      />
                    )}
                    <h4 class="text-xl font-semibold text-cyan-400">
                      {spell.name}
                    </h4>
                  </div>
                  <p class="text-white/90">{spell.description}</p>
                </div>
              ))}
            </div>
          </div>
        )
      }

      <!-- Progression par niveau -->
      {
        progressionLevels.length > 0 && (
          <div class="mb-8">
            <h3 class="text-2xl font-semibold text-cyan-400 mb-4">
              Progression
            </h3>
            <div class="space-y-8">
              {progressionLevels.map((level) => {
                const levelData = progression[level];
                if (!levelData?.stats || !levelData?.items) return null;

                return (
                  <div class="glass-card p-6">
                    <h4 class="text-xl font-semibold text-cyan-400 mb-4">
                      Niveau {level}
                    </h4>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                      {/* Stats */}
                      <div>
                        <h5 class="text-lg font-semibold text-white/80 mb-3">
                          Stats Cibles
                        </h5>
                        <ul class="space-y-2">
                          {levelData.stats.map((stat) => (
                            <li class="text-white/90">{stat}</li>
                          ))}
                        </ul>
                      </div>
                      {/* Items */}
                      <div>
                        <h5 class="text-lg font-semibold text-white/80 mb-3">
                          Équipement Recommandé
                        </h5>
                        <div class="space-y-4">
                          {levelData.items.map((item) => (
                            <div class="glass-card p-3">
                              <h6 class="font-semibold text-cyan-400">
                                {item.name}
                              </h6>
                              <p class="text-white/60 text-sm">{item.type}</p>
                              {item.stats && (
                                <ul class="mt-2 space-y-1">
                                  {item.stats.map((stat) => (
                                    <li class="text-white/80 text-sm">
                                      {stat}
                                    </li>
                                  ))}
                                </ul>
                              )}
                              {item.source && (
                                <p class="mt-2 text-sm text-cyan-400/80">
                                  Source: {item.source}
                                </p>
                              )}
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )
      }
    </div>
  </div>
</div>

<script>
  document.addEventListener("astro:page-load", () => {
    // Observer pour gérer le scroll du body
    const modals = document.querySelectorAll("[data-modal]");

    modals.forEach((modal) => {
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (
            mutation.type === "attributes" &&
            mutation.attributeName === "class"
          ) {
            const isHidden = modal.classList.contains("hidden");
            document.body.style.overflow = isHidden ? "" : "hidden";
          }
        });
      });

      observer.observe(modal, { attributes: true });
    });
  });
</script>
