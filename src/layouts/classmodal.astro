---
interface Props {
  isOpen: boolean;
  onClose: string;
  classData: {
    data: {
      name: string;
      description: string;
      abilities?: Array<{
        type: string;
        name: string;
        image: {
          src: string;
          alt: string;
        };
      }>;
      uniquePassive?: {
        name: string;
        description: string;
        image?: {
          src: string;
          alt: string;
        };
      };
      passiveSpells?: Array<{
        name: string;
        description: string;
        image: {
          src: string;
          alt: string;
        };
      }>;
      levelProgression?: Record<
        string | number,
        {
          stats: Array<string>;
          items: Array<{
            name: string;
            type: string;
            stats?: Array<string>;
            source?: string;
          }>;
        }
      >;
    };
  };
}

const { isOpen, onClose, classData } = Astro.props;

// Extraire les niveaux de progression s'ils existent
const progression = classData?.data?.levelProgression || {};
const progressionLevels = Object.keys(progression)
  .map((level) => parseInt(level, 10))
  .sort((a, b) => a - b);
---

<div
  class={`fixed inset-0 z-50 ${isOpen ? "flex" : "hidden"} items-center justify-center p-4 bg-black/75 backdrop-blur-sm`}
  data-modal={classData.data.name}
  onclick={onClose} <!-- Close on overlay click -->
>
  <!-- Modal Content -->
  <div
    class="relative z-10 w-full max-w-4xl max-h-[90vh] overflow-y-auto bg-slate-800 text-slate-200 rounded-xl shadow-2xl border border-slate-700"
    onclick="event.stopPropagation()" <!-- Prevent closing when clicking inside modal -->
  >
    <!-- Header -->
    <div class="sticky top-0 z-20 flex items-center justify-between p-5 bg-slate-900/70 backdrop-blur-md border-b border-slate-700 rounded-t-xl">
      <h2 class="text-3xl font-bold text-sky-400 tracking-tight">
        {classData.data.name}
      </h2>
      <button
        onclick={onClose}
        class="p-2 text-slate-400 hover:text-sky-400 transition-colors rounded-full hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
        aria-label="Close modal"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <!-- Scrollable Content Area -->
    <div class="p-6 space-y-8">
      <!-- Description -->
      <section class="p-5 bg-slate-700/40 rounded-lg shadow">
        <h3 class="text-2xl font-semibold text-sky-300 mb-3 border-b border-slate-600 pb-2">Description</h3>
        <p class="text-slate-300 leading-relaxed text-base">{classData.data.description}</p>
      </section>

      <!-- Abilities -->
      {classData.data.abilities && classData.data.abilities.length > 0 && (
        <section>
          <h3 class="text-2xl font-semibold text-sky-300 mb-4">Rôles</h3>
          <div class="flex flex-wrap gap-4">
            {classData.data.abilities.map((ability) => (
              <div class="bg-slate-700/60 p-4 rounded-lg flex items-center gap-3 shadow-md hover:shadow-lg hover:bg-slate-600/80 transition-all duration-200 ease-in-out">
                <img
                  src={ability.image.src}
                  alt={ability.image.alt}
                  class="w-10 h-10 rounded-full bg-slate-600 p-1 border-2 border-slate-500"
                />
                <span class="text-slate-100 font-medium text-lg">{ability.name}</span>
              </div>
            ))}
          </div>
        </section>
      )}

      <!-- Unique Passive -->
      {classData.data.uniquePassive && (
        <section>
          <h3 class="text-2xl font-semibold text-sky-300 mb-4">Passif Unique</h3>
          <div class="bg-slate-700/60 p-5 rounded-lg shadow-md">
            <div class="flex items-start sm:items-center gap-4 mb-3 flex-col sm:flex-row">
              {classData.data.uniquePassive.image && (
                <img
                  src={classData.data.uniquePassive.image.src}
                  alt={classData.data.uniquePassive.image.alt}
                  class="w-16 h-16 rounded-lg bg-slate-600 p-1 border-2 border-slate-500 flex-shrink-0"
                />
              )}
              <h4 class="text-xl font-bold text-sky-400">
                {classData.data.uniquePassive.name}
              </h4>
            </div>
            <p class="text-slate-300 leading-relaxed text-base">
              {classData.data.uniquePassive.description}
            </p>
          </div>
        </section>
      )}

      <!-- Passive Spells -->
      {classData.data.passiveSpells && classData.data.passiveSpells.length > 0 && (
        <section>
          <h3 class="text-2xl font-semibold text-sky-300 mb-4">Sorts Passifs</h3>
          <div class="grid gap-5 sm:grid-cols-1 md:grid-cols-2">
            {classData.data.passiveSpells.map((spell) => (
              <div class="bg-slate-700/60 p-5 rounded-lg shadow-md hover:shadow-lg hover:bg-slate-600/80 transition-all duration-200 ease-in-out">
                <div class="flex items-start sm:items-center gap-4 mb-3 flex-col sm:flex-row">
                  {spell.image && (
                    <img
                      src={spell.image.src}
                      alt={spell.image.alt}
                      class="w-14 h-14 rounded-lg bg-slate-600 p-1 border-2 border-slate-500 flex-shrink-0"
                    />
                  )}
                  <h4 class="text-xl font-bold text-sky-400">
                    {spell.name}
                  </h4>
                </div>
                <p class="text-slate-300 leading-relaxed text-base">{spell.description}</p>
              </div>
            ))}
          </div>
        </section>
      )}

      <!-- Progression par niveau -->
      {progressionLevels.length > 0 && (
        <section>
          <h3 class="text-2xl font-semibold text-sky-300 mb-5 text-center">
            Progression par Niveau
          </h3>
          <div class="space-y-6">
            {progressionLevels.map((level) => {
              const levelData = progression[level];
              if (!levelData?.stats || !levelData?.items) return null;

              return (
                <div class="bg-slate-700/40 p-5 rounded-lg shadow-md border border-slate-600/50">
                  <h4 class="text-xl font-bold text-sky-400 mb-4 border-b border-slate-600 pb-3">
                    Niveau {level}
                  </h4>
                  <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    {/* Stats */}
                    <div>
                      <h5 class="text-lg font-semibold text-slate-100 mb-3">
                        Stats Cibles
                      </h5>
                      <ul class="space-y-1.5 list-disc list-inside pl-2">
                        {levelData.stats.map((stat, index) => (
                          <li key={`stat-${level}-${index}`} class="text-slate-300 text-sm">{stat}</li>
                        ))}
                      </ul>
                    </div>
                    {/* Items */}
                    <div>
                      <h5 class="text-lg font-semibold text-slate-100 mb-3">
                        Équipement Recommandé
                      </h5>
                      <div class="space-y-4">
                        {levelData.items.map((item, index) => (
                          <div key={`item-${level}-${index}`} class="bg-slate-600/50 p-4 rounded-md shadow-sm border border-slate-500/50">
                            <h6 class="font-semibold text-sky-300 text-md">
                              {item.name}
                            </h6>
                            <p class="text-slate-400 text-xs italic mb-1">{item.type}</p>
                            {item.stats && item.stats.length > 0 && (
                              <ul class="mt-2 space-y-1 list-disc list-inside pl-2">
                                {item.stats.map((stat, statIndex) => (
                                  <li key={`item-stat-${level}-${index}-${statIndex}`} class="text-slate-300 text-xs">
                                    {stat}
                                  </li>
                                ))}
                              </ul>
                            )}
                            {item.source && (
                              <p class="mt-2 text-xs text-sky-400/90">
                                <span class="font-medium">Source:</span> {item.source}
                              </p>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </section>
      )}
    </div>
  </div>
</div>

<script>
  document.addEventListener("astro:page-load", () => {
    // Observer pour gérer le scroll du body
    const modals = document.querySelectorAll("[data-modal]");

    modals.forEach((modal) => {
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (
            mutation.type === "attributes" &&
            mutation.attributeName === "class"
          ) {
            const isHidden = modal.classList.contains("hidden");
            document.body.style.overflow = isHidden ? "" : "hidden";
          }
        });
      });

      observer.observe(modal, { attributes: true });
    });
  });
</script>
