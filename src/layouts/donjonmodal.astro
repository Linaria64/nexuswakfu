---
import ItemModal from "./itemmodal.astro";

interface Props {
  donjonData: {
    id: string;
    data: {
      name: string;
      description: string;
      level: number;
      difficulty: "easy" | "medium" | "hard" | "extreme";
      players: "solo" | "group" | "both";
      region: string;
      boss: string;
      modulated?: boolean; // Propriété pour indiquer si le donjon peut être modulé
      bosses?: Array<{
        name: string;
        description: string;
        hp: number;
        masteries: {
          fire: number;
          water: number;
          earth: number;
          air: number;
        };
        resistances: {
          fire: number;
          water: number;
          earth: number;
          air: number;
        };
      }>;
      mechanics?: Array<{
        name: string;
        description: string;
      }>;
      rewards?: Array<{
        name: string;
        type: "equipment" | "resource";
        description: string;
        dropRate: number;
        image?: {
          src: string;
          alt: string;
        };
        icon?: {
          src: string;
          alt: string;
        };
        stats?: Array<string>;
      }>;
      strategy?: {
        phases: Array<{
          title: string;
          description: string;
        }>;
        tips: Array<string>;
      };
      steles?: Array<{
        name: string;
        description: string;
      }>;
    };
  };
  isOpen: boolean;
  onClose: string;
}

const { donjonData, isOpen, onClose } = Astro.props;
---

<div
  class={`fixed inset-0 z-50 ${isOpen ? "flex" : "hidden"} items-center justify-center modal-container o`}
  data-modal={donjonData.data.name}
>
  <!-- Overlay -->
  <div
    class="fixed inset-0 bg-black/70 backdrop-blur-sm modal-overlay"
    onclick={onClose}
  >
  </div>

  <!-- Modal -->
  <div
    class="relative z-10 w-full max-w-4xl max-h-[90vh] overflow-y-auto glass-card bg-white/10 m-4"
  >
    <!-- Header -->
    <div
      class="sticky top-0 z-20 flex items-center justify-between p-6 border-b border-white/10 bg-black/50 backdrop-blur-md"
    >
      <h2 class="text-3xl font-bold text-cyan-400 w-1/2 mx-auto">
        {donjonData.data.name}
      </h2>
    </div>

    <!-- Content -->
    <div class="p-6">
      <!-- Description -->
      <div class="mb-8">
        <p class="text-white/90">{donjonData.data.description}</p>
      </div>

      <!-- Difficulté Slider - affiché pour tous les donjons -->
      <div
        class="mb-8 glass-card p-4 bg-gradient-to-br from-[#1e2225]/50 to-[#2E1437]/50"
      >
        <div class="flex items-center justify-between mb-2">
          <h3 class="text-2xl font-semibold text-cyan-400">
            Niveau de difficulté
          </h3>
          <label class="flex items-center cursor-pointer">
            <span class="text-white/80 mr-2">Modulé</span>
            <input
              type="checkbox"
              id="modulation-toggle"
              class="hidden"
              checked
            />
            <span
              class="toggle-switch relative inline-block w-12 h-6 bg-white/10 rounded-full transition-colors"
            >
              <span
                class="toggle-knob absolute left-1 top-1 w-4 h-4 bg-cyan-400 rounded-full transition-transform"
              ></span>
            </span>
          </label>
        </div>
        <div class="flex flex-col gap-2">
          <div class="flex items-center justify-between">
            <span class="text-white/80">1</span>
            <span id="difficulty-value" class="text-xl font-bold text-cyan-400"
              >1</span
            >
            <span class="text-white/80">10</span>
          </div>
          <input
            type="range"
            min="1"
            max="10"
            value="1"
            class="w-full appearance-none h-3 rounded-lg bg-white/10 outline-none cursor-pointer slider-difficulty"
            id="difficulty-slider"
          />
        </div>
        <div class="mt-4">
          <p class="text-white/80 text-sm">
            Le niveau de difficulté affecte les PV des boss et la qualité des
            récompenses.
          </p>
        </div>
      </div>

      <!-- Caractéristiques -->
      <div class="mb-8">
        <h3 class="text-2xl font-semibold text-cyan-400 mb-4">
          Caractéristiques
        </h3>
        <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
          <div class="glass-card p-4">
            <p class="text-white/60">Niveau</p>
            <p class="text-white font-semibold">{donjonData.data.level}</p>
          </div>
          <div class="glass-card p-4">
            <p class="text-white/60">Difficulté</p>
            <p class="text-white font-semibold capitalize">
              {donjonData.data.difficulty}
            </p>
          </div>
          <div class="glass-card p-4">
            <p class="text-white/60">Joueurs</p>
            <p class="text-white font-semibold">
              {
                donjonData.data.players === "group"
                  ? "3"
                  : donjonData.data.players === "both"
                    ? "3-6"
                    : donjonData.data.players
              }
            </p>
          </div>
          {/* Indicateur si le donjon est modulé ou non */}
          <div class="glass-card p-4">
            <p class="text-white/60">Modulé</p>
            <p class="text-white font-semibold">
              {donjonData.data.modulated ? "Oui" : "Non"}
            </p>
          </div>
        </div>
      </div>

      <!-- Boss -->
      {
        donjonData.data.bosses && (
          <div class="mb-8">
            <h3 class="text-2xl font-semibold text-cyan-400 mb-4">Boss</h3>
            <div class="space-y-6">
              {donjonData.data.bosses.map((boss) => (
                <div class="glass-card p-4">
                  <h4 class="text-xl font-semibold text-cyan-400 mb-2">
                    {boss.name}
                  </h4>
                  <p class="text-white/90 mb-4">{boss.description}</p>

                  <div class="grid grid-cols-2 gap-4">
                    <div>
                      <h5 class="text-white/60 mb-2">PV de base</h5>
                      <p class="text-white text-xl font-bold">
                        <span class="base-hp">{boss.hp}</span>
                      </p>
                      <h5 class="text-white/60 mt-4 mb-2">
                        PV ajustés (difficulté:{" "}
                        <span class="diff-level">1</span>)
                      </h5>
                      <p class="text-white text-xl font-bold">
                        <span class="adjusted-hp">{boss.hp}</span>
                      </p>
                    </div>
                    <div>
                      <h5 class="text-white/60 mb-2">Maîtrises</h5>
                      <ul class="space-y-1">
                        {Object.entries(boss.masteries).map(
                          ([element, value]) => (
                            <li class="text-white">
                              {element.charAt(0).toUpperCase() +
                                element.slice(1)}
                              :{" "}
                              <span
                                class={`base-mastery ${value > 0 ? "mastery-" + element : ""}`}
                              >
                                {value}
                              </span>
                              {value > 0 && (
                                <span class="text-cyan-400 ml-2">
                                  →{" "}
                                  <span
                                    class={`adjusted-mastery mastery-${element}`}
                                  >
                                    {value}
                                  </span>
                                </span>
                              )}
                            </li>
                          )
                        )}
                      </ul>
                    </div>
                  </div>
                  <div class="mt-4">
                    <h5 class="text-white/60 mb-2">Résistances</h5>
                    <ul class="grid grid-cols-2 gap-2">
                      {Object.entries(boss.resistances).map(
                        ([element, value]) => (
                          <li class="text-white">
                            {element.charAt(0).toUpperCase() + element.slice(1)}
                            : {value}%
                          </li>
                        )
                      )}
                    </ul>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )
      }

      <!-- Stratégie et Mécaniques -->
      {
        (donjonData.data.mechanics ||
          donjonData.data.strategy ||
          donjonData.data.steles) && (
          <div class="mb-8">
            <h3 class="text-2xl font-semibold text-cyan-400 mb-4">Stratégie</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
              {/* Colonne Mécaniques */}
              {donjonData.data.mechanics && (
                <div>
                  <h4 class="text-lg font-semibold text-white/80 mb-3">
                    Mécaniques
                  </h4>
                  <div class="space-y-4">
                    {donjonData.data.mechanics.map((mechanic) => (
                      <div class="glass-card p-4">
                        <h4 class="text-lg font-semibold text-cyan-400 mb-2">
                          {mechanic.name}
                        </h4>
                        <p class="text-white/90">{mechanic.description}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Colonne Stèles */}
              {donjonData.data.steles && donjonData.data.steles.length > 0 && (
                <div>
                  <h4 class="text-lg font-semibold text-white/80 mb-3">
                    Stèles
                  </h4>
                  <div class="space-y-4">
                    {donjonData.data.steles.map((stele) => (
                      <div class="glass-card p-4 hover:bg-white/5 transition-colors">
                        <h4 class="text-lg font-semibold text-cyan-400 mb-2">
                          {stele.name}
                        </h4>
                        <p class="text-white/90">{stele.description}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        )
      }

      <!-- Récompenses -->
      {
        donjonData &&
          donjonData.data &&
          donjonData.data.rewards &&
          donjonData.data.rewards.length > 0 && (
            <div class="mb-8">
              <h3 class="text-2xl font-semibold text-cyan-400 mb-4">
                Récompenses
              </h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                {/* Colonne Équipements */}
                <div>
                  <h4 class="text-lg font-semibold text-white/80 mb-3">
                    Équipements
                  </h4>
                  <div class="space-y-4">
                    {donjonData.data.rewards
                      .filter((reward) => reward.type === "equipment")
                      .map((reward) => (
                        <div class="glass-card p-4">
                          <div
                            class="flex items-center gap-4 mb-2 cursor-pointer hover:bg-white/5 rounded-lg p-2 transition-colors"
                            onclick={`openItemModal('${reward.name}')`}
                          >
                            {reward.image && (
                              <img
                                src={reward.image.src}
                                alt={reward.image.alt}
                                class="w-12 h-12 rounded-lg"
                                loading="lazy"
                              />
                            )}
                            <div class="flex-1">
                              <div class="flex items-center gap-2">
                                {reward.icon && (
                                  <img
                                    src={reward.icon.src}
                                    alt={reward.icon.alt}
                                    class="w-6 h-6"
                                    loading="lazy"
                                  />
                                )}
                                <h4 class="text-lg font-semibold text-cyan-400">
                                  {reward.name}
                                </h4>
                              </div>
                              {reward.stats && (
                                <ul class="mt-2 space-y-1">
                                  {reward.stats.map((stat) => (
                                    <li class="text-sm text-white/80">
                                      {stat}
                                    </li>
                                  ))}
                                </ul>
                              )}
                            </div>
                          </div>
                          <p class="text-white/90 mb-2">{reward.description}</p>
                          <div class="flex justify-end mt-2">
                            <span class="text-sm text-cyan-400 font-medium px-3 py-1 glass-card">
                              Taux de drop :{" "}
                              <span class="base-drop">{reward.dropRate}</span>%
                              <span class="text-green-400 ml-1 adjusted-drop-container">
                                →{" "}
                                <span class="adjusted-drop">
                                  {reward.dropRate}
                                </span>
                                %
                              </span>
                            </span>
                          </div>
                        </div>
                      ))}
                  </div>
                </div>

                {/* Colonne Ressources */}
                <div>
                  <h4 class="text-lg font-semibold text-white/80 mb-3">
                    Ressources
                  </h4>
                  <div class="space-y-4">
                    {donjonData.data.rewards
                      .filter((reward) => reward.type === "resource")
                      .map((reward) => (
                        <div class="glass-card p-4">
                          <div
                            class="flex items-center gap-4 mb-2 cursor-pointer hover:bg-white/5 rounded-lg p-2 transition-colors"
                            onclick={`openItemModal('${reward.name}')`}
                          >
                            {reward.image && (
                              <img
                                src={reward.image.src}
                                alt={reward.image.alt}
                                class="w-12 h-12 rounded-lg"
                                loading="lazy"
                              />
                            )}
                            <div class="flex-1">
                              <div class="flex items-center gap-2">
                                {reward.icon && (
                                  <img
                                    src={reward.icon.src}
                                    alt={reward.icon.alt}
                                    class="w-6 h-6"
                                    loading="lazy"
                                  />
                                )}
                                <h4 class="text-lg font-semibold text-cyan-400">
                                  {reward.name}
                                </h4>
                              </div>
                            </div>
                          </div>
                          <p class="text-white/90 mb-2">{reward.description}</p>
                          <div class="flex justify-end mt-2">
                            <span class="text-sm text-cyan-400 font-medium px-3 py-1 glass-card">
                              Taux de drop :{" "}
                              <span class="base-drop">{reward.dropRate}</span>%
                              <span class="text-green-400 ml-1 adjusted-drop-container">
                                →{" "}
                                <span class="adjusted-drop">
                                  {reward.dropRate}
                                </span>
                                %
                              </span>
                            </span>
                          </div>
                        </div>
                      ))}
                  </div>
                </div>
              </div>
            </div>
          )
      }
    </div>
  </div>
</div>

<!-- Item Modals -->
{
  donjonData &&
    donjonData.data &&
    donjonData.data.rewards?.map((reward) => (
      <ItemModal
        item={reward}
        isOpen={false}
        onClose={`closeItemModal('${reward.name}')`}
      />
    ))
}

<script is:inline>
  // Définir les fonctions globalement
  if (typeof window !== "undefined") {
    window.openItemModal = (itemName) => {
      const modal = document.querySelector(`[data-item-modal="${itemName}"]`);
      if (modal) {
        modal.classList.remove("hidden");
        modal.classList.add("flex");
      }
    };

    window.closeItemModal = (itemName) => {
      const modal = document.querySelector(`[data-item-modal="${itemName}"]`);
      if (modal) {
        modal.classList.remove("flex");
        modal.classList.add("hidden");
      }
    };

    // Définir les pourcentages d'augmentation de HP par niveau de difficulté
    const hpIncreaseByDifficulty = {
      1: -30, // Base HP (no increase)
      2: 0, // 50% increase
      3: 40, // 100% increase (double HP)
      4: 110,
      5: 210,
      6: 340,
      7: 500,
      8: 560,
      9: 780,
      10: 1000,
    };
    const dpsIncreaseByDifficulty = {
      1: -20, // Base HP (no increase)
      2: 0,
      3: 30, // 100% increase (double HP)
      4: 60,
      5: 100,
      6: 120,
      7: 130,
      8: 140,
      9: 150,
      10: 160,
    };
    const drop = {
      1: -30, // Base HP (no increase)
      2: 0, // 50% increase
      3: -30, // 100% increase (double HP)
      4: 0,
      5: 0,
      6: 0,
      7: 500,
      8: 560,
      9: 780,
      10: 1000,
    };
    const dropModu = {
      1: -30, // Base HP (no increase)
      2: 0, // 50% increase
      3: 400, // 100% increase (double HP)
      4: 500,
      5: 600,
      6: 700,
      7: 800,
      8: 900,
      9: 1100,
      10: 1500,
    };

    // Fonction pour mettre à jour les HP basée sur la difficulté
    function updateHpBasedOnDifficulty(difficulty) {
      // Vérifier si la modulation est activée
      const modulationToggle = document.querySelector("#modulation-toggle");
      const isModulated = modulationToggle && modulationToggle.checked;

      if (!isModulated) {
        resetHpToBase();
        return; // Ne pas continuer si la modulation est désactivée
      }

      // Mise à jour de l'affichage du niveau de difficulté
      const difficultyValues = document.querySelectorAll("#difficulty-value");
      const diffLevelElements = document.querySelectorAll(".diff-level");

      difficultyValues.forEach((el) => {
        el.textContent = difficulty;
      });

      diffLevelElements.forEach((el) => {
        el.textContent = difficulty;
      });

      // Calcul des HP ajustés pour chaque boss
      const baseHpElements = document.querySelectorAll(".base-hp");
      const adjustedHpElements = document.querySelectorAll(".adjusted-hp");

      baseHpElements.forEach((baseHpEl, index) => {
        if (adjustedHpElements[index]) {
          const baseHpText = baseHpEl.textContent.replace(/,/g, "");
          const baseHp = parseInt(baseHpText);
          const increasePercentage = hpIncreaseByDifficulty[difficulty];

          if (!isNaN(baseHp)) {
            const adjustedHp = Math.round(
              baseHp * (1 + increasePercentage / 100)
            );
            adjustedHpElements[index].textContent = adjustedHp.toLocaleString();
          } else {
            console.error("Invalid base HP:", baseHpEl.textContent);
          }
        }
      });

      // Calcul des maîtrises ajustées pour chaque boss (uniquement les valeurs non nulles)
      const baseMasteryElements = document.querySelectorAll(
        ".base-mastery[class*='mastery-']"
      );

      baseMasteryElements.forEach((baseMasteryEl) => {
        // Obtenir le type d'élément (eau, feu, terre, air) depuis la classe
        const elementClasses = Array.from(baseMasteryEl.classList).find((cls) =>
          cls.startsWith("mastery-")
        );

        if (elementClasses) {
          const elementType = elementClasses.replace("mastery-", "");
          // Trouver l'élément ajusté correspondant
          const adjustedMasteryEl = document.querySelector(
            `.adjusted-mastery.mastery-${elementType}`
          );

          if (adjustedMasteryEl) {
            const baseMasteryText = baseMasteryEl.textContent.replace(/,/g, "");
            const baseMastery = parseInt(baseMasteryText);
            // Utiliser dpsIncreaseByDifficulty pour les maîtrises (dégâts)
            const increasePercentage = dpsIncreaseByDifficulty[difficulty];

            if (!isNaN(baseMastery)) {
              const adjustedMastery = Math.round(
                baseMastery * (1 + increasePercentage / 100)
              );
              adjustedMasteryEl.textContent = adjustedMastery.toLocaleString();
            }
          }
        }
      });

      // Mise à jour des taux de drop en fonction de la difficulté
      updateDropRates(difficulty, isModulated);
    }

    // Fonction pour mettre à jour les taux de drop des items
    function updateDropRates(difficulty, isModulated) {
      console.log(
        "Updating drop rates for difficulty:",
        difficulty,
        "modulated:",
        isModulated
      );

      const baseDropElements = document.querySelectorAll(".base-drop");
      const adjustedDropElements = document.querySelectorAll(".adjusted-drop");
      const adjustedDropContainers = document.querySelectorAll(
        ".adjusted-drop-container"
      );

      console.log(
        "Found drop elements:",
        baseDropElements.length,
        adjustedDropElements.length
      );

      // Déterminer quelle table d'augmentation utiliser en fonction du statut de modulation
      const increaseTable = isModulated ? dropModu : drop;

      baseDropElements.forEach((baseDropEl, index) => {
        if (adjustedDropElements[index]) {
          const baseDropText = baseDropEl.textContent
            .trim()
            .replace(/,/g, "")
            .replace(/%/g, "");
          const baseDropRate = parseFloat(baseDropText);
          const increasePercentage = increaseTable[difficulty];

          console.log(
            `Item ${index}: base rate = ${baseDropRate}, increase = ${increasePercentage}%`
          );

          if (!isNaN(baseDropRate)) {
            // Calculer le nouveau taux de drop (avec limite à 100%)
            let adjustedDropRate = baseDropRate;
            if (increasePercentage !== undefined) {
              adjustedDropRate = Math.min(
                100,
                baseDropRate * (1 + increasePercentage / 100)
              );
            }

            // Arrondir au dixième près
            adjustedDropRate = Math.round(adjustedDropRate * 10) / 10;

            console.log(`Item ${index}: adjusted rate = ${adjustedDropRate}`);

            // Mettre à jour l'affichage
            adjustedDropElements[index].textContent =
              adjustedDropRate.toLocaleString();

            // Afficher ou masquer l'indicateur d'ajustement
            if (adjustedDropContainers[index]) {
              if (Math.abs(baseDropRate - adjustedDropRate) < 0.1) {
                adjustedDropContainers[index].style.display = "none";
              } else {
                adjustedDropContainers[index].style.display = "inline";
              }
            }
          } else {
            console.error("Invalid drop rate:", baseDropEl.textContent);
          }
        }
      });
    }

    // Fonction pour réinitialiser les HP et maîtrises aux valeurs de base
    function resetHpToBase() {
      const baseHpElements = document.querySelectorAll(".base-hp");
      const adjustedHpElements = document.querySelectorAll(".adjusted-hp");

      baseHpElements.forEach((baseHpEl, index) => {
        if (adjustedHpElements[index]) {
          adjustedHpElements[index].textContent = baseHpEl.textContent;
        }
      });

      // Réinitialiser également les maîtrises
      const baseMasteryElements = document.querySelectorAll(".base-mastery");
      const adjustedMasteryElements =
        document.querySelectorAll(".adjusted-mastery");

      baseMasteryElements.forEach((baseMasteryEl, index) => {
        if (adjustedMasteryElements[index]) {
          adjustedMasteryElements[index].textContent =
            baseMasteryEl.textContent;
        }
      });

      // Réinitialiser les taux de drop et masquer les ajustements
      resetDropRates();
    }

    // Fonction pour réinitialiser les taux de drop
    function resetDropRates() {
      const baseDropElements = document.querySelectorAll(".base-drop");
      const adjustedDropElements = document.querySelectorAll(".adjusted-drop");
      const adjustedDropContainers = document.querySelectorAll(
        ".adjusted-drop-container"
      );

      baseDropElements.forEach((baseDropEl, index) => {
        if (adjustedDropElements[index]) {
          adjustedDropElements[index].textContent = baseDropEl.textContent;
        }

        if (adjustedDropContainers[index]) {
          adjustedDropContainers[index].style.display = "none";
        }
      });
    }

    // Fonction pour mettre à jour l'état du slider en fonction de la case à cocher
    function updateSliderState(isEnabled) {
      const difficultySlider = document.querySelector("#difficulty-slider");
      const difficultyValue = document.querySelector("#difficulty-value");
      const toggleSwitch = document.querySelector(".toggle-switch");
      const toggleKnob = document.querySelector(".toggle-knob");

      if (difficultySlider && difficultyValue) {
        // Correction: Ne pas désactiver le slider, juste changer son apparence
        // difficultySlider.disabled = !isEnabled;

        if (isEnabled) {
          // Activer le slider
          difficultySlider.classList.remove("opacity-50", "cursor-not-allowed");
          difficultySlider.classList.add("cursor-pointer");
          difficultyValue.classList.remove("text-white/50");
          difficultyValue.classList.add("text-cyan-400");

          // Mettre à jour le style du switch
          if (toggleSwitch) {
            toggleSwitch.classList.add("bg-cyan-400/30");
            toggleSwitch.classList.remove("bg-white/10");
          }

          if (toggleKnob) {
            toggleKnob.classList.add("translate-x-6");
          }

          // Calculer les HP ajustés
          updateHpBasedOnDifficulty(parseInt(difficultySlider.value));
        } else {
          // Désactiver visuellement le slider mais le garder fonctionnel
          difficultySlider.classList.add("opacity-50", "cursor-not-allowed");
          difficultySlider.classList.remove("cursor-pointer");
          difficultyValue.classList.add("text-white/50");
          difficultyValue.classList.remove("text-cyan-400");

          // Mettre à jour le style du switch
          if (toggleSwitch) {
            toggleSwitch.classList.remove("bg-cyan-400/30");
            toggleSwitch.classList.add("bg-white/10");
          }

          if (toggleKnob) {
            toggleKnob.classList.remove("translate-x-6");
          }

          // Réinitialiser les HP aux valeurs de base
          resetHpToBase();
        }
      }
    }

    // Gestion du slider de difficulté - utilisation de DOMContentLoaded et window.onload pour s'assurer que le DOM est chargé
    function initializeDifficultySliders() {
      console.log("Initializing difficulty sliders");
      const difficultySliders = document.querySelectorAll("#difficulty-slider");
      const modulationToggles = document.querySelectorAll("#modulation-toggle");

      console.log("Found sliders:", difficultySliders.length);
      console.log("Found toggles:", modulationToggles.length);

      // Initialiser les toggles de modulation
      modulationToggles.forEach((toggle) => {
        if (toggle) {
          // Supprimer les anciens écouteurs pour éviter les doublons
          toggle.removeEventListener("change", handleModulationToggle);
          toggle.addEventListener("change", handleModulationToggle);

          // S'assurer que le CSS initial du toggle reflète son état
          toggle.checked = true;
          const toggleSwitch = toggle.nextElementSibling;
          if (
            toggleSwitch &&
            toggleSwitch.classList.contains("toggle-switch")
          ) {
            toggleSwitch.classList.add("bg-cyan-400/30");
            const toggleKnob = toggleSwitch.querySelector(".toggle-knob");
            if (toggleKnob) {
              toggleKnob.classList.add("translate-x-6");
            }
          }

          // Déclencher une fois pour initialiser correctement l'UI
          setTimeout(() => {
            updateSliderState(toggle.checked);
            // Calculer les taux ajustés initiaux
            const slider = document.querySelector("#difficulty-slider");
            if (slider) {
              const difficulty = parseInt(slider.value || "1");
              updateHpBasedOnDifficulty(difficulty);
              updateDropRates(difficulty, toggle.checked);
            }
          }, 150);
        }
      });

      // Initialiser les sliders
      difficultySliders.forEach((slider) => {
        if (slider) {
          console.log("Setting up slider:", slider);

          // Supprimer les anciens écouteurs pour éviter les doublons
          slider.removeEventListener("input", handleSliderInput);
          slider.addEventListener("input", handleSliderInput);

          // Initialisation du style du slider
          slider.style.background =
            "linear-gradient(to right, #22d3ee 0%, rgba(255, 255, 255, 0.1) 0%)";

          // Définir la valeur initiale à 1
          slider.value = 1;

          // Déclencher manuellement l'événement input pour initialiser les valeurs
          updateHpBasedOnDifficulty(1);

          // Mettre à jour le style du slider
          const gradientPercent = 0; // 0% pour difficulté 1
          slider.style.background = `linear-gradient(to right, #22d3ee ${gradientPercent}%, rgba(255, 255, 255, 0.1) ${gradientPercent}%)`;
        }
      });
    }

    function handleModulationToggle() {
      console.log("Modulation toggle changed:", this.checked);
      updateSliderState(this.checked);

      // Si la modulation est activée, recalculer les valeurs avec le niveau de difficulté actuel
      if (this.checked) {
        const slider = document.querySelector("#difficulty-slider");
        if (slider) {
          updateHpBasedOnDifficulty(parseInt(slider.value));
        }
      }
    }

    function handleSliderInput() {
      const difficulty = parseInt(this.value);
      console.log("Slider moved to difficulty:", difficulty);

      updateHpBasedOnDifficulty(difficulty);

      // Mise à jour du style du slider pour afficher la progression
      const gradientPercent = ((difficulty - 1) / 9) * 100;
      this.style.background = `linear-gradient(to right, #22d3ee ${gradientPercent}%, rgba(255, 255, 255, 0.1) ${gradientPercent}%)`;
    }

    // Initialiser les sliders dès que possible
    document.addEventListener("DOMContentLoaded", initializeDifficultySliders);
    window.addEventListener("load", initializeDifficultySliders);
    document.addEventListener("astro:page-load", initializeDifficultySliders);

    // Réinitialiser les sliders lorsque le modal est ouvert
    document.addEventListener("astro:page-load", () => {
      const modals = document.querySelectorAll(".modal-container");

      modals.forEach((modal) => {
        // Observer les changements de classe pour détecter quand un modal s'ouvre
        const observer = new MutationObserver((mutations) => {
          mutations.forEach((mutation) => {
            if (mutation.attributeName === "class") {
              const isVisible = modal.classList.contains("flex");
              if (isVisible) {
                console.log("Modal opened, reinitializing sliders");
                setTimeout(initializeDifficultySliders, 100); // Petit délai pour s'assurer que le DOM est stable
              }
              document.body.style.overflow = isVisible ? "hidden" : "";
            }
          });
        });

        observer.observe(modal, { attributes: true });
      });

      // Empêcher la propagation du clic sur les modals
      const glassCards = document.querySelectorAll(".glass-card");
      glassCards.forEach((card) => {
        card.addEventListener("click", (e) => e.stopPropagation());
      });
    });
  }
</script>

<style>
  /* Style du slider personnalisé */
  .slider-difficulty {
    -webkit-appearance: none;
    appearance: none;
    height: 8px;
    border-radius: 4px;
    outline: none;
  }

  .slider-difficulty::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: #22d3ee;
    cursor: pointer;
    border: 2px solid rgba(255, 255, 255, 0.3);
    box-shadow: 0 0 8px rgba(0, 0, 0, 0.5);
  }

  .slider-difficulty::-moz-range-thumb {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: #22d3ee;
    cursor: pointer;
    border: 2px solid rgba(255, 255, 255, 0.3);
    box-shadow: 0 0 8px rgba(0, 0, 0, 0.5);
  }

  /* Styles pour le toggle switch */
  .toggle-switch {
    transition: background-color 0.3s;
  }

  .toggle-knob {
    transition: transform 0.3s;
  }

  input[type="checkbox"]:checked + .toggle-switch {
    background-color: rgba(34, 211, 238, 0.3); /* cyan-400 avec opacité */
  }

  input[type="checkbox"]:checked + .toggle-switch .toggle-knob {
    transform: translateX(24px);
  }

  /* Style pour les taux de drop ajustés */
  .adjusted-drop-container {
    display: none; /* Caché par défaut */
  }
</style>
